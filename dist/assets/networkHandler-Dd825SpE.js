const e=new class{constructor(){this.retryAttempts=3,this.retryDelay=2e3,this.isOnline=navigator.onLine,this.reconnectAttempts=0,this.maxReconnectAttempts=5,this.setupNetworkListeners()}setupNetworkListeners(){window.addEventListener("online",()=>{this.isOnline=!0,this.reconnectAttempts=0,this.handleReconnection()}),window.addEventListener("offline",()=>{this.isOnline=!1,this.handleOffline()}),setInterval(()=>this.checkConnectivity(),3e4)}async checkConnectivity(){if(this.isOnline)try{await fetch("https://www.google.com/favicon.ico",{method:"HEAD",mode:"no-cors",cache:"no-cache"}),this.isOnline||(this.isOnline=!0,this.handleReconnection())}catch{this.isOnline&&(this.isOnline=!1,this.handleOffline())}}async retryOperation(e,t="opera√ß√£o"){for(let i=1;i<=this.retryAttempts;i++)try{return await e()}catch(n){if(this.isNetworkError(n)?await this.delay(this.retryDelay*i*2):await this.delay(this.retryDelay*i),i===this.retryAttempts)throw new Error(`Falha na ${t} ap√≥s m√∫ltiplas tentativas: ${n.message}`)}}isNetworkError(e){return["network-request-failed","ERR_NETWORK","ERR_INTERNET_DISCONNECTED","ERR_ABORTED","Failed to fetch"].some(t=>e.message?.includes(t)||e.code?.includes(t))}delay(e){return new Promise(t=>setTimeout(t,e))}handleReconnection(){window.eventBus&&window.eventBus.emit("network:reconnected"),window.Snackbar&&window.Snackbar({message:"‚úÖ Conex√£o restaurada",type:"success",duration:3e3}),this.reconnectFirebaseListeners()}handleOffline(){window.eventBus&&window.eventBus.emit("network:offline"),window.Snackbar&&window.Snackbar({message:"üö´ Sem conex√£o. Trabalhando offline.",type:"warning",duration:5e3})}reconnectFirebaseListeners(){window.eventBus&&window.eventBus.emit("firebase:reconnect-listeners")}canExecuteOperation(){return this.isOnline}async waitForConnection(e=1e4){return!!this.isOnline||new Promise((t,n)=>{const i=setTimeout(()=>{n(new Error("Timeout aguardando conex√£o"))},e),s=()=>{this.isOnline?(clearTimeout(i),t(!0)):setTimeout(s,500)};s()})}};window.NetworkHandler=e;export{e as default};

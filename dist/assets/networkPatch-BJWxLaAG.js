class e{constructor(){this.isInitialized=!1,this.originalHandlers=new Map}initialize(){this.patchGlobalErrorHandling(),this.patchPromiseRejection(),this.patchTimeouts(),this.setupGlobalNetworkHandling(),this.isInitialized=!0}patchGlobalErrorHandling(){const e=window.onerror;this.originalHandlers.set("onerror",e),window.onerror=(t,i,n,r,o)=>this.isNetworkRelatedError(t,o)?(this.attemptRecovery(o),!0):!!e&&e.call(this,t,i,n,r,o)}patchPromiseRejection(){const e=window.onunhandledrejection;this.originalHandlers.set("onunhandledrejection",e),window.onunhandledrejection=t=>{const i=t.reason;return this.isNetworkRelatedError(i?.message,i)?(this.attemptRecovery(i),void t.preventDefault()):e?e.call(this,t):void 0}}patchTimeouts(){const t=window.setTimeout,i=window.setInterval;window.setTimeout=function(i,n,...r){return t.call(this,function(){try{return i.apply(this,r)}catch(t){if(!e.prototype.isNetworkRelatedError(t?.message,t))throw t;e.prototype.attemptRecovery(t)}},n)},window.setInterval=function(t,n,...r){return i.call(this,function(){try{return t.apply(this,r)}catch(i){if(!e.prototype.isNetworkRelatedError(i?.message,i))throw i;e.prototype.attemptRecovery(i)}},n)}}setupGlobalNetworkHandling(){"serviceWorker"in navigator&&navigator.serviceWorker.addEventListener("message",e=>{"NETWORK_ERROR"===e.data?.type&&this.handleServiceWorkerError(e.data)}),window.addEventListener("online",()=>{this.handleConnectivityChange(!0)}),window.addEventListener("offline",()=>{this.handleConnectivityChange(!1)})}isNetworkRelatedError(e,t){if(!e&&!t)return!1;const i=e||t?.message||t?.code||"";return["network","fetch","connection","timeout","firebase","firestore","auth/","ERR_NETWORK","ERR_INTERNET_DISCONNECTED","Failed to fetch","NetworkError","net::","CORS"].some(e=>i.toLowerCase().includes(e.toLowerCase()))}attemptRecovery(e){window.eventBus&&window.eventBus.emit("network:error-recovery",{error:e}),window.NetworkHandler&&window.NetworkHandler.checkConnectivity(),window.ResilientFirebaseClient&&setTimeout(()=>{window.ResilientFirebaseClient.reconnectAllListeners()},2e3),window.Snackbar&&window.Snackbar({message:"ðŸ”„ Tentando reconectar...",type:"info",duration:3e3})}handleServiceWorkerError(e){"fetch"===e.operation&&this.attemptRecovery(new Error(e.message))}handleConnectivityChange(e){window.eventBus&&window.eventBus.emit("network:connectivity-change",{isOnline:e}),e&&setTimeout(()=>{this.attemptRecovery(new Error("Reconnecting after online"))},1e3)}restore(){this.originalHandlers.forEach((e,t)=>{window[t]=e}),this.isInitialized=!1}getStatus(){return{initialized:this.isInitialized,patchesCount:this.originalHandlers.size}}}const t=new e;window.NetworkPatch=t;export{t as default};

import{q as v,c as m,d as s,w as g,g as b,a as d,b as f,u as U,s as h,k as D,n as y,o as B}from"./main-xBaVxV05.js";import{p as F,r as $}from"./main-xBaVxV05.js";async function x(t){if(!t)return[];try{console.log("[DEBUG] Carregando convites para userId:",t);const e=v(m(s,"budgetInvitations"),g("invitedUserId","==",t)),o=await b(e);console.log("[DEBUG] Convites por invitedUserId:",o.docs.length);const n=window.appState?.currentUser;let i;if(n?.email){const a=v(m(s,"budgetInvitations"),g("invitedUserEmail","==",n.email)),w=await b(a);console.log("[DEBUG] Convites por email:",w.docs.length);const c=new Map;[...o.docs,...w.docs].forEach(r=>{c.set(r.id,{id:r.id,...r.data()})}),i=Array.from(c.values()).filter(r=>r.status==="pending"),console.log("[DEBUG] Total de convites únicos (pending):",i.length)}else i=o.docs.map(a=>({id:a.id,...a.data()})).filter(a=>a.status==="pending"),console.log("[DEBUG] Convites encontrados (pending):",i.length);const u=new Map,l=new Map;for(const a of i)if(a.budgetId){if(!u.has(a.budgetId)){const r=d(s,"budgets",a.budgetId),p=await f(r);u.set(a.budgetId,p.exists()?p.data():null)}const w=u.get(a.budgetId);a.budgetName=a.budgetName||w?.nome||"Orçamento";const c=w?.userId;if(c){if(!l.has(c)){const r=d(s,"users",c),p=await f(r);l.set(c,p.exists()?p.data():null)}a.ownerEmail=a.ownerEmail||l.get(c)?.email||"proprietario"}}return i}catch(e){if(console.error("Erro ao carregar convites de orçamento:",e),e.code==="permission-denied")return console.warn("Permissões insuficientes para carregar convites, retornando array vazio"),[];throw e}}async function C(t){if(!t)return[];try{const e=v(m(s,"budgetInvitations"),g("budgetId","==",t));return(await b(e)).docs.map(n=>({id:n.id,...n.data()})).filter(n=>n.status==="pending")}catch(e){if(console.error("Erro ao carregar convites enviados:",e),e.code==="permission-denied")return console.warn("Permissões insuficientes para carregar convites enviados, retornando array vazio"),[];throw e}}async function P(t){console.log("[DEBUG] Aceitando convite:",t);const e=d(s,"budgetInvitations",t);await U(e,{status:"accepted",acceptedAt:h()});const n=(await f(e)).data();if(console.log("[DEBUG] Dados do convite:",n),n&&n.budgetId){const i=window.appState?.currentUser?.uid;if(!i)throw new Error("Usuário não autenticado");console.log("[DEBUG] Adicionando usuário ao orçamento:",{budgetId:n.budgetId,currentUserId:i});const u=d(s,"budgets",n.budgetId);await U(u,{usuariosPermitidos:D(i)}),console.log("[DEBUG] Usuário adicionado ao orçamento com sucesso")}else throw console.error("[DEBUG] Dados do convite inválidos:",{hasInvitationData:!!n,hasBudgetId:!!n?.budgetId}),new Error("Dados do convite inválidos")}async function q(t){const e=d(s,"budgetInvitations",t);await U(e,{status:"declined"})}async function A(t,e){const o=d(s,"budgets",t),n=await f(o);if(!n.exists())throw new Error("Orçamento não encontrado.");const l=(n.data().usuariosPermitidos||[]).filter(a=>a!==e);await U(o,{usuariosPermitidos:l})}async function O(t,e){const o=d(s,"budgets",t);await U(o,{nome:e})}async function L(t){const e=d(s,"budgetInvitations",t);await y(e)}async function S(t){if(!t)return null;const e=d(s,"users",t),o=await f(e);return o.exists()?{uid:o.id,...o.data()}:null}async function N(t){if(!t||t.length===0)return[];const e=t.map(n=>S(n).catch(i=>(console.warn(`Falha ao buscar info para UID: ${n}`,i),null)));return(await Promise.all(e)).filter(Boolean)}async function R(t){if(!t)return null;const e=v(m(s,"users"),g("email","==",t.toLowerCase())),o=await b(e);return o.empty?null:o.docs[0].id}async function z(t,e,o){if(!t)throw new Error("Orçamento inválido");if(!o||!o.uid)throw new Error("Usuário não autenticado");if(!e)throw new Error("Informe um email");const n=e.trim().toLowerCase();if(!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(n))throw new Error("Email inválido");const i=d(s,"budgets",t),u=await f(i);if(!u.exists())throw new Error("Orçamento não encontrado");const l=u.data(),a=v(m(s,"budgetInvitations"),g("budgetId","==",t),g("invitedUserEmailLower","==",n),g("status","==","pending"));if(!(await b(a)).empty)throw new Error("Já existe um convite pendente para este email");const c=await R(n);let r="proprietario";try{if(l.userId){const E=d(s,"users",l.userId),I=await f(E);r=I.exists()&&I.data().email||r}}catch{}return{id:(await B(m(s,"budgetInvitations"),{budgetId:t,budgetName:l.nome||"Orçamento",ownerEmail:r,invitedByUserId:o.uid,invitedUserId:c||null,invitedUserEmail:e.trim(),invitedUserEmailLower:n,status:"pending",createdAt:h()})).id}}export{P as acceptBudgetInvitation,R as buscarUidPorEmail,L as cancelSentInvitation,q as declineBudgetInvitation,S as fetchUserInfo,N as fetchUsersInfo,F as getBudgetById,z as inviteUserToBudget,x as loadBudgetInvitations,C as loadSentBudgetInvitations,$ as loadUserBudgets,A as removeUserFromBudget,O as updateBudgetName};

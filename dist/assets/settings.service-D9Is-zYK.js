import{q as v,c as m,d as s,w as c,g as b,a as i,b as l,u as p,s as h,k as y,n as E,o as R}from"./main-Dp6p9NIu.js";import{p as k,r as z}from"./main-Dp6p9NIu.js";async function q(t){if(!t)return[];try{const e=v(m(s,"budgetInvitations"),c("invitedUserId","==",t),c("status","==","pending")),n=(await b(e)).docs.map(o=>({id:o.id,...o.data()})),r=new Map,u=new Map;for(const o of n)if(o.budgetId){if(!r.has(o.budgetId)){const w=i(s,"budgets",o.budgetId),d=await l(w);r.set(o.budgetId,d.exists()?d.data():null)}const f=r.get(o.budgetId);o.budgetName=o.budgetName||f?.nome||"Orçamento";const g=f?.userId;if(g){if(!u.has(g)){const w=i(s,"users",g),d=await l(w);u.set(g,d.exists()?d.data():null)}o.ownerEmail=o.ownerEmail||u.get(g)?.email||"proprietario"}}return n}catch(e){throw console.error("Erro ao carregar convites de orçamento:",e),e}}async function P(t){if(!t)return[];try{const e=v(m(s,"budgetInvitations"),c("budgetId","==",t),c("status","==","pending"));return(await b(e)).docs.map(n=>({id:n.id,...n.data()}))}catch(e){throw console.error("Erro ao carregar convites enviados:",e),e}}async function O(t){const e=i(s,"budgetInvitations",t);await p(e,{status:"accepted",acceptedAt:h()});const n=(await l(e)).data();if(n&&n.budgetId&&n.invitedUserId){const r=i(s,"budgets",n.budgetId);await p(r,{usuariosPermitidos:y(n.invitedUserId)})}}async function A(t){const e=i(s,"budgetInvitations",t);await p(e,{status:"declined"})}async function C(t,e){const a=i(s,"budgets",t),n=await l(a);if(!n.exists())throw new Error("Orçamento não encontrado.");const o=(n.data().usuariosPermitidos||[]).filter(f=>f!==e);await p(a,{usuariosPermitidos:o})}async function L(t,e){const a=i(s,"budgets",t);await p(a,{nome:e})}async function N(t){const e=i(s,"budgetInvitations",t);await E(e)}async function B(t){if(!t)return null;const e=i(s,"users",t),a=await l(e);return a.exists()?{uid:a.id,...a.data()}:null}async function F(t){if(!t||t.length===0)return[];const e=t.map(n=>B(n).catch(r=>(console.warn(`Falha ao buscar info para UID: ${n}`,r),null)));return(await Promise.all(e)).filter(Boolean)}async function S(t){if(!t)return null;const e=v(m(s,"users"),c("email","==",t.toLowerCase())),a=await b(e);return a.empty?null:a.docs[0].id}async function M(t,e,a){if(!t)throw new Error("Orçamento inválido");if(!a||!a.uid)throw new Error("Usuário não autenticado");if(!e)throw new Error("Informe um email");const n=e.trim().toLowerCase();if(!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(n))throw new Error("Email inválido");const r=i(s,"budgets",t),u=await l(r);if(!u.exists())throw new Error("Orçamento não encontrado");const o=u.data(),f=v(m(s,"budgetInvitations"),c("budgetId","==",t),c("invitedUserEmailLower","==",n),c("status","==","pending"));if(!(await b(f)).empty)throw new Error("Já existe um convite pendente para este email");const w=await S(n);let d="proprietario";try{if(o.userId){const U=i(s,"users",o.userId),I=await l(U);d=I.exists()&&I.data().email||d}}catch{}return{id:(await R(m(s,"budgetInvitations"),{budgetId:t,budgetName:o.nome||"Orçamento",ownerEmail:d,invitedByUserId:a.uid,invitedUserId:w||null,invitedUserEmail:e.trim(),invitedUserEmailLower:n,status:"pending",createdAt:h()})).id}}export{O as acceptBudgetInvitation,S as buscarUidPorEmail,N as cancelSentInvitation,A as declineBudgetInvitation,B as fetchUserInfo,F as fetchUsersInfo,k as getBudgetById,M as inviteUserToBudget,q as loadBudgetInvitations,P as loadSentBudgetInvitations,z as loadUserBudgets,C as removeUserFromBudget,L as updateBudgetName};

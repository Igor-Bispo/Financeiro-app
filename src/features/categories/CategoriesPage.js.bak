// features/categories/CategoriesPage.js
import { mountPeriodIndicator } from '../../ui/PeriodIndicator.js';
import { eventBus } from '@core/events/eventBus.js';
import { renderFAB } from '../ui/UIService.js';
import { setupCategoryButtons } from '../config/ConfigService.js';
import { loadRecorrentes as loadRecorrentesService } from '../recorrentes/service.js';
import { getSelectedPeriod } from '@core/utils/globalUtils.js';

// (helper getTransactionYearMonth n√£o √© necess√°rio aqui)

export async function render(container) {
  const root = document.createElement('div');
  root.className = 'categories-page';

  // Header com indicador de per√≠odo
  const header = document.createElement('div');
  header.className = 'tab-header mb-6';
  header.innerHTML = '<h2 class="tab-title-highlight">üìÇ Categorias</h2><div id="cat-period-indicator"></div>';

  // O indicador de per√≠odo ser√° injetado na renderiza√ß√£o principal (cat-period-indicator)

  root.appendChild(header);

  // Conte√∫do das categorias
  const content = document.createElement('div');
  content.className = 'categories-content';
  content.innerHTML = `
    <div class="u-card bg-white dark:bg-gray-900 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 p-6">
      <div class="flex justify-between items-center mb-6">
        <h3 class="text-lg font-bold text-gray-900 dark:text-white">üìÅ Gerenciar Categorias</h3>
  <button onclick="window.showAddCategoryModal()" class="u-btn u-btn--primary mobile-btn">
          ‚ûï Nova Categoria
        </button>
      </div>
      
      <div class="text-center py-8">
        <div class="text-4xl mb-4">üìÇ</div>
        <p class="text-gray-600 dark:text-gray-400">P√°gina de categorias em desenvolvimento</p>
        <p class="text-sm text-gray-500 dark:text-gray-500 mt-2">Carregando categorias...</p>
      </div>
    </div>
  `;

  // Empty state quando n√£o h√° categorias
  try {
    const wrap = document.querySelector('.content-spacing');
    const hasAny = Array.isArray(window.appState?.categories) && window.appState.categories.length > 0;
    if (wrap && !hasAny) {
      const empty = document.createElement('div');
      empty.className = 'empty-state mt-2';
      empty.innerHTML = '<div class="empty-icon">üìÅ</div><div class="empty-text">Nenhuma categoria cadastrada</div><div class="mt-2"><button class="u-btn u-btn--primary mobile-btn w-full" onclick=\"window.showAddCategoryModal && window.showAddCategoryModal()\">Criar categoria</button></div>';
      wrap.appendChild(empty);
    }
  } catch {}

  // Garantir indicador ap√≥s render
  try { mountPeriodIndicator('#cat-period-indicator'); } catch {}

  root.appendChild(content);

  // Limpar container e adicionar novo conte√∫do
  if (container) {
    container.innerHTML = '';
    container.appendChild(root);
  }

  // Carregar categorias reais
  await loadCategories();
  try { mountPeriodIndicator('#cat-period-indicator'); } catch {}
}

async function loadCategories() {
  try {
    // Aqui seria carregado categorias reais do Firebase
    console.log('Categories: Carregando dados...');
    try { await renderCategories(); } catch (e) { console.warn('renderCategories falhou:', e); }
  } catch (error) {
    console.error('Erro ao carregar categorias:', error);
  }
}

// Fun√ß√£o para renderizar categorias (movida do app.js)
export async function renderCategories() {
  // Suprimir rajadas de chamadas muito pr√≥ximas
  try {
    const now = Date.now();
    if (window.__lastCategoriesRender && (now - window.__lastCategoriesRender) < 300) {
      console.log('‚è±Ô∏è renderCategories chamado muito pr√≥ximo do anterior, pulando...');
      return;
    }
    window.__lastCategoriesRender = now;
  } catch {}
  // Garantir dados necess√°rios dispon√≠veis
  await loadTransactions();
  await loadRecorrentes();
  const content = document.getElementById('app-content');

  // Calcular estat√≠sticas das categorias
  const categorias = window.appState.categories || [];
  const totalCategorias = categorias.length;
  const categoriasComLimite = categorias.filter(cat => cat.limite > 0).length;
  const categoriasReceita = categorias.filter(cat => cat.tipo === 'receita').length;
  const categoriasDespesa = categorias.filter(cat => cat.tipo === 'despesa').length;

  // Calcular gastos por categoria no m√™s selecionado
  const { year: anoAtual, month: mesAtual } = getSelectedPeriod();

  const categoriasComGastos = window.appState.categories
    .map(cat => {
      // Filtrar transa√ß√µes da categoria no m√™s atual (incluindo recorrentes aplicadas)
      const transacoesCategoria = window.appState.transactions.filter(t => {
        // Tratar Firestore Timestamp
        let transacaoData;
        if (
          t.createdAt &&
          typeof t.createdAt === 'object' &&
          t.createdAt.seconds
        ) {
          // √â um Firestore Timestamp
          transacaoData = new Date(t.createdAt.seconds * 1000);
        } else {
          // √â uma string ou outro formato
          transacaoData = new Date(t.createdAt);
        }

        const transacaoAno = transacaoData.getFullYear();
        const transacaoMes = transacaoData.getMonth() + 1;

        return (
          t.categoriaId === cat.id &&
          t.tipo === cat.tipo && // Usar o tipo da categoria (receita ou despesa)
          transacaoAno === anoAtual &&
          transacaoMes === mesAtual
        );
      });

      // Calcular total gasto das transa√ß√µes diretas
      const totalGastoTransacoes = transacoesCategoria.reduce(
        (sum, t) => sum + parseFloat(t.valor),
        0
      );

      // Calcular total gasto das recorrentes aplicadas neste m√™s
      const recorrentesAplicadas = window.appState.recorrentes.filter(
        r => r.categoriaId === cat.id && r.ativa === true
      );

      // Verificar quais recorrentes foram aplicadas neste m√™s
      let totalGastoRecorrentes = 0;
      recorrentesAplicadas.forEach(rec => {
        const transacoesRecorrente = window.appState.transactions.filter(
          t =>
            t.recorrenteId === rec.id &&
            new Date(t.createdAt).getFullYear() === anoAtual &&
            new Date(t.createdAt).getMonth() + 1 === mesAtual
        );

        if (transacoesRecorrente.length > 0) {
          totalGastoRecorrentes += parseFloat(rec.valor);
        }
      });

      // Total geral (transa√ß√µes + recorrentes)
      const totalGasto = totalGastoTransacoes + totalGastoRecorrentes;

      // Calcular limite (se existir)
      const limite = cat.limite ? parseFloat(cat.limite) : 0;

      // Calcular saldo (para receitas: quanto falta para atingir o limite)
      const saldo =
        cat.tipo === 'receita' ? limite - totalGasto : limite - totalGasto;

      // Calcular porcentagem de uso
      const porcentagem =
        limite > 0 ? Math.min((totalGasto / limite) * 100, 100) : 0;

      // Determinar cor da barra baseada na porcentagem
      let corBarra = 'bg-green-500';
      if (porcentagem >= 90) {
        corBarra = 'bg-red-500';
      } else if (porcentagem >= 75) {
        corBarra = 'bg-yellow-500';
      } else if (porcentagem >= 50) {
        corBarra = 'bg-orange-500';
      }

      return {
        ...cat,
        totalGasto,
        totalGastoTransacoes,
        totalGastoRecorrentes,
        limite,
        saldo,
        porcentagem,
        corBarra
      };
    })
    .sort((a, b) => b.totalGasto - a.totalGasto); // Ordenar por gasto (maior para menor)

  // Calcular categorias em alerta (limite excedido)
  const categoriasEmAlerta = categoriasComGastos.filter(cat => cat.limite > 0 && cat.totalGasto > cat.limite).length;

  // Totais agregados (Despesas): Limite total, Gasto do m√™s e Saldo
  const totalLimiteDespesas = (categorias
    .filter(c => c.tipo === 'despesa' && Number(c.limite) > 0)
    .reduce((sum, c) => sum + (Number(c.limite) || 0), 0)) || 0;
  const totalGastoDespesas = (categoriasComGastos
    .filter(c => c.tipo === 'despesa')
    .reduce((sum, c) => sum + (Number(c.totalGasto) || 0), 0)) || 0;
  const saldoDespesas = totalLimiteDespesas - totalGastoDespesas;

  // Totais agregados (Receitas): Meta total, Recebido do m√™s e Saldo
  const totalMetaReceitas = (categorias
    .filter(c => c.tipo === 'receita' && Number(c.limite) > 0)
    .reduce((sum, c) => sum + (Number(c.limite) || 0), 0)) || 0;
  const totalRecebidoReceitas = (categoriasComGastos
    .filter(c => c.tipo === 'receita')
    .reduce((sum, c) => sum + (Number(c.totalGasto) || 0), 0)) || 0;
  const saldoReceitas = totalMetaReceitas - totalRecebidoReceitas;

  // Seletor de m√™s/ano
  const selYear = window.appState?.selectedYear || new Date().getFullYear();
  const selMonth = window.appState?.selectedMonth || (new Date().getMonth() + 1);

  content.innerHTML = `
    <div class="tab-container">
      <div class="tab-header">
        <h2 class="tab-title-highlight">üìÇ Categorias</h2>
        <div id="cat-period-indicator"></div>
      </div>
      <div class="tab-content">
        <div class="content-spacing">
          <!-- Indicador de per√≠odo padronizado movido para o cabe√ßalho -->
          
          <!-- ========== SE√á√ÉO 1: RESUMO ANAL√çTICO ========== -->
          <div class="mb-8">
            <div class="flex items-center gap-2 mb-4">
              <div class="w-1 h-6 bg-gradient-to-b from-purple-500 to-pink-500 rounded-full"></div>
              <h2 class="text-xl md:text-2xl font-bold text-gray-900 dark:text-gray-100">üìä Vis√£o Geral</h2>
            </div>
            
            <div class="bg-gradient-to-br from-purple-500 via-pink-500 to-indigo-600 rounded-2xl shadow-xl p-6 md:p-8 text-white mb-6">
              <!-- Header do Card -->
                <div class="flex items-center justify-between mb-6">
                <div>
                  <div class="flex items-center gap-2">
                    <h3 class="text-xl md:text-2xl font-bold">Controle de Categorias</h3>
                  </div>
                  <p class="text-sm opacity-90">${totalCategorias} categorias cadastradas</p>
                  <p class="text-xs opacity-90 mt-1">Per√≠odo: ${String(selMonth).padStart(2,'0')}/${selYear}</p>
                </div>
                <div class="text-right">
                  <div class="text-2xl md:text-3xl font-bold ${categoriasEmAlerta > 0 ? 'text-red-200' : 'text-green-200'}">
                    ${categoriasEmAlerta}
                  </div>
                  <p class="text-xs opacity-90">${categoriasEmAlerta > 0 ? '‚ö†Ô∏è Alertas' : '‚úÖ Sem Alertas'}</p>
                </div>
              </div>
              
              <!-- Grid de M√©tricas -->
              <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div class="bg-white bg-opacity-15 backdrop-blur-sm rounded-xl p-4 text-center">
                  <div class="text-2xl mb-2">üìÇ</div>
                  <div class="text-2xl md:text-3xl font-bold">${totalCategorias}</div>
                  <div class="text-sm opacity-90">Total</div>
                </div>
                
                <div class="bg-white bg-opacity-15 backdrop-blur-sm rounded-xl p-4 text-center">
                  <div class="text-2xl mb-2">üéØ</div>
                  <div class="text-2xl md:text-3xl font-bold text-blue-200">${categoriasComLimite}</div>
                  <div class="text-sm opacity-90">Com Limite</div>
                </div>
                
                <div class="bg-white bg-opacity-15 backdrop-blur-sm rounded-xl p-4 text-center">
                  <div class="text-2xl mb-2">üíö</div>
                  <div class="text-2xl md:text-3xl font-bold text-green-200">${categoriasReceita}</div>
                  <div class="text-sm opacity-90">Receitas</div>
                </div>
                
                <div class="bg-white bg-opacity-15 backdrop-blur-sm rounded-xl p-4 text-center">
                  <div class="text-2xl mb-2">üí∏</div>
                  <div class="text-2xl md:text-3xl font-bold text-red-200">${categoriasDespesa}</div>
                  <div class="text-sm opacity-90">Despesas</div>
                </div>
              </div>

              <!-- Totais agregados de Despesas (Limite, Gasto do m√™s e Saldo) -->
              <div class="grid grid-cols-1 sm:grid-cols-3 gap-4 mt-4">
                <div class="bg-white bg-opacity-15 backdrop-blur-sm rounded-xl p-4 text-center">
                  <div class="text-xs opacity-90">Limite Total (Despesas)</div>
                  <div class="text-xl md:text-2xl font-bold">R$ ${totalLimiteDespesas.toFixed(2)}</div>
                </div>
                <div class="bg-white bg-opacity-15 backdrop-blur-sm rounded-xl p-4 text-center">
                  <div class="text-xs opacity-90">Gasto do M√™s</div>
                  <div class="text-xl md:text-2xl font-bold text-red-200">R$ ${totalGastoDespesas.toFixed(2)}</div>
                </div>
                <div class="bg-white bg-opacity-15 backdrop-blur-sm rounded-xl p-4 text-center">
                  <div class="flex items-center justify-center gap-2">
                    <div class="text-xs opacity-90">Saldo</div>
                    ${saldoDespesas < 0 ? '<span class="px-2 py-0.5 text-[10px] rounded-full bg-red-500/80 text-white">negativo</span>' : ''}
                  </div>
                  <div class="text-xl md:text-2xl font-bold ${saldoDespesas < 0 ? 'text-red-200' : 'text-green-200'}">R$ ${saldoDespesas.toFixed(2)}</div>
                </div>
              </div>

              <!-- Totais agregados de Receitas (Meta, Recebido do m√™s e Saldo) -->
              <div class="grid grid-cols-1 sm:grid-cols-3 gap-4 mt-2">
                <div class="bg-white bg-opacity-15 backdrop-blur-sm rounded-xl p-4 text-center">
                  <div class="text-xs opacity-90">Meta Total (Receitas)</div>
                  <div class="text-xl md:text-2xl font-bold">R$ ${totalMetaReceitas.toFixed(2)}</div>
                </div>
                <div class="bg-white bg-opacity-15 backdrop-blur-sm rounded-xl p-4 text-center">
                  <div class="text-xs opacity-90">Recebido do M√™s</div>
                  <div class="text-xl md:text-2xl font-bold text-green-200">R$ ${totalRecebidoReceitas.toFixed(2)}</div>
                </div>
                <div class="bg-white bg-opacity-15 backdrop-blur-sm rounded-xl p-4 text-center">
                  <div class="flex items-center justify-center gap-2">
                    <div class="text-xs opacity-90">Saldo</div>
                    ${saldoReceitas < 0 ? '<span class="px-2 py-0.5 text-[10px] rounded-full bg-red-500/80 text-white">negativo</span>' : ''}
                  </div>
                  <div class="text-xl md:text-2xl font-bold ${saldoReceitas < 0 ? 'text-red-200' : 'text-green-200'}">R$ ${saldoReceitas.toFixed(2)}</div>
                </div>
              </div>
            </div>
          </div>

          <!-- ========== SE√á√ÉO 2: A√á√ïES E FILTROS ========== -->
          <div class="mb-8">
            <div class="flex items-center gap-2 mb-4">
              <div class="w-1 h-6 bg-gradient-to-b from-blue-500 to-purple-500 rounded-full"></div>
              <h2 class="text-xl md:text-2xl font-bold text-gray-900 dark:text-gray-100">üîß A√ß√µes & Filtros</h2>
            </div>
            
            <div class="u-card bg-white dark:bg-gray-900 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden">
              <!-- Header -->
              <div class="bg-gradient-to-r from-blue-50 to-purple-50 dark:from-gray-800 dark:to-gray-800 p-4 border-b border-gray-200 dark:border-gray-700">
                <div class="flex flex-wrap justify-between items-center gap-2">
                  <h3 class="text-lg font-bold text-gray-900 dark:text-gray-100">Gerenciar Categorias</h3>
                  <div class="flex gap-2 flex-wrap">
                    <button onclick="window.migrarTransacoesAntigas()" class="u-btn u-btn--outline mobile-btn btn-sm">
                      üîÑ Migrar
          </button>
                    <button onclick="window.corrigirTipoCategoria()" class="u-btn u-btn--outline mobile-btn btn-sm">
                      üîß Corrigir
          </button>
                    <button id="add-category-btn" class="u-btn u-btn--primary mobile-btn">
                      + Nova Categoria
          </button>
        </div>
      </div>
              </div>
              
          <!-- Filtro de pesquisa -->
              <div class="p-4">
            <div class="relative">
              <input 
                type="text" 
                id="category-search" 
                    placeholder="üîç Pesquisar por nome, tipo ou limite..." 
                    class="u-input w-full pl-12"
              />
                  <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                    <span class="text-gray-400 text-lg">üîç</span>
              </div>
            </div>
            <div id="category-search-results" class="mt-2 text-sm text-gray-600 dark:text-gray-400 hidden">
              <span id="category-search-count">0</span> categoria(s) encontrada(s)
                </div>
              </div>
            </div>
          </div>
          
          <!-- ========== SE√á√ÉO 3: GRID DE CATEGORIAS ========== -->
          <div class="mb-8" id="categories-grid">
            <div class="flex items-center gap-2 mb-4">
              <div class="w-1 h-6 bg-gradient-to-b from-green-500 to-teal-500 rounded-full"></div>
              <h2 class="text-xl md:text-2xl font-bold text-gray-900 dark:text-gray-100">üìã Todas as Categorias</h2>
              </div>
            
${categorias.length === 0 ? `
              <div class="u-card bg-white dark:bg-gray-900 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden">
                <div class="text-center py-12">
                  <div class="text-6xl mb-4">üìÇ</div>
                  <div class="text-xl font-semibold text-gray-800 dark:text-white mb-2">Nenhuma categoria encontrada</div>
                  <div class="text-gray-600 dark:text-gray-400 mb-4">Crie sua primeira categoria para organizar suas finan√ßas</div>
                  <button onclick="window.showAddCategoryModal()" class="u-btn u-btn--primary mobile-btn w-full">
                    üìÇ Criar Primeira Categoria
                  </button>
                  </div>
                  </div>
            ` : `
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                ${categoriasComGastos.map(cat => {
    const isReceita = cat.tipo === 'receita';
    const temLimite = cat.limite > 0;
    const excedeuLimite = temLimite && cat.totalGasto > cat.limite;

    return `
                    <div class="u-card bg-white dark:bg-gray-900 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden hover:shadow-2xl transition-all duration-300 group ${excedeuLimite ? 'ring-2 ring-red-200 dark:ring-red-800' : ''}">
                      <!-- Header da Categoria -->
                      <div class="bg-gradient-to-r ${isReceita ? 'from-green-50 to-emerald-50 dark:from-gray-800 dark:to-gray-800' : 'from-blue-50 to-indigo-50 dark:from-gray-800 dark:to-gray-800'} p-4 border-b border-gray-200 dark:border-gray-700">
                        <div class="flex items-center justify-between">
                          <div class="flex items-center gap-3">
                            <div class="w-12 h-12 rounded-full flex items-center justify-center text-2xl" style="background-color: ${cat.cor || '#4F46E5'}20; color: ${cat.cor || '#4F46E5'}">
                              ${isReceita ? 'üí∞' : 'üí∏'}
                    </div>
                            <div>
                              <h3 class="font-bold text-gray-900 dark:text-gray-100 truncate">${cat.nome}</h3>
                              <p class="text-sm text-gray-500 dark:text-gray-400">${isReceita ? 'Receita' : 'Despesa'}</p>
                            </div>
                          </div>
                          ${excedeuLimite ? '<div class="text-2xl">üö®</div>' : temLimite && cat.porcentagem >= 90 ? '<div class="text-2xl">‚ö†Ô∏è</div>' : ''}
                        </div>
                  </div>
                      
                      <!-- Conte√∫do da Categoria -->
                      <div class="p-4">
                        ${temLimite ? `
                          <div class="mb-4">
                            <div class="flex justify-between items-center mb-2">
                              <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Limite: R$ ${cat.limite.toFixed(2)}</span>
                              <span class="text-sm font-medium ${excedeuLimite ? 'text-red-600 dark:text-red-400' : cat.porcentagem >= 90 ? 'text-yellow-600 dark:text-yellow-400' : 'text-green-600 dark:text-green-400'}">
                                ${cat.porcentagem.toFixed(1)}%
                              </span>
                            </div>
                            <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                              <div class="h-2 rounded-full ${cat.corBarra} transition-all duration-300" style="width: ${cat.porcentagem}%"></div>
                            </div>
                            <div class="flex justify-between items-center mt-2 text-xs text-gray-600 dark:text-gray-400">
                              <span>R$ 0</span>
                              <span>R$ ${cat.limite.toFixed(2)}</span>
                            </div>
                          </div>
                          
                          <div class="space-y-2 mb-4">
                            <div class="flex justify-between items-center">
                              <span class="text-gray-600 dark:text-gray-400">${cat.tipo === 'receita' ? 'Receita' : 'Gasto'} do m√™s:</span>
                              <span class="font-medium ${cat.tipo === 'receita' ? 'text-green-600' : 'text-gray-900 dark:text-gray-100'}">R$ ${cat.totalGasto.toFixed(2)}</span>
                            </div>
                            ${
  cat.totalGasto > 0
    ? `
                                  <div class="text-xs text-gray-500 dark:text-gray-400 pl-2">
                                    ‚Ä¢ ${cat.tipo === 'receita' ? 'Receitas' : 'Transa√ß√µes'}: R$ ${cat.totalGastoTransacoes.toFixed(2)}
                                    ${cat.totalGastoRecorrentes > 0 ? `<br>‚Ä¢ Recorrentes: R$ ${cat.totalGastoRecorrentes.toFixed(2)}` : ''}
                                  </div>
                                `
    : ''
}
                            <div class="text-xs text-gray-500 dark:text-gray-400">
                              ${excedeuLimite ? `üö® Excedeu em R$ ${Math.abs(cat.saldo).toFixed(2)}` : `Saldo: R$ ${cat.saldo.toFixed(2)}`}
                            </div>
                          </div>
                        ` : `
                          <div class="space-y-2 mb-4">
                            <div class="flex justify-between items-center">
                              <span class="text-gray-600 dark:text-gray-400">${cat.tipo === 'receita' ? 'Receita' : 'Gasto'} do m√™s:</span>
                              <span class="font-medium ${cat.tipo === 'receita' ? 'text-green-600' : 'text-gray-900 dark:text-gray-100'}">R$ ${cat.totalGasto.toFixed(2)}</span>
                            </div>
                            ${
  cat.totalGasto > 0
    ? `
                                  <div class="text-xs text-gray-500 dark:text-gray-400 pl-2">
                                    ‚Ä¢ ${cat.tipo === 'receita' ? 'Receitas' : 'Transa√ß√µes'}: R$ ${cat.totalGastoTransacoes.toFixed(2)}
                                    ${cat.totalGastoRecorrentes > 0 ? `<br>‚Ä¢ Recorrentes: R$ ${cat.totalGastoRecorrentes.toFixed(2)}` : ''}
                                  </div>
                                `
    : ''
}
                            <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">Sem limite definido</p>
                          </div>
                        `}
                        
                        <div class="flex flex-wrap justify-end gap-1 sm:gap-2 mt-4">
                          <button onclick="editCategory('${cat.id}')" class="u-btn u-btn--outline mobile-btn">
                            <span class="icon-standard">‚úèÔ∏è</span>
                            <span class="hidden sm:inline">Editar</span>
                          </button>
                          <button onclick="window.deleteCategoryWithConfirmation('${cat.id}', '${cat.nome}')" class="u-btn u-btn--danger mobile-btn">
                            <span class="icon-standard">üóëÔ∏è</span>
                            <span class="hidden sm:inline">Excluir</span>
                          </button>
                          <button onclick="showCategoryHistory('${cat.id}')" class="u-btn u-btn--outline mobile-btn">
                            <span class="icon-standard">üìä</span>
                            <span class="hidden sm:inline">Hist√≥rico</span>
                          </button>
                        </div>
                      </div>
                    </div>
                  `;
  }).join('')}
              </div>
            `}
          </div>
        </div>
      </div>
    </div>
  `;

  // Empty state quando n√£o h√° categorias
  try {
    const wrap = document.querySelector('.content-spacing');
    if (wrap && totalCategorias === 0) {
      const empty = document.createElement('div');
      empty.className = 'empty-state mt-2';
      empty.innerHTML = '<div class="empty-icon">üìÅ</div><div class="empty-text">Nenhuma categoria cadastrada</div><div class="mt-2"><button class="u-btn u-btn--primary mobile-btn w-full" onclick="window.showAddCategoryModal && window.showAddCategoryModal()">Criar categoria</button></div>';
      wrap.appendChild(empty);
    }
  } catch {}

  // Configurar bot√µes da tela de categorias
  setTimeout(() => {
    try { setupCategoryButtons(); } catch (e) { console.warn('setupCategoryButtons falhou:', e); }
    // Bind seguro para o bot√£o de adicionar
    try {
      const addBtn = document.getElementById('add-category-btn');
      if (addBtn) addBtn.onclick = () => window.showAddCategoryModal?.();
    } catch {}
  }, 100);

  // Configurar filtro de pesquisa
  setupCategorySearch();

  // Removido indicador interativo de per√≠odo nesta aba; o controle existe apenas no Dashboard.

  // Re-render quando o per√≠odo for alterado em outras abas
  try {
    if (!window.__catPeriodListenerBound) {
      window.__catPeriodListenerBound = true;
      eventBus.on('period:changed', (p) => queueMicrotask(() => {
        const hh = (window.location.hash || '').split('?')[0];
        if (hh === '#/categories') {
          // Garantir hash atualizado quando mudan√ßa vier de outra aba
          try {
            const y = (p && p.year) || getSelectedPeriod().year;
            const m = (p && p.month) || getSelectedPeriod().month;
            const ym = `${y}-${String(m).padStart(2, '0')}`;
            const url = new URL(window.location.href);
            url.hash = `${hh}?ym=${ym}`;
            history.replaceState(null, '', url.toString());
          } catch {}
          renderCategories();
        }
      }));
    }
  } catch {}

  renderFAB();
  // Remover renderBottomNav daqui - deve ser chamado apenas pelo router
  // renderBottomNav('/categories');

  // Fallbacks globais para a√ß√µes da p√°gina de categorias (evitar undefined)
  try {
    if (typeof window.deleteCategoryWithConfirmation !== 'function') {
      window.deleteCategoryWithConfirmation = async function(categoryId, categoryName = 'categoria') {
        try {
          const name = categoryName || 'categoria';
          const ok = confirm(`Excluir "${name}"? Esta a√ß√£o n√£o pode ser desfeita.`);
          if (!ok) return;
          const svc = await import('./service.js');
          await svc.deleteCategory(categoryId);
          try { window.Snackbar?.show?.('Categoria exclu√≠da', 'success'); } catch {}
          try { await renderCategories(); } catch {}
        } catch (e) {
          console.error('Falha ao excluir categoria:', e);
          try { window.Snackbar?.show?.('Erro ao excluir categoria', 'error'); } catch {}
        }
      };
    }

    if (typeof window.editCategory !== 'function') {
      window.editCategory = function(categoryId) {
        try {
          const cat = window.appState?.categories?.find(c => c.id === categoryId);
          if (cat) window.showAddCategoryModal?.(cat);
        } catch (e) { console.warn('editCategory (fallback) falhou:', e); }
      };
    }

    if (typeof window.showCategoryHistory !== 'function') {
      window.showCategoryHistory = function(categoryId) {
        try {
          // Hist√≥rico filtrado pelo per√≠odo atual, com parsing robusto de datas
          const { year, month } = getSelectedPeriod();
          const cat = window.appState?.categories?.find(c => c.id === categoryId);
          const title = `Hist√≥rico - ${cat?.nome || categoryId}`;

          const parseDate = (val) => {
            if (!val) return null;
            if (typeof val?.toDate === 'function') return val.toDate();
            if (typeof val === 'object' && val?.seconds) return new Date(val.seconds * 1000);
            const d = new Date(val);
            return isNaN(d.getTime()) ? null : d;
          };

          const fmtCurrency = (n) => {
            const v = Number.parseFloat(n || 0) || 0;
            return v.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
          };

          const all = (window.appState?.transactions || []).filter(t => t.categoriaId === categoryId);
          const txs = all.filter(t => {
            const d = parseDate(t.createdAt);
            if (!d) return false;
            return d.getFullYear() === year && (d.getMonth() + 1) === month;
          });

          const items = txs
            .sort((a, b) => {
              const da = parseDate(a.createdAt) || 0;
              const db = parseDate(b.createdAt) || 0;
              return db - da;
            })
            .slice(0, 100)
            .map(t => {
              const d = parseDate(t.createdAt);
              const dateTxt = d ? d.toLocaleDateString('pt-BR') : '-';
              const sign = t.tipo === 'receita' ? '+' : '-';
              const desc = (t.descricao && String(t.descricao).trim()) || '(Sem descri√ß√£o)';
              const color = t.tipo === 'receita' ? 'text-green-600' : 'text-red-600';
              return `
                <div class=\"flex justify-between items-center py-2 border-b border-gray-200 dark:border-gray-700\">
                  <div class=\"min-w-0\">
                    <div class=\"font-medium text-gray-900 dark:text-gray-100 truncate\">${desc}</div>
                    <div class=\"text-xs text-gray-500 dark:text-gray-400\">${dateTxt}</div>
                  </div>
                  <div class=\"text-right font-medium ${color}\">${sign} R$ ${fmtCurrency(t.valor)}</div>
                </div>`;
            })
            .join('') || '<div class=\"text-sm text-gray-500\">Sem transa√ß√µes neste per√≠odo</div>';

          const html = `<div class=\"max-h-96 overflow-auto\">${items}</div>`;
          eventBus.emit('modal:show', { title, content: html });
        } catch (e) { console.warn('showCategoryHistory (fallback) falhou:', e); }
      };
    }

    if (typeof window.migrarTransacoesAntigas !== 'function') {
      window.migrarTransacoesAntigas = function() {
        // Placeholder n√£o destrutivo
        try { window.Snackbar?.show?.('Nada para migrar', 'info'); } catch {}
      };
    }

    if (typeof window.corrigirTipoCategoria !== 'function') {
      window.corrigirTipoCategoria = function() {
        // Placeholder simples
        try { window.Snackbar?.show?.('Tipos de categorias verificados', 'info'); } catch {}
      };
    }
  } catch {}
}

// Loader local de transa√ß√µes: usa servi√ßo legado se existir, sen√£o mant√©m estado atual
async function loadTransactions() {
  try {
    if (typeof window.loadTransactions === 'function') {
      await window.loadTransactions();
      return;
    }
    // Fallback: nada a fazer, assumimos que appState j√° tem transa√ß√µes
  } catch (e) {
    console.warn('loadTransactions fallback falhou:', e);
  }
}

// Loader local de recorrentes usando o servi√ßo da feature
async function loadRecorrentes() {
  try {
    await loadRecorrentesService();
  } catch (e) {
    console.warn('loadRecorrentes falhou:', e);
  }
}

// Compatibilidade com sistema legado
export default function() {
  const container = document.getElementById('app-content');
  return render(container);
}

// Fallback seguro para pesquisa de categorias (usa global se existir)
function setupCategorySearch() {
  try {
    if (typeof window.setupCategorySearch === 'function') {
      window.setupCategorySearch();
      return;
    }

    // Helpers locais de normaliza√ß√£o e fuzzy
    const __norm = (txt) => (txt ?? '')
      .toString()
      .toLowerCase()
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '')
      .trim();
    const __lev = (a, b) => {
      if (a === b) return 0;
      const la = a.length, lb = b.length;
      if (la === 0) return lb;
      if (lb === 0) return la;
      if (Math.abs(la - lb) > 1) return 2;
      const dp = Array(la + 1).fill(0).map(() => Array(lb + 1).fill(0));
      for (let i = 0; i <= la; i++) dp[i][0] = i;
      for (let j = 0; j <= lb; j++) dp[0][j] = j;
      for (let i = 1; i <= la; i++) {
        for (let j = 1; j <= lb; j++) {
          const cost = a[i - 1] === b[j - 1] ? 0 : 1;
          dp[i][j] = Math.min(
            dp[i - 1][j] + 1,
            dp[i][j - 1] + 1,
            dp[i - 1][j - 1] + cost
          );
          if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {
            dp[i][j] = Math.min(dp[i][j], dp[i - 2][j - 2] + 1);
          }
        }
      }
      return dp[la][lb];
    };
    const __approxIncludes = (haystack, needle) => {
      const h = __norm(haystack);
      const n = __norm(needle);
      if (!n) return true;
      if (h.includes(n)) return true;
      const parts = h.split(/\s+/).filter(Boolean);
      for (const p of parts) {
        if (Math.abs(p.length - n.length) <= 1 && __lev(p, n) <= 1) return true;
      }
      return (Math.abs(h.length - n.length) <= 1 && __lev(h, n) <= 1);
    };

    const input = document.getElementById('category-search');
    const resultInfo = document.getElementById('category-search-results');
    const counter = document.getElementById('category-search-count');
    const grid = document.getElementById('categories-grid');
    if (!input || !grid) return;

    if (input.dataset.bound === '1') return;
    input.dataset.bound = '1';

    input.addEventListener('input', () => {
      const q = __norm(input.value);
      if (!q) {
        resultInfo && resultInfo.classList.add('hidden');
        try { grid.innerHTML = renderAllCategories(); } catch { grid.innerHTML = ''; }
        return;
      }

      const filtered = (window.appState.categories || []).filter(cat => {
        const nome = cat.nome || '';
        const tipo = cat.tipo || '';
        const limite = String(cat.limite ?? '');
        return __approxIncludes(nome, q) || __approxIncludes(tipo, q) || limite.includes(q);
      });
      if (counter) counter.textContent = String(filtered.length);
      resultInfo && resultInfo.classList.remove('hidden');
      try { grid.innerHTML = renderFilteredCategories(filtered); } catch { grid.innerHTML = ''; }
    });

    input.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        input.value = '';
        input.dispatchEvent(new Event('input'));
      }
    });
  } catch (e) {
    console.warn('setupCategorySearch fallback falhou:', e);
  }
}

// Fun√ß√£o para renderizar todas as categorias
export function renderAllCategories() {
  const { year: anoAtual, month: mesAtual } = getSelectedPeriod();

  const categoriasComGastos = window.appState.categories
    .map(cat => {
      // Filtrar transa√ß√µes da categoria no m√™s atual (incluindo recorrentes aplicadas)
      const transacoesCategoria = window.appState.transactions.filter(t => {
        // Tratar Firestore Timestamp
        let transacaoData;
        if (
          t.createdAt &&
          typeof t.createdAt === 'object' &&
          t.createdAt.seconds
        ) {
          // √â um Firestore Timestamp
          transacaoData = new Date(t.createdAt.seconds * 1000);
        } else {
          // √â uma string ou outro formato
          transacaoData = new Date(t.createdAt);
        }

        const transacaoAno = transacaoData.getFullYear();
        const transacaoMes = transacaoData.getMonth() + 1;

        return (
          t.categoriaId === cat.id &&
          t.tipo === cat.tipo && // Usar o tipo da categoria (receita ou despesa)
          transacaoAno === anoAtual &&
          transacaoMes === mesAtual
        );
      });

      // Calcular total gasto das transa√ß√µes diretas
      const totalGastoTransacoes = transacoesCategoria.reduce(
        (sum, t) => sum + parseFloat(t.valor),
        0
      );

      // Calcular total gasto das recorrentes aplicadas neste m√™s
      const recorrentesAplicadas = window.appState.recorrentes.filter(
        r => r.categoriaId === cat.id && r.ativa === true
      );

      // Verificar quais recorrentes foram aplicadas neste m√™s
      let totalGastoRecorrentes = 0;
      recorrentesAplicadas.forEach(rec => {
        const transacoesRecorrente = window.appState.transactions.filter(
          t =>
            t.recorrenteId === rec.id &&
            new Date(t.createdAt).getFullYear() === anoAtual &&
            new Date(t.createdAt).getMonth() + 1 === mesAtual
        );

        if (transacoesRecorrente.length > 0) {
          totalGastoRecorrentes += parseFloat(rec.valor);
        }
      });

      // Total geral (transa√ß√µes + recorrentes)
      const totalGasto = totalGastoTransacoes + totalGastoRecorrentes;

      // Calcular limite (se existir)
      const limite = cat.limite ? parseFloat(cat.limite) : 0;

      // Calcular saldo (para receitas: quanto falta para atingir o limite)
      const saldo =
        cat.tipo === 'receita' ? limite - totalGasto : limite - totalGasto;

      // Calcular porcentagem de uso
      const porcentagem =
        limite > 0 ? Math.min((totalGasto / limite) * 100, 100) : 0;

      // Determinar cor da barra baseada na porcentagem
      let corBarra = 'bg-green-500';
      if (porcentagem >= 90) {
        corBarra = 'bg-red-500';
      } else if (porcentagem >= 75) {
        corBarra = 'bg-yellow-500';
      } else if (porcentagem >= 50) {
        corBarra = 'bg-orange-500';
      }

      return {
        ...cat,
        totalGasto,
        totalGastoTransacoes,
        totalGastoRecorrentes,
        limite,
        saldo,
        porcentagem,
        corBarra
      };
    })
    .sort((a, b) => b.totalGasto - a.totalGasto); // Ordenar por gasto (maior para menor)

  return categoriasComGastos.map(cat => `
    <div class="card-standard">
      <div class="flex items-center space-x-3 mb-3">
        <div class="w-4 h-4 rounded-full" style="background-color: ${cat.cor || '#4F46E5'}"></div>
        <span class="list-item-title">${cat.nome}</span>
      </div>
      <p class="list-item-subtitle">Tipo: ${cat.tipo}</p>
      
      ${
  cat.limite > 0
    ? `
            <div class="mt-3 space-y-2">
              <div class="flex justify-between text-xs md:text-sm">
                <span class="text-gray-600 dark:text-gray-400">Limite:</span>
                <span class="font-medium text-gray-900 dark:text-gray-100">R$ ${cat.limite.toFixed(2)}</span>
              </div>
              <div class="flex justify-between text-xs md:text-sm">
                <span class="text-gray-600 dark:text-gray-400">${cat.tipo === 'receita' ? 'Receita' : 'Gasto'}:</span>
                <span class="font-medium ${cat.tipo === 'receita' ? 'text-green-600' : cat.totalGasto > cat.limite ? 'text-red-600' : 'text-gray-900 dark:text-gray-100'}">R$ ${cat.totalGasto.toFixed(2)}</span>
              </div>
              ${
  cat.totalGasto > 0
    ? `
                    <div class="text-xs text-gray-500 dark:text-gray-400 pl-2">
                      ‚Ä¢ Transa√ß√µes: R$ ${cat.totalGastoTransacoes.toFixed(2)}
                      ${cat.totalGastoRecorrentes > 0 ? `<br>‚Ä¢ Recorrentes: R$ ${cat.totalGastoRecorrentes.toFixed(2)}` : ''}
                    </div>
                  `
    : ''
}
              <div class="flex justify-between text-xs md:text-sm">
                <span class="text-gray-600 dark:text-gray-400">${cat.tipo === 'receita' ? 'Falta para meta' : 'Saldo'}:</span>
                <span class="font-medium ${cat.tipo === 'receita' ? (cat.saldo <= 0 ? 'text-green-600' : cat.saldo < cat.limite * 0.25 ? 'text-yellow-600' : 'text-red-600') : cat.saldo < 0 ? 'text-red-600' : cat.saldo < cat.limite * 0.25 ? 'text-yellow-600' : 'text-green-600'}">R$ ${cat.saldo.toFixed(2)}</span>
              </div>
              
              <!-- Barra de Progresso -->
              <div class="mt-2">
                <div class="flex justify-between text-xs text-gray-500 dark:text-gray-400 mb-1">
                  <span>${cat.porcentagem.toFixed(1)}% ${cat.tipo === 'receita' ? 'atingido' : 'usado'}</span>
                  <span>${cat.porcentagem >= 100 ? (cat.tipo === 'receita' ? 'Meta atingida!' : 'Limite excedido!') : ''}</span>
                </div>
                <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                  <div class="${cat.corBarra} h-2 rounded-full transition-all duration-300" style="width: ${Math.min(cat.porcentagem, 100)}%"></div>
                </div>
              </div>
            </div>
          `
    : `
            <div class="mt-3">
              <div class="flex justify-between text-xs md:text-sm">
                <span class="text-gray-600 dark:text-gray-400">${cat.tipo === 'receita' ? 'Receita' : 'Gasto'} do m√™s:</span>
                <span class="font-medium ${cat.tipo === 'receita' ? 'text-green-600' : 'text-gray-900 dark:text-gray-100'}">R$ ${cat.totalGasto.toFixed(2)}</span>
              </div>
              ${
  cat.totalGasto > 0
    ? `
                    <div class="text-xs text-gray-500 dark:text-gray-400 pl-2">
                      ‚Ä¢ ${cat.tipo === 'receita' ? 'Receitas' : 'Transa√ß√µes'}: R$ ${cat.totalGastoTransacoes.toFixed(2)}
                      ${cat.totalGastoRecorrentes > 0 ? `<br>‚Ä¢ Recorrentes: R$ ${cat.totalGastoRecorrentes.toFixed(2)}` : ''}
                    </div>
                  `
    : ''
}
              <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">Sem limite definido</p>
            </div>
          `
}
      
      <div class="flex flex-wrap justify-end gap-1 sm:gap-2 mt-4">
        <button onclick="editCategory('${cat.id}')" class="u-btn u-btn--outline mobile-btn">
          <span class="icon-standard">‚úèÔ∏è</span>
          <span class="hidden sm:inline">Editar</span>
        </button>
  <button onclick="window.deleteCategoryWithConfirmation('${cat.id}', '${cat.nome}')" class="u-btn u-btn--danger mobile-btn">
          <span class="icon-standard">üóëÔ∏è</span>
          <span class="hidden sm:inline">Excluir</span>
        </button>
  <button onclick="showCategoryHistory('${cat.id}')" class="u-btn u-btn--outline mobile-btn">
          <span class="icon-standard">üìä</span>
          <span class="hidden sm:inline">Hist√≥rico</span>
        </button>
      </div>
    </div>
  `).join('');
}

// Fun√ß√£o para renderizar categorias filtradas
export function renderFilteredCategories(filteredCategories) {
  if (!filteredCategories.length) {
    return `
      <div class="col-span-full text-center py-8">
        <div class="text-4xl mb-4">üîç</div>
        <div class="text-lg font-semibold text-gray-800 dark:text-white mb-2">Nenhuma categoria encontrada</div>
        <div class="text-gray-600 dark:text-gray-400">Tente usar termos diferentes na pesquisa</div>
      </div>
    `;
  }

  return filteredCategories.map(cat => `
    <div class="card-standard">
      <div class="flex items-center space-x-3 mb-3">
        <div class="w-4 h-4 rounded-full" style="background-color: ${cat.cor || '#4F46E5'}"></div>
        <span class="list-item-title">${cat.nome}</span>
      </div>
      <p class="list-item-subtitle">Tipo: ${cat.tipo}</p>
      ${cat.limite ? `<p class="text-xs text-gray-500 dark:text-gray-400">Limite: R$ ${cat.limite.toFixed(2)}</p>` : '<p class="text-xs text-gray-500 dark:text-gray-400">Sem limite definido</p>'}
      
      <div class="flex flex-wrap justify-end gap-1 sm:gap-2 mt-4">
        <button onclick="editCategory('${cat.id}')" class="u-btn u-btn--outline mobile-btn">
          <span class="icon-standard">‚úèÔ∏è</span>
          <span class="hidden sm:inline">Editar</span>
        </button>
  <button onclick="window.deleteCategoryWithConfirmation('${cat.id}', '${cat.nome}')" class="u-btn u-btn--danger mobile-btn">
          <span class="icon-standard">üóëÔ∏è</span>
          <span class="hidden sm:inline">Excluir</span>
        </button>
  <button onclick="showCategoryHistory('${cat.id}')" class="u-btn u-btn--outline mobile-btn">
          <span class="icon-standard">üìä</span>
          <span class="hidden sm:inline">Hist√≥rico</span>
        </button>
      </div>
    </div>
  `).join('');
}

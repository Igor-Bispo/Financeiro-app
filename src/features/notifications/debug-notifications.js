// debug-notifications.js - Script para debugar o sistema de notifica√ß√µes

import { eventBus as _eventBus } from '@core/events/eventBus.js';

export async function debugNotificationSystem() {
  console.log('üîç [DebugNotifications] Iniciando debug do sistema de notifica√ß√µes...');

  try {
    // 1. Verificar estado atual
    const currentUser = window.appState?.currentUser;
    const currentBudget = window.appState?.currentBudget;
    const notifications = window.appState?.notifications;

    console.log('üë§ [DebugNotifications] Usu√°rio atual:', currentUser?.uid);
    console.log('üí∞ [DebugNotifications] Or√ßamento atual:', currentBudget?.id, currentBudget?.nome);
    console.log('üìß [DebugNotifications] Notifica√ß√µes atuais:', notifications?.length || 0);

    if (!currentUser?.uid) {
      console.error('‚ùå [DebugNotifications] Usu√°rio n√£o logado!');
      return;
    }

    if (!currentBudget?.id) {
      console.error('‚ùå [DebugNotifications] Nenhum or√ßamento selecionado!');
      return;
    }

    // 2. Verificar dados do or√ßamento
    const { getById: getBudgetById } = await import('@data/repositories/budgetsRepo.js');
    const budgetData = await getBudgetById(currentBudget.id);

    console.log('üìä [DebugNotifications] Dados do or√ßamento:', {
      id: budgetData?.id,
      nome: budgetData?.nome,
      criadoPor: budgetData?.criadoPor,
      usuariosPermitidos: budgetData?.usuariosPermitidos
    });

    // 3. Testar cria√ß√£o de notifica√ß√£o
    console.log('üß™ [DebugNotifications] Testando cria√ß√£o de notifica√ß√£o...');

    const { create: createNotification } = await import('@data/repositories/notificationsRepo.js');
    const { serverTimestamp } = await import('firebase/firestore');

    // Enviar para o dono do or√ßamento para teste
    const ownerUid = budgetData?.criadoPor || budgetData?.userId;

    const testNotification = {
      type: 'test_notification',
      budgetId: currentBudget.id,
      budgetName: currentBudget.nome || 'Or√ßamento',
      senderUid: currentUser.uid,
      senderName: currentUser.displayName || currentUser.email || 'Usu√°rio',
      message: `Notifica√ß√£o de teste para debug - Enviada para dono: ${ownerUid}`,
      createdAt: serverTimestamp(),
      read: false,
      recipientUid: ownerUid, // Enviar para o dono do or√ßamento
    };

    console.log('üéØ [DebugNotifications] Enviando notifica√ß√£o para dono:', ownerUid);

    const notificationId = await createNotification(testNotification);
    console.log('‚úÖ [DebugNotifications] Notifica√ß√£o de teste criada com ID:', notificationId);

    // 4. Aguardar um pouco e verificar se chegou
    setTimeout(async () => {
      console.log('‚è≥ [DebugNotifications] Verificando se a notifica√ß√£o chegou...');

      const { listByRecipient } = await import('@data/repositories/notificationsRepo.js');
      const userNotifications = await listByRecipient(currentUser.uid);

      console.log('üìß [DebugNotifications] Notifica√ß√µes do usu√°rio:', userNotifications.length);
      console.log('üìß [DebugNotifications] Detalhes:', userNotifications.map(n => ({
        id: n.id,
        type: n.type,
        message: n.message,
        read: n.read,
        createdAt: n.createdAt
      })));

      // 5. Verificar se o listener est√° funcionando
      console.log('üëÇ [DebugNotifications] Verificando listener...');

      const { listenByRecipient } = await import('@data/repositories/notificationsRepo.js');
      const unsubscribe = listenByRecipient(currentUser.uid, (items) => {
        console.log('üì° [DebugNotifications] Listener recebeu dados:', items.length, 'itens');
        console.log('üì° [DebugNotifications] Detalhes do listener:', items.map(n => ({
          id: n.id,
          type: n.type,
          read: n.read
        })));

        // Parar o listener ap√≥s receber os dados
        unsubscribe();
      });

    }, 2000);

  } catch (error) {
    console.error('‚ùå [DebugNotifications] Erro durante debug:', error);
  }
}

// Fun√ß√£o para testar envio para usu√°rios compartilhados
export async function debugSharedNotificationTest() {
  console.log('üîç [DebugSharedNotifications] Testando envio para usu√°rios compartilhados...');

  try {
    const currentUser = window.appState?.currentUser;
    const currentBudget = window.appState?.currentBudget;

    if (!currentUser?.uid || !currentBudget?.id) {
      console.error('‚ùå [DebugSharedNotifications] Dados insuficientes para teste');
      return;
    }

    // Verificar dados do or√ßamento
    const { getById: getBudgetById } = await import('@data/repositories/budgetsRepo.js');
    const budgetData = await getBudgetById(currentBudget.id);

    console.log('üìä [DebugSharedNotifications] Dados do or√ßamento:', {
      id: budgetData?.id,
      nome: budgetData?.nome,
      criadoPor: budgetData?.criadoPor,
      usuariosPermitidos: budgetData?.usuariosPermitidos
    });

    // Importar e executar a fun√ß√£o de teste
    const { sendTestNotificationToShared } = await import('./NotificationService.js');

    console.log('üì§ [DebugSharedNotifications] Enviando notifica√ß√£o de teste...');
    await sendTestNotificationToShared(currentBudget.id, currentUser.uid);

    console.log('‚úÖ [DebugSharedNotifications] Teste de envio conclu√≠do');
    console.log('‚ÑπÔ∏è [DebugSharedNotifications] Nota: As notifica√ß√µes s√≥ aparecer√£o para os usu√°rios que est√£o logados!');

  } catch (error) {
    console.error('‚ùå [DebugSharedNotifications] Erro durante teste:', error);
  }
}

// Fun√ß√£o para verificar notifica√ß√µes de outros usu√°rios
export async function debugCheckOtherUserNotifications() {
  console.log('üîç [DebugOtherUser] Verificando notifica√ß√µes de outros usu√°rios...');

  try {
    const currentBudget = window.appState?.currentBudget;

    if (!currentBudget?.id) {
      console.error('‚ùå [DebugOtherUser] Nenhum or√ßamento selecionado');
      return;
    }

    // Verificar dados do or√ßamento
    const { getById: getBudgetById } = await import('@data/repositories/budgetsRepo.js');
    const budgetData = await getBudgetById(currentBudget.id);

    const { listByRecipient } = await import('@data/repositories/notificationsRepo.js');

    // Verificar notifica√ß√µes do dono
    const ownerUid = budgetData?.criadoPor || budgetData?.userId;
    if (ownerUid) {
      console.log('üëë [DebugOtherUser] Verificando notifica√ß√µes do dono:', ownerUid);
      const ownerNotifications = await listByRecipient(ownerUid);
      console.log('üìß [DebugOtherUser] Notifica√ß√µes do dono:', ownerNotifications.length);
      console.log('üìß [DebugOtherUser] Detalhes do dono:', ownerNotifications.map(n => ({
        id: n.id,
        type: n.type,
        message: n.message,
        read: n.read,
        senderUid: n.senderUid
      })));
    }

    // Verificar notifica√ß√µes dos usu√°rios compartilhados
    const sharedUsers = budgetData?.usuariosPermitidos || [];
    for (const userId of sharedUsers) {
      if (userId && userId !== ownerUid) {
        console.log('üë• [DebugOtherUser] Verificando notifica√ß√µes do usu√°rio:', userId);
        const userNotifications = await listByRecipient(userId);
        console.log('üìß [DebugOtherUser] Notifica√ß√µes do usu√°rio', userId, ':', userNotifications.length);
        console.log('üìß [DebugOtherUser] Detalhes do usu√°rio', userId, ':', userNotifications.map(n => ({
          id: n.id,
          type: n.type,
          message: n.message,
          read: n.read,
          senderUid: n.senderUid
        })));
      }
    }

  } catch (error) {
    console.error('‚ùå [DebugOtherUser] Erro durante verifica√ß√£o:', error);
  }
}

// Fun√ß√£o para testar o modal manualmente
export async function debugTestModal() {
  console.log('üß™ [DebugTestModal] Testando modal manualmente...');

  try {
    // Verificar se o modal existe no DOM
    let modal = document.getElementById('notification-modal');
    console.log('üîç [DebugTestModal] Modal no DOM:', !!modal);

    // Sempre tentar criar/recriar o modal
    console.log('üèóÔ∏è [DebugTestModal] Importando e criando modal...');
    const { getNotificationModal } = await import('./ui/NotificationModal.js');
    const modalInstance = getNotificationModal();
    console.log('üì± [DebugTestModal] Inst√¢ncia do modal obtida:', !!modalInstance);

    // Verificar novamente se o modal foi criado no DOM
    modal = document.getElementById('notification-modal');
    console.log('üîç [DebugTestModal] Modal no DOM ap√≥s cria√ß√£o:', !!modal);

    if (modal) {
      // Criar notifica√ß√£o de teste
      const testNotification = {
        id: 'test-modal-' + Date.now(),
        type: 'test_notification',
        message: 'Teste manual do modal de notifica√ß√£o!',
        details: 'Este √© um teste para verificar se o modal est√° funcionando.',
        read: false,
        createdAt: { toDate: () => new Date() }
      };

      console.log('üì± [DebugTestModal] Exibindo modal com notifica√ß√£o de teste...');
      modalInstance.show(testNotification);
      console.log('‚úÖ [DebugTestModal] Modal de teste exibido com sucesso');

      // Aguardar um pouco e verificar se o modal est√° vis√≠vel
      setTimeout(() => {
        const modalAfterShow = document.getElementById('notification-modal');
        if (modalAfterShow) {
          const computedStyle = window.getComputedStyle(modalAfterShow);
          console.log('üîç [DebugTestModal] Modal ap√≥s show():', {
            display: computedStyle.display,
            opacity: computedStyle.opacity,
            visibility: computedStyle.visibility,
            zIndex: computedStyle.zIndex,
            position: computedStyle.position
          });

          // Verificar se est√° realmente vis√≠vel
          const rect = modalAfterShow.getBoundingClientRect();
          console.log('üìê [DebugTestModal] Modal dimensions:', {
            width: rect.width,
            height: rect.height,
            top: rect.top,
            left: rect.left,
            visible: rect.width > 0 && rect.height > 0
          });
        }
      }, 100);

    } else {
      console.error('‚ùå [DebugTestModal] Modal ainda n√£o foi criado no DOM!');

      // Tentar for√ßar cria√ß√£o do HTML manualmente
      console.log('üîß [DebugTestModal] Tentando for√ßar cria√ß√£o do HTML...');
      modalInstance.createModalHTML();

      // Verificar mais uma vez
      modal = document.getElementById('notification-modal');
      console.log('üîç [DebugTestModal] Modal ap√≥s for√ßar cria√ß√£o:', !!modal);

      if (modal) {
        const testNotification = {
          id: 'test-modal-' + Date.now(),
          type: 'test_notification',
          message: 'Teste manual do modal de notifica√ß√£o (for√ßado)!',
          details: 'Modal foi criado manualmente para teste.',
          read: false,
          createdAt: { toDate: () => new Date() }
        };

        modalInstance.show(testNotification);
        console.log('‚úÖ [DebugTestModal] Modal exibido ap√≥s cria√ß√£o for√ßada');
      }
    }

  } catch (error) {
    console.error('‚ùå [DebugTestModal] Erro durante teste:', error);
    console.error('‚ùå [DebugTestModal] Stack trace:', error.stack);
  }
}

// Fun√ß√£o para verificar o estado do sistema
export function debugNotificationState() {
  console.log('üîç [DebugNotificationState] Estado atual do sistema:');

  const state = {
    currentUser: window.appState?.currentUser?.uid,
    currentBudget: window.appState?.currentBudget?.id,
    notifications: window.appState?.notifications?.length || 0,
    notificationModal: !!document.getElementById('notification-modal'),
    eventBus: !!window.eventBus,
    snackbar: !!window.Snackbar
  };

  console.log('üìä [DebugNotificationState] Estado:', state);

  // Verificar listeners ativos
  const listeners = {
    notificationsUpdated: window.__notifUpdatesListenerBound,
    notificationModal: window.__notificationModalListenerBound
  };

  console.log('üëÇ [DebugNotificationState] Listeners ativos:', listeners);

  // Verificar se h√° notifica√ß√µes n√£o lidas
  const notifications = window.appState?.notifications || [];
  const unreadCount = notifications.filter(n => !n.read && !n.archivedAt).length;
  console.log('üìß [DebugNotificationState] Notifica√ß√µes n√£o lidas:', unreadCount);

  // Verificar √∫ltima notifica√ß√£o
  if (notifications.length > 0) {
    const lastNotification = notifications[0];
    console.log('üìß [DebugNotificationState] √öltima notifica√ß√£o:', {
      id: lastNotification.id,
      type: lastNotification.type,
      read: lastNotification.read,
      createdAt: lastNotification.createdAt
    });
  }

  return state;
}

// Fun√ß√£o para testar cria√ß√£o manual de notifica√ß√£o
export async function debugCreateTestNotification() {
  console.log('üß™ [DebugCreateTest] Criando notifica√ß√£o de teste...');

  try {
    const currentUser = window.appState?.currentUser;
    const currentBudget = window.appState?.currentBudget;

    if (!currentUser?.uid || !currentBudget?.id) {
      console.error('‚ùå [DebugCreateTest] Usu√°rio ou or√ßamento n√£o encontrado');
      return;
    }

    const { create: createNotification } = await import('@data/repositories/notificationsRepo.js');
    const { serverTimestamp } = await import('firebase/firestore');

    const testNotification = {
      type: 'test_notification',
      budgetId: currentBudget.id,
      budgetName: currentBudget.nome || 'Or√ßamento',
      senderUid: currentUser.uid,
      senderName: currentUser.displayName || currentUser.email || 'Usu√°rio',
      message: `Teste manual criado em ${new Date().toLocaleString('pt-BR')}`,
      details: 'Esta √© uma notifica√ß√£o de teste criada manualmente para verificar se o sistema est√° funcionando.',
      createdAt: serverTimestamp(),
      read: false,
      recipientUid: currentUser.uid, // Enviar para o pr√≥prio usu√°rio
    };

    console.log('üìù [DebugCreateTest] Dados da notifica√ß√£o:', testNotification);

    const notificationId = await createNotification(testNotification);
    console.log('‚úÖ [DebugCreateTest] Notifica√ß√£o de teste criada com ID:', notificationId);

    // Aguardar um pouco e verificar se chegou
    setTimeout(() => {
      const notifications = window.appState?.notifications || [];
      const newNotification = notifications.find(n => n.id === notificationId);
      if (newNotification) {
        console.log('‚úÖ [DebugCreateTest] Notifica√ß√£o encontrada no estado local:', newNotification);
      } else {
        console.warn('‚ö†Ô∏è [DebugCreateTest] Notifica√ß√£o n√£o encontrada no estado local ainda');
      }
    }, 2000);

  } catch (error) {
    console.error('‚ùå [DebugCreateTest] Erro ao criar notifica√ß√£o de teste:', error);
  }
}

// Fun√ß√£o para testar notifica√ß√£o de recorrente
export async function debugCreateRecorrenteNotification() {
  console.log('üîÑ [DebugRecorrente] Criando notifica√ß√£o de recorrente de teste...');

  try {
    const currentUser = window.appState?.currentUser;
    const currentBudget = window.appState?.currentBudget;

    if (!currentUser?.uid || !currentBudget?.id) {
      console.error('‚ùå [DebugRecorrente] Usu√°rio ou or√ßamento n√£o encontrado');
      return;
    }

    const { create: createNotification } = await import('@data/repositories/notificationsRepo.js');
    const { serverTimestamp } = await import('firebase/firestore');

    const testNotification = {
      type: 'new_recorrente',
      budgetId: currentBudget.id,
      budgetName: currentBudget.nome || 'Or√ßamento',
      senderUid: currentUser.uid,
      senderName: currentUser.displayName || currentUser.email || 'Usu√°rio',
      recorrenteId: 'test-recorrente-id',
      recorrenteNome: 'Teste de Despesa Recorrente',
      recorrenteValor: 150.00,
      recorrenteFrequencia: 'Mensal',
      recorrenteCategoria: 'Teste',
      recorrenteDescricao: 'Esta √© uma despesa recorrente de teste',
      recorrenteParcelasRestantes: 5,
      recorrenteParcelasTotal: 12,
      createdAt: serverTimestamp(),
      read: false,
      recipientUid: currentUser.uid,
    };

    console.log('üìù [DebugRecorrente] Dados da notifica√ß√£o:', testNotification);

    const notificationId = await createNotification(testNotification);
    console.log('‚úÖ [DebugRecorrente] Notifica√ß√£o de recorrente criada com ID:', notificationId);

    // Aguardar um pouco e verificar se chegou
    setTimeout(() => {
      const notifications = window.appState?.notifications || [];
      const newNotification = notifications.find(n => n.id === notificationId);
      if (newNotification) {
        console.log('‚úÖ [DebugRecorrente] Notifica√ß√£o encontrada no estado local:', newNotification);
      } else {
        console.warn('‚ö†Ô∏è [DebugRecorrente] Notifica√ß√£o n√£o encontrada no estado local ainda');
      }
    }, 2000);

  } catch (error) {
    console.error('‚ùå [DebugRecorrente] Erro ao criar notifica√ß√£o de recorrente:', error);
  }
}

// Fun√ß√£o para verificar se o modal est√° funcionando
export async function debugModalStatus() {
  console.log('üîç [DebugModal] Verificando status do modal...');

  const modal = document.getElementById('notification-modal');
  console.log('üì± [DebugModal] Modal no DOM:', !!modal);

  if (modal) {
    const computedStyle = window.getComputedStyle(modal);
    console.log('üì± [DebugModal] Estilos do modal:', {
      display: computedStyle.display,
      opacity: computedStyle.opacity,
      visibility: computedStyle.visibility,
      zIndex: computedStyle.zIndex,
      position: computedStyle.position
    });

    const rect = modal.getBoundingClientRect();
    console.log('üìê [DebugModal] Dimens√µes do modal:', {
      width: rect.width,
      height: rect.height,
      top: rect.top,
      left: rect.left,
      visible: rect.width > 0 && rect.height > 0
    });
  }

  // Verificar se o listener est√° ativo
  console.log('üëÇ [DebugModal] Listener notification:show-modal ativo:', window.__notificationModalListenerBound);

  // Verificar se o eventBus est√° funcionando
  console.log('üì° [DebugModal] EventBus dispon√≠vel:', !!window.eventBus);

  return {
    modalExists: !!modal,
    listenerActive: window.__notificationModalListenerBound,
    eventBusAvailable: !!window.eventBus
  };
}

// Fun√ß√£o para testar o modal diretamente
export async function debugTestModalDirect() {
  console.log('üß™ [DebugModalDirect] Testando modal diretamente...');

  try {
    const { getNotificationModal } = await import('./ui/NotificationModal.js');
    const modal = getNotificationModal();
    console.log('üì± [DebugModalDirect] Modal obtido:', !!modal);

    if (modal) {
      const testNotification = {
        id: 'test-modal-direct',
        type: 'test_notification',
        message: 'Teste direto do modal',
        details: 'Este √© um teste direto do modal de notifica√ß√µes',
        createdAt: new Date(),
        read: false,
        senderName: 'Sistema de Debug',
        budgetName: 'Or√ßamento de Teste'
      };

      console.log('üì± [DebugModalDirect] Exibindo modal com notifica√ß√£o de teste...');
      modal.show(testNotification);
      console.log('‚úÖ [DebugModalDirect] Modal exibido com sucesso');

      // Verificar se o modal est√° vis√≠vel ap√≥s 1 segundo
      setTimeout(() => {
        const modalElement = document.getElementById('notification-modal');
        if (modalElement) {
          const computedStyle = window.getComputedStyle(modalElement);
          console.log('üì± [DebugModalDirect] Modal ap√≥s 1s:', {
            display: computedStyle.display,
            opacity: computedStyle.opacity,
            visibility: computedStyle.visibility,
            zIndex: computedStyle.zIndex
          });

          const rect = modalElement.getBoundingClientRect();
          console.log('üìê [DebugModalDirect] Dimens√µes do modal:', {
            width: rect.width,
            height: rect.height,
            visible: rect.width > 0 && rect.height > 0
          });
        } else {
          console.error('‚ùå [DebugModalDirect] Modal n√£o encontrado no DOM ap√≥s 1s');
        }
      }, 1000);

    } else {
      console.error('‚ùå [DebugModalDirect] Modal n√£o foi obtido');
    }

  } catch (error) {
    console.error('‚ùå [DebugModalDirect] Erro durante teste direto:', error);
    console.error('‚ùå [DebugModalDirect] Stack trace:', error.stack);
  }
}

// Fun√ß√£o para testar o eventBus diretamente
export async function debugTestEventBus() {
  console.log('üì° [DebugEventBus] Testando eventBus diretamente...');

  try {
    if (!window.eventBus) {
      console.error('‚ùå [DebugEventBus] EventBus n√£o est√° dispon√≠vel');
      return;
    }

    console.log('üì° [DebugEventBus] EventBus dispon√≠vel:', !!window.eventBus);
    console.log('üì° [DebugEventBus] M√©todos do EventBus:', Object.getOwnPropertyNames(window.eventBus));

    // Testar se o listener est√° ativo
    console.log('üëÇ [DebugEventBus] Listener ativo:', window.__notificationModalListenerBound);

    // Criar notifica√ß√£o de teste
    const testNotification = {
      id: 'test-eventbus',
      type: 'test_notification',
      message: 'Teste via EventBus',
      details: 'Este √© um teste via EventBus',
      createdAt: new Date(),
      read: false,
      senderName: 'Sistema de Debug',
      budgetName: 'Or√ßamento de Teste'
    };

    console.log('üì° [DebugEventBus] Emitindo evento notification:show-modal...');
    window.eventBus.emit('notification:show-modal', testNotification);
    console.log('‚úÖ [DebugEventBus] Evento emitido com sucesso');

  } catch (error) {
    console.error('‚ùå [DebugEventBus] Erro durante teste do EventBus:', error);
    console.error('‚ùå [DebugEventBus] Stack trace:', error.stack);
  }
}

// Fun√ß√£o para verificar se o sistema de notifica√ß√µes est√° funcionando
export async function debugCheckNotificationSystem() {
  console.log('üîç [DebugSystem] Verificando sistema de notifica√ß√µes...');

  try {
    // 1. Verificar estado do app
    console.log('üìä [DebugSystem] Estado do app:', {
      hasAppState: !!window.appState,
      hasCurrentUser: !!window.appState?.currentUser,
      hasCurrentBudget: !!window.appState?.currentBudget,
      hasNotifications: !!window.appState?.notifications,
      notificationsCount: window.appState?.notifications?.length || 0
    });

    // 2. Verificar EventBus
    console.log('üì° [DebugSystem] EventBus:', {
      hasEventBus: !!window.eventBus,
      hasOnMethod: !!window.eventBus?.on,
      hasEmitMethod: !!window.eventBus?.emit
    });

    // 3. Verificar listener de notifica√ß√µes
    const notifCtl = window.__notifCtl;
    console.log('üëÇ [DebugSystem] Controller de notifica√ß√µes:', {
      hasController: !!notifCtl,
      hasUnsub: !!notifCtl?.unsub,
      currentUid: notifCtl?.uid,
      lastIdsCount: notifCtl?.lastIds?.size || 0
    });

    // 4. Verificar prefer√™ncias
    const userId = window.appState?.currentUser?.uid;
    if (userId) {
      try {
        const { getUserPrefs } = await import('@features/notifications/notificationsController.js');
        const prefs = await getUserPrefs(userId);
        console.log('‚öôÔ∏è [DebugSystem] Prefer√™ncias do usu√°rio:', prefs);
      } catch (e) {
        console.warn('‚ö†Ô∏è [DebugSystem] Erro ao obter prefer√™ncias:', e);
      }
    }

    // 5. Verificar modal
    const modal = document.getElementById('notification-modal');
    console.log('üì± [DebugSystem] Modal:', {
      exists: !!modal,
      visible: modal ? modal.style.display !== 'none' : false,
      hasContent: modal ? modal.innerHTML.length > 0 : false
    });

    // 6. Testar cria√ß√£o de notifica√ß√£o simples
    console.log('üß™ [DebugSystem] Testando cria√ß√£o de notifica√ß√£o...');
    const { create: createNotification } = await import('@data/repositories/notificationsRepo.js');
    const { serverTimestamp } = await import('firebase/firestore');

    const testNotification = {
      type: 'test_notification',
      budgetId: window.appState?.currentBudget?.id,
      budgetName: window.appState?.currentBudget?.nome || 'Or√ßamento',
      senderUid: window.appState?.currentUser?.uid,
      senderName: window.appState?.currentUser?.displayName || 'Usu√°rio',
      message: 'Teste de sistema de notifica√ß√µes',
      createdAt: serverTimestamp(),
      read: false,
      recipientUid: window.appState?.currentUser?.uid,
    };

    const notificationId = await createNotification(testNotification);
    console.log('‚úÖ [DebugSystem] Notifica√ß√£o de teste criada com ID:', notificationId);

    // 7. Aguardar e verificar se chegou
    setTimeout(() => {
      const notifications = window.appState?.notifications || [];
      const newNotification = notifications.find(n => n.id === notificationId);
      if (newNotification) {
        console.log('‚úÖ [DebugSystem] Notifica√ß√£o de teste encontrada no estado local');
        console.log('üìù [DebugSystem] Dados da notifica√ß√£o:', newNotification);
      } else {
        console.warn('‚ö†Ô∏è [DebugSystem] Notifica√ß√£o de teste n√£o encontrada no estado local');
      }
    }, 3000);

  } catch (error) {
    console.error('‚ùå [DebugSystem] Erro durante verifica√ß√£o:', error);
    console.error('‚ùå [DebugSystem] Stack trace:', error.stack);
  }
}

// Fun√ß√£o para testar se as notifica√ß√µes est√£o sendo enviadas para transa√ß√µes
export async function debugTestTransactionNotification() {
  console.log('üí≥ [DebugTransaction] Testando notifica√ß√£o de transa√ß√£o...');

  try {
    const currentUser = window.appState?.currentUser;
    const currentBudget = window.appState?.currentBudget;

    if (!currentUser?.uid || !currentBudget?.id) {
      console.error('‚ùå [DebugTransaction] Usu√°rio ou or√ßamento n√£o encontrado');
      return;
    }

    // Simular cria√ß√£o de transa√ß√£o
    const { create: createNotification } = await import('@data/repositories/notificationsRepo.js');
    const { serverTimestamp } = await import('firebase/firestore');

    const testNotification = {
      type: 'new_transaction',
      budgetId: currentBudget.id,
      budgetName: currentBudget.nome || 'Or√ßamento',
      senderUid: currentUser.uid,
      senderName: currentUser.displayName || currentUser.email || 'Usu√°rio',
      transactionId: 'test-transaction-id',
      transactionDescricao: 'Teste de transa√ß√£o',
      transactionValor: 100.00,
      transactionTipo: 'despesa',
      transactionCategoria: 'Teste',
      createdAt: serverTimestamp(),
      read: false,
      recipientUid: currentUser.uid,
    };

    console.log('üìù [DebugTransaction] Dados da notifica√ß√£o:', testNotification);

    const notificationId = await createNotification(testNotification);
    console.log('‚úÖ [DebugTransaction] Notifica√ß√£o de transa√ß√£o criada com ID:', notificationId);

    // Aguardar e verificar se chegou
    setTimeout(() => {
      const notifications = window.appState?.notifications || [];
      const newNotification = notifications.find(n => n.id === notificationId);
      if (newNotification) {
        console.log('‚úÖ [DebugTransaction] Notifica√ß√£o encontrada no estado local:', newNotification);
      } else {
        console.warn('‚ö†Ô∏è [DebugTransaction] Notifica√ß√£o n√£o encontrada no estado local ainda');
      }
    }, 2000);

  } catch (error) {
    console.error('‚ùå [DebugTransaction] Erro ao criar notifica√ß√£o de transa√ß√£o:', error);
  }
}

// Fun√ß√£o para testar notifica√ß√µes de edi√ß√£o e exclus√£o de recorrentes
export async function debugTestRecurringEditDelete() {
  console.log('üîÑ [DebugRecurringEditDelete] Testando notifica√ß√µes de edi√ß√£o e exclus√£o...');

  try {
    const currentUser = window.appState?.currentUser;
    const currentBudget = window.appState?.currentBudget;

    if (!currentUser?.uid || !currentBudget?.id) {
      console.error('‚ùå [DebugRecurringEditDelete] Usu√°rio ou or√ßamento n√£o encontrado');
      return;
    }

    console.log('üìä [DebugRecurringEditDelete] Dados do or√ßamento:', {
      id: currentBudget.id,
      nome: currentBudget.nome,
      usuariosPermitidos: currentBudget.usuariosPermitidos,
      usuariosPermitidosCount: currentBudget.usuariosPermitidos?.length || 0
    });

    // Testar notifica√ß√£o de edi√ß√£o
    console.log('‚úèÔ∏è [DebugRecurringEditDelete] Testando notifica√ß√£o de edi√ß√£o...');
    const { create: createNotification } = await import('@data/repositories/notificationsRepo.js');
    const { serverTimestamp } = await import('firebase/firestore');

    const editNotification = {
      type: 'updated_recorrente',
      budgetId: currentBudget.id,
      budgetName: currentBudget.nome || 'Or√ßamento',
      senderUid: currentUser.uid,
      senderName: currentUser.displayName || currentUser.email || 'Usu√°rio',
      recorrenteId: 'test-edit-recorrente-id',
      recorrenteNome: 'Despesa Recorrente Editada',
      recorrenteValor: 200.00,
      recorrenteFrequencia: 'mensal',
      recorrenteCategoria: 'Teste',
      recorrenteDescricao: 'Esta despesa foi editada',
      recorrenteParcelasRestantes: 3,
      recorrenteParcelasTotal: 6,
      changes: {
        valor: { from: 150.00, to: 200.00 },
        parcelasRestantes: { from: 5, to: 3 }
      },
      prev: {
        nome: 'Despesa Recorrente Editada',
        valor: 150.00,
        frequencia: 'mensal',
        categoria: 'Teste',
        descricao: 'Esta despesa foi editada',
        parcelasRestantes: 5,
        parcelasTotal: 6
      },
      createdAt: serverTimestamp(),
      read: false,
      recipientUid: currentUser.uid, // Enviar para o pr√≥prio usu√°rio para teste
    };

    console.log('üìù [DebugRecurringEditDelete] Dados da notifica√ß√£o de edi√ß√£o:', editNotification);

    const editNotificationId = await createNotification(editNotification);
    console.log('‚úÖ [DebugRecurringEditDelete] Notifica√ß√£o de edi√ß√£o criada com ID:', editNotificationId);

    // Testar notifica√ß√£o de exclus√£o
    console.log('üóëÔ∏è [DebugRecurringEditDelete] Testando notifica√ß√£o de exclus√£o...');

    const deleteNotification = {
      type: 'deleted_recorrente',
      budgetId: currentBudget.id,
      budgetName: currentBudget.nome || 'Or√ßamento',
      senderUid: currentUser.uid,
      senderName: currentUser.displayName || currentUser.email || 'Usu√°rio',
      recorrenteId: 'test-delete-recorrente-id',
      recorrenteNome: 'Despesa Recorrente Exclu√≠da',
      recorrenteValor: 100.00,
      recorrenteFrequencia: 'mensal',
      recorrenteCategoria: 'Teste',
      recorrenteDescricao: 'Esta despesa foi exclu√≠da',
      recorrenteParcelasRestantes: 2,
      recorrenteParcelasTotal: 4,
      createdAt: serverTimestamp(),
      read: false,
      recipientUid: currentUser.uid, // Enviar para o pr√≥prio usu√°rio para teste
    };

    console.log('üìù [DebugRecurringEditDelete] Dados da notifica√ß√£o de exclus√£o:', deleteNotification);

    const deleteNotificationId = await createNotification(deleteNotification);
    console.log('‚úÖ [DebugRecurringEditDelete] Notifica√ß√£o de exclus√£o criada com ID:', deleteNotificationId);

    // Aguardar e verificar se chegaram
    setTimeout(() => {
      const notifications = window.appState?.notifications || [];
      const editNotification = notifications.find(n => n.id === editNotificationId);
      const deleteNotification = notifications.find(n => n.id === deleteNotificationId);

      if (editNotification) {
        console.log('‚úÖ [DebugRecurringEditDelete] Notifica√ß√£o de edi√ß√£o encontrada:', editNotification);
      } else {
        console.warn('‚ö†Ô∏è [DebugRecurringEditDelete] Notifica√ß√£o de edi√ß√£o n√£o encontrada');
      }

      if (deleteNotification) {
        console.log('‚úÖ [DebugRecurringEditDelete] Notifica√ß√£o de exclus√£o encontrada:', deleteNotification);
      } else {
        console.warn('‚ö†Ô∏è [DebugRecurringEditDelete] Notifica√ß√£o de exclus√£o n√£o encontrada');
      }
    }, 3000);

  } catch (error) {
    console.error('‚ùå [DebugRecurringEditDelete] Erro durante teste:', error);
  }
}

// Fun√ß√£o para diagn√≥stico completo do sistema de notifica√ß√µes
export async function debugFullNotificationDiagnosis() {
  console.log('üîç [DebugFullDiagnosis] Iniciando diagn√≥stico completo do sistema de notifica√ß√µes...');

  try {
    // 1. Verificar estado b√°sico
    console.log('üìä [DebugFullDiagnosis] === ESTADO B√ÅSICO ===');
    console.log('App State:', {
      hasAppState: !!window.appState,
      hasCurrentUser: !!window.appState?.currentUser,
      hasCurrentBudget: !!window.appState?.currentBudget,
      currentUserId: window.appState?.currentUser?.uid,
      currentBudgetId: window.appState?.currentBudget?.id,
      currentBudgetName: window.appState?.currentBudget?.nome,
      usuariosPermitidos: window.appState?.currentBudget?.usuariosPermitidos,
      usuariosCount: window.appState?.currentBudget?.usuariosPermitidos?.length || 0
    });

    // 2. Verificar EventBus
    console.log('üì° [DebugFullDiagnosis] === EVENTBUS ===');
    console.log('EventBus:', {
      exists: !!window.eventBus,
      hasOn: !!window.eventBus?.on,
      hasEmit: !!window.eventBus?.emit,
      hasOff: !!window.eventBus?.off
    });

    // 3. Verificar controller de notifica√ß√µes
    console.log('üëÇ [DebugFullDiagnosis] === CONTROLLER DE NOTIFICA√á√ïES ===');
    const notifCtl = window.__notifCtl;
    console.log('Controller:', {
      exists: !!notifCtl,
      hasUnsub: !!notifCtl?.unsub,
      currentUid: notifCtl?.uid,
      lastIdsCount: notifCtl?.lastIds?.size || 0,
      lastSeenAt: notifCtl?.lastSeenAt
    });

    // 4. Verificar estado das notifica√ß√µes
    console.log('üìß [DebugFullDiagnosis] === ESTADO DAS NOTIFICA√á√ïES ===');
    const notifications = window.appState?.notifications || [];
    console.log('Notifica√ß√µes:', {
      count: notifications.length,
      unreadCount: notifications.filter(n => !n.read).length,
      types: [...new Set(notifications.map(n => n.type))],
      recent: notifications.slice(-3).map(n => ({ id: n.id, type: n.type, read: n.read, createdAt: n.createdAt }))
    });

    // 5. Verificar modal
    console.log('üì± [DebugFullDiagnosis] === MODAL ===');
    const modal = document.getElementById('notification-modal');
    console.log('Modal:', {
      exists: !!modal,
      visible: modal ? modal.style.display !== 'none' : false,
      hasContent: modal ? modal.innerHTML.length > 0 : false,
      classes: modal ? modal.className : null
    });

    // 6. Testar cria√ß√£o de notifica√ß√£o simples
    console.log('üß™ [DebugFullDiagnosis] === TESTE DE CRIA√á√ÉO ===');
    try {
      const { create: createNotification } = await import('@data/repositories/notificationsRepo.js');
      const { serverTimestamp } = await import('firebase/firestore');

      const testNotification = {
        type: 'test_notification',
        budgetId: window.appState?.currentBudget?.id,
        budgetName: window.appState?.currentBudget?.nome || 'Or√ßamento',
        senderUid: window.appState?.currentUser?.uid,
        senderName: window.appState?.currentUser?.displayName || 'Usu√°rio',
        message: 'Teste de diagn√≥stico completo',
        createdAt: serverTimestamp(),
        read: false,
        recipientUid: window.appState?.currentUser?.uid,
      };

      console.log('üìù [DebugFullDiagnosis] Criando notifica√ß√£o de teste...');
      const notificationId = await createNotification(testNotification);
      console.log('‚úÖ [DebugFullDiagnosis] Notifica√ß√£o criada com ID:', notificationId);

      // 7. Aguardar e verificar se chegou
      setTimeout(() => {
        console.log('‚è∞ [DebugFullDiagnosis] Verificando se a notifica√ß√£o chegou...');
        const updatedNotifications = window.appState?.notifications || [];
        const newNotification = updatedNotifications.find(n => n.id === notificationId);

        if (newNotification) {
          console.log('‚úÖ [DebugFullDiagnosis] Notifica√ß√£o encontrada no estado local:', newNotification);
        } else {
          console.warn('‚ö†Ô∏è [DebugFullDiagnosis] Notifica√ß√£o n√£o encontrada no estado local');
          console.log('üìä [DebugFullDiagnosis] Estado atual das notifica√ß√µes:', updatedNotifications.length, 'itens');
        }
      }, 3000);

    } catch (error) {
      console.error('‚ùå [DebugFullDiagnosis] Erro ao criar notifica√ß√£o de teste:', error);
    }

    // 8. Verificar prefer√™ncias do usu√°rio
    console.log('‚öôÔ∏è [DebugFullDiagnosis] === PREFER√äNCIAS ===');
    try {
      const { getUserPrefs } = await import('@features/notifications/notificationsController.js');
      const prefs = await getUserPrefs(window.appState?.currentUser?.uid);
      console.log('Prefer√™ncias:', prefs);
    } catch (e) {
      console.warn('‚ö†Ô∏è [DebugFullDiagnosis] Erro ao obter prefer√™ncias:', e);
    }

    // 9. Verificar localStorage
    console.log('üíæ [DebugFullDiagnosis] === LOCALSTORAGE ===');
    const relevantKeys = [
      'notification_use_modal',
      'notification_toasts_enabled',
      'notification_types_enabled',
      'notification_period_filter'
    ];

    relevantKeys.forEach(key => {
      const value = localStorage.getItem(key);
      console.log(`${key}:`, value);
    });

    console.log('‚úÖ [DebugFullDiagnosis] Diagn√≥stico completo finalizado!');

  } catch (error) {
    console.error('‚ùå [DebugFullDiagnosis] Erro durante diagn√≥stico:', error);
    console.error('‚ùå [DebugFullDiagnosis] Stack trace:', error.stack);
  }
}

// Fun√ß√£o para testar o EventBus e o sistema de eventos
export async function debugTestEventBusSystem() {
  console.log('üì° [DebugEventBusSystem] Testando sistema de EventBus...');

  try {
    // 1. Verificar se o EventBus existe
    if (!window.eventBus) {
      console.error('‚ùå [DebugEventBusSystem] EventBus n√£o est√° dispon√≠vel');
      return;
    }

    console.log('‚úÖ [DebugEventBusSystem] EventBus encontrado');

    // 2. Testar emiss√£o de evento simples
    console.log('üß™ [DebugEventBusSystem] Testando emiss√£o de evento simples...');
    let eventReceived = false;

    // Criar listener tempor√°rio
    const testListener = (data) => {
      console.log('‚úÖ [DebugEventBusSystem] Evento de teste recebido:', data);
      eventReceived = true;
    };

    window.eventBus.on('test-event', testListener);

    // Emitir evento
    window.eventBus.emit('test-event', { message: 'Teste do EventBus', timestamp: Date.now() });

    // Aguardar um pouco
    setTimeout(() => {
      if (eventReceived) {
        console.log('‚úÖ [DebugEventBusSystem] EventBus est√° funcionando corretamente');
      } else {
        console.warn('‚ö†Ô∏è [DebugEventBusSystem] Evento n√£o foi recebido');
      }

      // Remover listener tempor√°rio
      window.eventBus.off('test-event', testListener);
    }, 1000);

    // 3. Testar evento de notifica√ß√£o
    console.log('üì± [DebugEventBusSystem] Testando evento de notifica√ß√£o...');

    const testNotification = {
      id: 'test-eventbus-notification',
      type: 'test_notification',
      message: 'Teste do EventBus para notifica√ß√µes',
      createdAt: new Date(),
      read: false
    };

    // Emitir evento de notifica√ß√£o
    window.eventBus.emit('notification:show-modal', testNotification);
    console.log('üì§ [DebugEventBusSystem] Evento notification:show-modal emitido');

    // 4. Verificar se o listener global est√° ativo
    console.log('üîç [DebugEventBusSystem] Verificando listener global...');
    console.log('Listener global ativo:', !!window.__notificationModalListenerBound);

    // 5. Testar outros eventos relacionados
    console.log('üîÑ [DebugEventBusSystem] Testando outros eventos...');

    const testEvents = [
      'notifications:updated',
      'snackbar:show',
      'transactions:updated',
      'categories:updated'
    ];

    testEvents.forEach(eventName => {
      try {
        window.eventBus.emit(eventName, { test: true, timestamp: Date.now() });
        console.log(`‚úÖ [DebugEventBusSystem] Evento ${eventName} emitido com sucesso`);
      } catch (error) {
        console.error(`‚ùå [DebugEventBusSystem] Erro ao emitir evento ${eventName}:`, error);
      }
    });

  } catch (error) {
    console.error('‚ùå [DebugEventBusSystem] Erro durante teste do EventBus:', error);
  }
}

// Fun√ß√£o para testar notifica√ß√£o de recorrente com todos os campos
export async function debugTestRecurringNotificationComplete() {
  console.log('üîÑ [DebugRecurringComplete] Testando notifica√ß√£o de recorrente completa...');

  try {
    const currentUser = window.appState?.currentUser;
    const currentBudget = window.appState?.currentBudget;

    if (!currentUser?.uid || !currentBudget?.id) {
      console.error('‚ùå [DebugRecurringComplete] Usu√°rio ou or√ßamento n√£o encontrado');
      return;
    }

    const { create: createNotification } = await import('@data/repositories/notificationsRepo.js');
    const { serverTimestamp } = await import('firebase/firestore');

    const testNotification = {
      type: 'new_recorrente',
      budgetId: currentBudget.id,
      budgetName: currentBudget.nome || 'Or√ßamento',
      senderUid: currentUser.uid,
      senderName: currentUser.displayName || currentUser.email || 'Usu√°rio',
      recorrenteId: 'test-recorrente-complete-id',
      recorrenteNome: 'Despesa Recorrente Completa',
      recorrenteValor: 250.00,
      recorrenteFrequencia: 'mensal',
      recorrenteCategoria: 'Teste Completo',
      recorrenteDescricao: 'Esta √© uma despesa recorrente de teste completa',
      recorrenteParcelasRestantes: 8,
      recorrenteParcelasTotal: 12,
      createdAt: serverTimestamp(),
      read: false,
      recipientUid: currentUser.uid,
    };

    console.log('üìù [DebugRecurringComplete] Dados da notifica√ß√£o:', testNotification);
    console.log('üîç [DebugRecurringComplete] Campos de parcelas:', {
      parcelasRestantes: testNotification.recorrenteParcelasRestantes,
      parcelasTotal: testNotification.recorrenteParcelasTotal,
      temParcelas: testNotification.recorrenteParcelasTotal > 1
    });

    const notificationId = await createNotification(testNotification);
    console.log('‚úÖ [DebugRecurringComplete] Notifica√ß√£o de recorrente criada com ID:', notificationId);

    // Aguardar e verificar se chegou
    setTimeout(() => {
      const notifications = window.appState?.notifications || [];
      const newNotification = notifications.find(n => n.id === notificationId);

      if (newNotification) {
        console.log('‚úÖ [DebugRecurringComplete] Notifica√ß√£o encontrada no estado local:', newNotification);
        console.log('üîç [DebugRecurringComplete] Campos de parcelas na notifica√ß√£o recebida:', {
          parcelasRestantes: newNotification.recorrenteParcelasRestantes,
          parcelasTotal: newNotification.recorrenteParcelasTotal,
          temParcelas: newNotification.recorrenteParcelasTotal > 1
        });
        console.log('üìÖ [DebugRecurringComplete] Data da notifica√ß√£o:', newNotification.createdAt);
        console.log('üìä [DebugRecurringComplete] Posi√ß√£o na lista:', notifications.findIndex(n => n.id === notificationId));
      } else {
        console.warn('‚ö†Ô∏è [DebugRecurringComplete] Notifica√ß√£o n√£o encontrada no estado local');
      }
    }, 3000);

  } catch (error) {
    console.error('‚ùå [DebugRecurringComplete] Erro ao criar notifica√ß√£o de recorrente:', error);
  }
}

// Fun√ß√£o para testar o EventBus e modal
export async function debugEventBusAndModal() {
  console.log('üîç [DebugEventBus] Verificando EventBus e Modal...');

  // Verificar EventBus
  console.log('üîç [DebugEventBus] window.eventBus:', !!window.eventBus);
  console.log('üîç [DebugEventBus] window.eventBus.emit:', typeof window.eventBus?.emit);
  console.log('üîç [DebugEventBus] window.eventBus.on:', typeof window.eventBus?.on);
  console.log('üîç [DebugEventBus] window.__notificationModalListenerBound:', window.__notificationModalListenerBound);

  // Testar EventBus
  if (window.eventBus && typeof window.eventBus.emit === 'function') {
    const testNotification = {
      id: 'test-' + Date.now(),
      type: 'new_transaction',
      message: 'Teste de EventBus',
      transactionDescricao: 'Teste de transa√ß√£o',
      transactionValor: 100.50,
      createdAt: new Date(),
      read: false
    };

    console.log('üì§ [DebugEventBus] Emitindo evento notification:show-modal...');
    window.eventBus.emit('notification:show-modal', testNotification);
    console.log('‚úÖ [DebugEventBus] Evento emitido');
  } else {
    console.error('‚ùå [DebugEventBus] EventBus n√£o dispon√≠vel');
  }
}

// Fun√ß√£o espec√≠fica para debug em produ√ß√£o
export async function debugProductionModal() {
  console.log('üè≠ [DebugProduction] === DIAGN√ìSTICO DE PRODU√á√ÉO ===');

  // 1. Verificar ambiente
  console.log('üåç [DebugProduction] Ambiente:', {
    isProduction: import.meta.env?.PROD || false,
    isDevelopment: import.meta.env?.DEV || false,
    userAgent: navigator.userAgent,
    location: window.location.href
  });

  // 2. Verificar EventBus
  console.log('üì° [DebugProduction] EventBus:', {
    exists: !!window.eventBus,
    hasOn: !!window.eventBus?.on,
    hasEmit: !!window.eventBus?.emit,
    listenerBound: !!window.__notificationModalListenerBound
  });

  // 3. Verificar modal no DOM
  const modal = document.getElementById('notification-modal');
  console.log('üì± [DebugProduction] Modal DOM:', {
    exists: !!modal,
    inDocument: document.contains(modal),
    display: modal ? window.getComputedStyle(modal).display : 'N/A',
    visibility: modal ? window.getComputedStyle(modal).visibility : 'N/A',
    opacity: modal ? window.getComputedStyle(modal).opacity : 'N/A',
    zIndex: modal ? window.getComputedStyle(modal).zIndex : 'N/A'
  });

  // 4. Verificar CSS
  const modalCSS = document.querySelector('link[href*="notification-modal"]') ||
                   document.querySelector('style[data-notification-modal]');
  console.log('üé® [DebugProduction] CSS Modal:', {
    cssLoaded: !!modalCSS,
    cssHref: modalCSS?.href || 'N/A'
  });

  // 5. Testar importa√ß√£o do modal
  try {
    console.log('üì¶ [DebugProduction] Testando importa√ß√£o do modal...');
    const { getNotificationModal } = await import('@features/notifications/ui/NotificationModal.js');
    const modalInstance = getNotificationModal();
    console.log('‚úÖ [DebugProduction] Modal importado:', !!modalInstance);
    console.log('‚úÖ [DebugProduction] Modal show method:', typeof modalInstance?.show);
  } catch (error) {
    console.error('‚ùå [DebugProduction] Erro ao importar modal:', error);
  }

  // 6. Testar evento
  if (window.eventBus) {
    console.log('üì§ [DebugProduction] Testando evento...');
    const testNotification = {
      id: 'test-production-' + Date.now(),
      type: 'test_notification',
      message: 'Teste de Produ√ß√£o',
      createdAt: new Date(),
      read: false
    };

    window.eventBus.emit('notification:show-modal', testNotification);
    console.log('‚úÖ [DebugProduction] Evento emitido');

    // Verificar se o modal apareceu ap√≥s 1 segundo
    setTimeout(() => {
      const modalAfter = document.getElementById('notification-modal');
      console.log('üì± [DebugProduction] Modal ap√≥s evento:', {
        exists: !!modalAfter,
        display: modalAfter ? window.getComputedStyle(modalAfter).display : 'N/A',
        visibility: modalAfter ? window.getComputedStyle(modalAfter).visibility : 'N/A',
        opacity: modalAfter ? window.getComputedStyle(modalAfter).opacity : 'N/A'
      });
    }, 1000);
  }

  console.log('üè≠ [DebugProduction] === FIM DO DIAGN√ìSTICO ===');
}

// Fun√ß√£o para testar o modal diretamente
export async function debugTestModalDirectly() {
  console.log('üì± [DebugModalDirect] Testando modal diretamente...');

  try {
    // 1. Verificar se o modal existe no DOM
    let modal = document.getElementById('notification-modal');
    console.log('üîç [DebugModalDirect] Modal no DOM:', !!modal);

    if (!modal) {
      console.log('üîß [DebugModalDirect] Modal n√£o existe, criando...');
      // Importar e criar o modal
      const { getNotificationModal } = await import('@features/notifications/ui/NotificationModal.js');
      modal = getNotificationModal();
      console.log('‚úÖ [DebugModalDirect] Modal criado:', !!modal);
    }

    // 2. Verificar se o modal est√° vis√≠vel
    if (modal) {
      console.log('üìä [DebugModalDirect] Estado do modal:', {
        exists: !!modal,
        visible: modal.style.display !== 'none',
        hasContent: modal.innerHTML.length > 0,
        classes: modal.className
      });
    }

    // 3. Criar notifica√ß√£o de teste
    const testNotification = {
      id: 'test-modal-direct',
      type: 'test_notification',
      message: 'Teste direto do modal',
      createdAt: new Date(),
      read: false,
      senderName: 'Sistema de Teste',
      budgetName: 'Or√ßamento de Teste'
    };

    console.log('üìù [DebugModalDirect] Notifica√ß√£o de teste:', testNotification);

    // 4. Tentar mostrar o modal diretamente
    if (modal) {
      console.log('üöÄ [DebugModalDirect] Tentando mostrar modal...');

      // Importar a fun√ß√£o show do modal
      const { getNotificationModal } = await import('@features/notifications/ui/NotificationModal.js');
      const modalInstance = getNotificationModal();

      if (modalInstance && typeof modalInstance.show === 'function') {
        console.log('‚úÖ [DebugModalDirect] Fun√ß√£o show encontrada, executando...');
        modalInstance.show(testNotification);
        console.log('‚úÖ [DebugModalDirect] Modal.show() executado');

        // Verificar se o modal ficou vis√≠vel
        setTimeout(() => {
          const updatedModal = document.getElementById('notification-modal');
          if (updatedModal) {
            console.log('üìä [DebugModalDirect] Estado ap√≥s show():', {
              visible: updatedModal.style.display !== 'none',
              hasContent: updatedModal.innerHTML.length > 0,
              opacity: updatedModal.style.opacity,
              zIndex: updatedModal.style.zIndex
            });
          }
        }, 1000);

      } else {
        console.error('‚ùå [DebugModalDirect] Fun√ß√£o show n√£o encontrada no modal');
      }
    }

    // 5. Testar via EventBus
    console.log('üì° [DebugModalDirect] Testando via EventBus...');
    if (window.eventBus) {
      console.log('‚úÖ [DebugModalDirect] EventBus encontrado, emitindo evento...');
      window.eventBus.emit('notification:show-modal', testNotification);
      console.log('‚úÖ [DebugModalDirect] Evento notification:show-modal emitido');

      // Verificar se o modal ficou vis√≠vel
      setTimeout(() => {
        const updatedModal = document.getElementById('notification-modal');
        if (updatedModal) {
          console.log('üìä [DebugModalDirect] Estado ap√≥s EventBus:', {
            visible: updatedModal.style.display !== 'none',
            hasContent: updatedModal.innerHTML.length > 0,
            opacity: updatedModal.style.opacity,
            zIndex: updatedModal.style.zIndex
          });
        }
      }, 1000);
    } else {
      console.error('‚ùå [DebugModalDirect] EventBus n√£o encontrado');
    }

  } catch (error) {
    console.error('‚ùå [DebugModalDirect] Erro durante teste:', error);
    console.error('‚ùå [DebugModalDirect] Stack trace:', error.stack);
  }
}

// Fun√ß√£o para diagn√≥stico completo do sistema de notifica√ß√µes e modal
export async function debugCompleteSystemDiagnosis() {
  console.log('üîç [DebugCompleteSystem] Iniciando diagn√≥stico completo do sistema...');

  try {
    // 1. Verificar estado b√°sico
    console.log('üìä [DebugCompleteSystem] === ESTADO B√ÅSICO ===');
    console.log('App State:', {
      hasAppState: !!window.appState,
      hasCurrentUser: !!window.appState?.currentUser,
      hasCurrentBudget: !!window.appState?.currentBudget,
      currentUserId: window.appState?.currentUser?.uid,
      currentBudgetId: window.appState?.currentBudget?.id,
      currentBudgetName: window.appState?.currentBudget?.nome,
      usuariosPermitidos: window.appState?.currentBudget?.usuariosPermitidos,
      usuariosCount: window.appState?.currentBudget?.usuariosPermitidos?.length || 0
    });

    // 2. Verificar EventBus
    console.log('üì° [DebugCompleteSystem] === EVENTBUS ===');
    console.log('EventBus:', {
      exists: !!window.eventBus,
      hasOn: !!window.eventBus?.on,
      hasEmit: !!window.eventBus?.emit,
      hasOff: !!window.eventBus?.off
    });

    // 3. Verificar controller de notifica√ß√µes
    console.log('üëÇ [DebugCompleteSystem] === CONTROLLER DE NOTIFICA√á√ïES ===');
    const notifCtl = window.__notifCtl;
    console.log('Controller:', {
      exists: !!notifCtl,
      hasUnsub: !!notifCtl?.unsub,
      currentUid: notifCtl?.uid,
      lastIdsCount: notifCtl?.lastIds?.size || 0,
      lastSeenAt: notifCtl?.lastSeenAt
    });

    // 4. Verificar estado das notifica√ß√µes
    console.log('üìß [DebugCompleteSystem] === ESTADO DAS NOTIFICA√á√ïES ===');
    const notifications = window.appState?.notifications || [];
    console.log('Notifica√ß√µes:', {
      count: notifications.length,
      unreadCount: notifications.filter(n => !n.read).length,
      types: [...new Set(notifications.map(n => n.type))],
      recent: notifications.slice(-3).map(n => ({ id: n.id, type: n.type, read: n.read, createdAt: n.createdAt }))
    });

    // 5. Verificar modal
    console.log('üì± [DebugCompleteSystem] === MODAL ===');
    const modal = document.getElementById('notification-modal');
    console.log('Modal:', {
      exists: !!modal,
      visible: modal ? modal.style.display !== 'none' : false,
      hasContent: modal ? modal.innerHTML.length > 0 : false,
      classes: modal ? modal.className : null
    });

    // 6. Verificar listener global
    console.log('üéß [DebugCompleteSystem] === LISTENER GLOBAL ===');
    console.log('Listener Global:', {
      bound: !!window.__notificationModalListenerBound,
      eventBusExists: !!window.eventBus
    });

    // 7. Testar cria√ß√£o de notifica√ß√£o
    console.log('üß™ [DebugCompleteSystem] === TESTE DE CRIA√á√ÉO ===');
    try {
      const { create: createNotification } = await import('@data/repositories/notificationsRepo.js');
      const { serverTimestamp } = await import('firebase/firestore');

      const testNotification = {
        type: 'test_notification',
        budgetId: window.appState?.currentBudget?.id,
        budgetName: window.appState?.currentBudget?.nome || 'Or√ßamento',
        senderUid: window.appState?.currentUser?.uid,
        senderName: window.appState?.currentUser?.displayName || 'Usu√°rio',
        message: 'Teste de diagn√≥stico completo do sistema',
        createdAt: serverTimestamp(),
        read: false,
        recipientUid: window.appState?.currentUser?.uid,
      };

      console.log('üìù [DebugCompleteSystem] Criando notifica√ß√£o de teste...');
      const notificationId = await createNotification(testNotification);
      console.log('‚úÖ [DebugCompleteSystem] Notifica√ß√£o criada com ID:', notificationId);

      // 8. Aguardar e verificar se chegou
      setTimeout(() => {
        console.log('‚è∞ [DebugCompleteSystem] Verificando se a notifica√ß√£o chegou...');
        const updatedNotifications = window.appState?.notifications || [];
        const newNotification = updatedNotifications.find(n => n.id === notificationId);

        if (newNotification) {
          console.log('‚úÖ [DebugCompleteSystem] Notifica√ß√£o encontrada no estado local:', newNotification);
        } else {
          console.warn('‚ö†Ô∏è [DebugCompleteSystem] Notifica√ß√£o n√£o encontrada no estado local');
          console.log('üìä [DebugCompleteSystem] Estado atual das notifica√ß√µes:', updatedNotifications.length, 'itens');
        }
      }, 3000);

    } catch (error) {
      console.error('‚ùå [DebugCompleteSystem] Erro ao criar notifica√ß√£o de teste:', error);
    }

    // 9. Testar EventBus diretamente
    console.log('üì° [DebugCompleteSystem] === TESTE DO EVENTBUS ===');
    if (window.eventBus) {
      console.log('‚úÖ [DebugCompleteSystem] EventBus encontrado, testando...');

      // Testar evento simples
      let eventReceived = false;
      const testListener = (data) => {
        console.log('‚úÖ [DebugCompleteSystem] Evento de teste recebido:', data);
        eventReceived = true;
      };

      window.eventBus.on('test-complete-system', testListener);
      window.eventBus.emit('test-complete-system', { message: 'Teste do sistema completo', timestamp: Date.now() });

      setTimeout(() => {
        if (eventReceived) {
          console.log('‚úÖ [DebugCompleteSystem] EventBus est√° funcionando');
        } else {
          console.warn('‚ö†Ô∏è [DebugCompleteSystem] EventBus pode n√£o estar funcionando');
        }
        window.eventBus.off('test-complete-system', testListener);
      }, 1000);

      // Testar evento de notifica√ß√£o
      console.log('üì± [DebugCompleteSystem] Testando evento de notifica√ß√£o...');
      const testNotificationEvent = {
        id: 'test-complete-system-notification',
        type: 'test_notification',
        message: 'Teste do sistema completo',
        createdAt: new Date(),
        read: false,
        senderName: 'Sistema de Teste',
        budgetName: 'Or√ßamento de Teste'
      };

      window.eventBus.emit('notification:show-modal', testNotificationEvent);
      console.log('üì§ [DebugCompleteSystem] Evento notification:show-modal emitido');

    } else {
      console.error('‚ùå [DebugCompleteSystem] EventBus n√£o encontrado');
    }

    // 10. Verificar prefer√™ncias
    console.log('‚öôÔ∏è [DebugCompleteSystem] === PREFER√äNCIAS ===');
    try {
      const { getUserPrefs } = await import('@features/notifications/notificationsController.js');
      const prefs = await getUserPrefs(window.appState?.currentUser?.uid);
      console.log('Prefer√™ncias:', prefs);
    } catch (e) {
      console.warn('‚ö†Ô∏è [DebugCompleteSystem] Erro ao obter prefer√™ncias:', e);
    }

    // 11. Verificar localStorage
    console.log('üíæ [DebugCompleteSystem] === LOCALSTORAGE ===');
    const relevantKeys = [
      'notification_use_modal',
      'notification_toasts_enabled',
      'notification_types_enabled',
      'notification_period_filter'
    ];

    relevantKeys.forEach(key => {
      const value = localStorage.getItem(key);
      console.log(`${key}:`, value);
    });

    console.log('‚úÖ [DebugCompleteSystem] Diagn√≥stico completo finalizado!');

  } catch (error) {
    console.error('‚ùå [DebugCompleteSystem] Erro durante diagn√≥stico:', error);
    console.error('‚ùå [DebugCompleteSystem] Stack trace:', error.stack);
  }
}

// Fun√ß√£o para testar notifica√ß√µes de recorrentes e categorias
export async function debugTestRecurringAndCategoryNotifications() {
  console.log('üß™ [DebugRecurringCategory] Testando notifica√ß√µes de recorrentes e categorias...');

  try {
    const currentUser = window.appState?.currentUser;
    const currentBudget = window.appState?.currentBudget;

    if (!currentUser || !currentBudget) {
      console.error('‚ùå [DebugRecurringCategory] Usu√°rio ou or√ßamento n√£o encontrado');
      return;
    }

    console.log('üìä [DebugRecurringCategory] Estado atual:', {
      userId: currentUser.uid,
      budgetId: currentBudget.id,
      budgetName: currentBudget.nome,
      usuariosPermitidos: currentBudget.usuariosPermitidos
    });

    // 1. Testar notifica√ß√£o de categoria
    console.log('üìÅ [DebugRecurringCategory] === TESTE DE CATEGORIA ===');
    try {
      const { sendCategoryChangeNotification } = await import('@features/notifications/NotificationService.js');

      const testCategory = {
        id: 'test-category-' + Date.now(),
        nome: 'Categoria de Teste',
        descricao: 'Descri√ß√£o da categoria de teste',
        cor: '#ff0000',
        tipo: 'expense',
        limite: 1000,
        budgetId: currentBudget.id,
        userId: currentUser.uid
      };

      console.log('üìù [DebugRecurringCategory] Enviando notifica√ß√£o de categoria...');
      await sendCategoryChangeNotification(
        currentBudget.id,
        currentUser.uid,
        testCategory,
        'category_added'
      );
      console.log('‚úÖ [DebugRecurringCategory] Notifica√ß√£o de categoria enviada');

    } catch (error) {
      console.error('‚ùå [DebugRecurringCategory] Erro ao enviar notifica√ß√£o de categoria:', error);
    }

    // 2. Testar notifica√ß√£o de recorrente
    console.log('üîÑ [DebugRecurringCategory] === TESTE DE RECORRENTE ===');
    try {
      const { sendRecorrenteChangeNotification } = await import('@features/notifications/NotificationService.js');

      const testRecorrente = {
        id: 'test-recorrente-' + Date.now(),
        nome: 'Recorrente de Teste',
        valor: 500,
        frequencia: 'mensal',
        categoria: 'Alimenta√ß√£o',
        descricao: 'Descri√ß√£o do recorrente de teste',
        parcelasRestantes: 10,
        parcelasTotal: 12,
        budgetId: currentBudget.id,
        userId: currentUser.uid
      };

      console.log('üìù [DebugRecurringCategory] Enviando notifica√ß√£o de recorrente...');
      await sendRecorrenteChangeNotification(
        currentBudget.id,
        currentUser.uid,
        testRecorrente,
        'new_recorrente'
      );
      console.log('‚úÖ [DebugRecurringCategory] Notifica√ß√£o de recorrente enviada');

    } catch (error) {
      console.error('‚ùå [DebugRecurringCategory] Erro ao enviar notifica√ß√£o de recorrente:', error);
    }

    // 3. Aguardar e verificar se as notifica√ß√µes chegaram
    console.log('‚è∞ [DebugRecurringCategory] Aguardando notifica√ß√µes chegarem...');
    setTimeout(() => {
      const notifications = window.appState?.notifications || [];
      const recentNotifications = notifications.filter(n =>
        n.type === 'category_added' || n.type === 'new_recorrente'
      ).slice(-2);

      console.log('üìß [DebugRecurringCategory] Notifica√ß√µes recentes encontradas:', recentNotifications.length);
      recentNotifications.forEach(notif => {
        console.log('üìã [DebugRecurringCategory] Notifica√ß√£o:', {
          id: notif.id,
          type: notif.type,
          read: notif.read,
          createdAt: notif.createdAt
        });
      });

      if (recentNotifications.length === 0) {
        console.warn('‚ö†Ô∏è [DebugRecurringCategory] Nenhuma notifica√ß√£o recente encontrada');
        console.log('üìä [DebugRecurringCategory] Total de notifica√ß√µes:', notifications.length);
      }
    }, 3000);

    // 4. Testar se o modal est√° funcionando
    console.log('üì± [DebugRecurringCategory] === TESTE DO MODAL ===');
    if (window.eventBus) {
      const testModalNotification = {
        id: 'test-modal-recurring-category',
        type: 'category_added',
        message: 'Teste de modal para categoria',
        createdAt: new Date(),
        read: false,
        senderName: 'Sistema de Teste',
        budgetName: currentBudget.nome,
        categoryNome: 'Categoria de Teste',
        categoryDescricao: 'Descri√ß√£o da categoria',
        categoryCor: '#ff0000',
        categoryTipo: 'expense',
        categoryLimite: 1000
      };

      console.log('üì§ [DebugRecurringCategory] Emitindo evento para modal...');
      window.eventBus.emit('notification:show-modal', testModalNotification);
      console.log('‚úÖ [DebugRecurringCategory] Evento emitido');

      // Verificar se o modal apareceu
      setTimeout(() => {
        const modal = document.getElementById('notification-modal');
        if (modal && modal.style.display !== 'none') {
          console.log('‚úÖ [DebugRecurringCategory] Modal apareceu corretamente');
        } else {
          console.warn('‚ö†Ô∏è [DebugRecurringCategory] Modal n√£o apareceu');
        }
      }, 1000);
    }

    console.log('‚úÖ [DebugRecurringCategory] Teste de recorrentes e categorias finalizado!');

  } catch (error) {
    console.error('‚ùå [DebugRecurringCategory] Erro durante teste:', error);
    console.error('‚ùå [DebugRecurringCategory] Stack trace:', error.stack);
  }
}

// Fun√ß√£o para teste detalhado de cada etapa das notifica√ß√µes
export async function debugDetailedNotificationTest() {
  console.log('üî¨ [DebugDetailed] Iniciando teste detalhado de notifica√ß√µes...');

  try {
    const currentUser = window.appState?.currentUser;
    const currentBudget = window.appState?.currentBudget;

    if (!currentUser || !currentBudget) {
      console.error('‚ùå [DebugDetailed] Usu√°rio ou or√ßamento n√£o encontrado');
      console.log('üìä [DebugDetailed] Estado atual:', {
        hasUser: !!currentUser,
        hasBudget: !!currentBudget,
        userId: currentUser?.uid,
        budgetId: currentBudget?.id
      });
      return;
    }

    console.log('üìä [DebugDetailed] Estado inicial:', {
      userId: currentUser.uid,
      budgetId: currentBudget.id,
      budgetName: currentBudget.nome,
      usuariosPermitidos: currentBudget.usuariosPermitidos
    });

    // 1. Testar importa√ß√£o das fun√ß√µes
    console.log('üì¶ [DebugDetailed] === TESTE DE IMPORTA√á√ÉO ===');
    try {
      const { sendCategoryChangeNotification, sendRecorrenteChangeNotification } = await import('@features/notifications/NotificationService.js');
      console.log('‚úÖ [DebugDetailed] Fun√ß√µes importadas:', {
        hasCategoryFunction: !!sendCategoryChangeNotification,
        hasRecorrenteFunction: !!sendRecorrenteChangeNotification
      });
    } catch (error) {
      console.error('‚ùå [DebugDetailed] Erro ao importar fun√ß√µes:', error);
      return;
    }

    // 2. Testar cria√ß√£o direta de notifica√ß√£o no Firebase
    console.log('üî• [DebugDetailed] === TESTE DIRETO NO FIREBASE ===');
    try {
      const { create: createNotification } = await import('@data/repositories/notificationsRepo.js');
      const { serverTimestamp } = await import('firebase/firestore');

      const directNotification = {
        type: 'test_direct_firebase',
        budgetId: currentBudget.id,
        budgetName: currentBudget.nome,
        senderUid: currentUser.uid,
        senderName: currentUser.displayName || 'Usu√°rio',
        message: 'Teste direto no Firebase',
        createdAt: serverTimestamp(),
        read: false,
        recipientUid: currentUser.uid,
      };

      console.log('üìù [DebugDetailed] Criando notifica√ß√£o direta...');
      const notificationId = await createNotification(directNotification);
      console.log('‚úÖ [DebugDetailed] Notifica√ß√£o direta criada com ID:', notificationId);

      // Aguardar e verificar se chegou
      setTimeout(() => {
        const notifications = window.appState?.notifications || [];
        const directNotif = notifications.find(n => n.id === notificationId);
        if (directNotif) {
          console.log('‚úÖ [DebugDetailed] Notifica√ß√£o direta chegou ao estado local');
        } else {
          console.warn('‚ö†Ô∏è [DebugDetailed] Notifica√ß√£o direta n√£o chegou ao estado local');
        }
      }, 2000);

    } catch (error) {
      console.error('‚ùå [DebugDetailed] Erro ao criar notifica√ß√£o direta:', error);
    }

    // 3. Testar fun√ß√£o de categoria com logs detalhados
    console.log('üìÅ [DebugDetailed] === TESTE DE CATEGORIA DETALHADO ===');
    try {
      const { sendCategoryChangeNotification } = await import('@features/notifications/NotificationService.js');

      const testCategory = {
        id: 'test-category-detailed-' + Date.now(),
        nome: 'Categoria Detalhada',
        descricao: 'Descri√ß√£o da categoria detalhada',
        cor: '#00ff00',
        tipo: 'expense',
        limite: 2000,
        budgetId: currentBudget.id,
        userId: currentUser.uid
      };

      console.log('üìù [DebugDetailed] Dados da categoria de teste:', testCategory);
      console.log('üì§ [DebugDetailed] Chamando sendCategoryChangeNotification...');

      await sendCategoryChangeNotification(
        currentBudget.id,
        currentUser.uid,
        testCategory,
        'category_added'
      );

      console.log('‚úÖ [DebugDetailed] sendCategoryChangeNotification executada sem erro');

    } catch (error) {
      console.error('‚ùå [DebugDetailed] Erro em sendCategoryChangeNotification:', error);
      console.error('‚ùå [DebugDetailed] Stack trace:', error.stack);
    }

    // 4. Testar fun√ß√£o de recorrente com logs detalhados
    console.log('üîÑ [DebugDetailed] === TESTE DE RECORRENTE DETALHADO ===');
    try {
      const { sendRecorrenteChangeNotification } = await import('@features/notifications/NotificationService.js');

      const testRecorrente = {
        id: 'test-recorrente-detailed-' + Date.now(),
        nome: 'Recorrente Detalhado',
        valor: 750,
        frequencia: 'mensal',
        categoria: 'Alimenta√ß√£o',
        descricao: 'Descri√ß√£o do recorrente detalhado',
        parcelasRestantes: 8,
        parcelasTotal: 10,
        budgetId: currentBudget.id,
        userId: currentUser.uid
      };

      console.log('üìù [DebugDetailed] Dados do recorrente de teste:', testRecorrente);
      console.log('üì§ [DebugDetailed] Chamando sendRecorrenteChangeNotification...');

      await sendRecorrenteChangeNotification(
        currentBudget.id,
        currentUser.uid,
        testRecorrente,
        'new_recorrente'
      );

      console.log('‚úÖ [DebugDetailed] sendRecorrenteChangeNotification executada sem erro');

    } catch (error) {
      console.error('‚ùå [DebugDetailed] Erro em sendRecorrenteChangeNotification:', error);
      console.error('‚ùå [DebugDetailed] Stack trace:', error.stack);
    }

    // 5. Verificar estado das notifica√ß√µes ap√≥s testes
    console.log('‚è∞ [DebugDetailed] Aguardando 5 segundos para verificar notifica√ß√µes...');
    setTimeout(() => {
      const notifications = window.appState?.notifications || [];
      console.log('üìß [DebugDetailed] Estado final das notifica√ß√µes:', {
        total: notifications.length,
        recent: notifications.slice(-5).map(n => ({
          id: n.id,
          type: n.type,
          read: n.read,
          createdAt: n.createdAt
        }))
      });

      // Verificar se alguma das notifica√ß√µes de teste chegou
      const testNotifications = notifications.filter(n =>
        n.type === 'test_direct_firebase' ||
        n.type === 'category_added' ||
        n.type === 'new_recorrente'
      );

      console.log('üß™ [DebugDetailed] Notifica√ß√µes de teste encontradas:', testNotifications.length);
      testNotifications.forEach(notif => {
        console.log('üìã [DebugDetailed] Notifica√ß√£o de teste:', {
          id: notif.id,
          type: notif.type,
          read: notif.read,
          createdAt: notif.createdAt
        });
      });

      if (testNotifications.length === 0) {
        console.warn('‚ö†Ô∏è [DebugDetailed] NENHUMA notifica√ß√£o de teste chegou ao estado local!');
        console.log('üîç [DebugDetailed] Poss√≠veis causas:');
        console.log('  - Listener de notifica√ß√µes n√£o est√° funcionando');
        console.log('  - Firebase n√£o est√° salvando as notifica√ß√µes');
        console.log('  - Problema de sincroniza√ß√£o');
        console.log('  - Erro nas fun√ß√µes de notifica√ß√£o');
      }
    }, 5000);

    // 6. Testar EventBus diretamente
    console.log('üì° [DebugDetailed] === TESTE DO EVENTBUS ===');
    if (window.eventBus) {
      console.log('‚úÖ [DebugDetailed] EventBus encontrado');

      // Testar evento simples
      let eventReceived = false;
      const testListener = (data) => {
        console.log('‚úÖ [DebugDetailed] Evento de teste recebido:', data);
        eventReceived = true;
      };

      window.eventBus.on('test-detailed-notification', testListener);
      window.eventBus.emit('test-detailed-notification', {
        message: 'Teste detalhado',
        timestamp: Date.now()
      });

      setTimeout(() => {
        if (eventReceived) {
          console.log('‚úÖ [DebugDetailed] EventBus est√° funcionando');
        } else {
          console.warn('‚ö†Ô∏è [DebugDetailed] EventBus pode n√£o estar funcionando');
        }
        window.eventBus.off('test-detailed-notification', testListener);
      }, 1000);

    } else {
      console.error('‚ùå [DebugDetailed] EventBus n√£o encontrado');
    }

    console.log('‚úÖ [DebugDetailed] Teste detalhado finalizado!');

  } catch (error) {
    console.error('‚ùå [DebugDetailed] Erro durante teste detalhado:', error);
    console.error('‚ùå [DebugDetailed] Stack trace:', error.stack);
  }
}

// Fun√ß√£o para debug espec√≠fico da descri√ß√£o da categoria
export async function debugCategoryDescriptionIssue() {
  console.log('üîç [DebugCategoryDesc] Investigando problema da descri√ß√£o da categoria...');

  try {
    const currentUser = window.appState?.currentUser;
    const currentBudget = window.appState?.currentBudget;

    if (!currentUser || !currentBudget) {
      console.error('‚ùå [DebugCategoryDesc] Usu√°rio ou or√ßamento n√£o encontrado');
      return;
    }

    // 1. Testar cria√ß√£o de categoria com descri√ß√£o
    console.log('üìÅ [DebugCategoryDesc] === TESTE DE CATEGORIA COM DESCRI√á√ÉO ===');
    try {
      const { sendCategoryChangeNotification } = await import('@features/notifications/NotificationService.js');

      const testCategory = {
        id: 'test-category-desc-' + Date.now(),
        nome: 'Categoria com Descri√ß√£o',
        descricao: 'Esta √© uma descri√ß√£o de teste para verificar se aparece no modal',
        cor: '#ff6b6b',
        tipo: 'expense',
        limite: 1500,
        budgetId: currentBudget.id,
        userId: currentUser.uid
      };

      console.log('üìù [DebugCategoryDesc] Dados da categoria de teste:', testCategory);
      console.log('üì§ [DebugCategoryDesc] Enviando notifica√ß√£o...');

      await sendCategoryChangeNotification(
        currentBudget.id,
        currentUser.uid,
        testCategory,
        'category_added'
      );

      console.log('‚úÖ [DebugCategoryDesc] Notifica√ß√£o enviada');

    } catch (error) {
      console.error('‚ùå [DebugCategoryDesc] Erro ao enviar notifica√ß√£o:', error);
    }

    // 2. Aguardar e verificar se a notifica√ß√£o chegou
    console.log('‚è∞ [DebugCategoryDesc] Aguardando notifica√ß√£o chegar...');
    setTimeout(() => {
      const notifications = window.appState?.notifications || [];
      const categoryNotification = notifications.find(n =>
        n.type === 'category_added' && n.categoryNome === 'Categoria com Descri√ß√£o'
      );

      if (categoryNotification) {
        console.log('‚úÖ [DebugCategoryDesc] Notifica√ß√£o encontrada:', categoryNotification);
        console.log('üìã [DebugCategoryDesc] Dados da notifica√ß√£o:', {
          id: categoryNotification.id,
          type: categoryNotification.type,
          categoryNome: categoryNotification.categoryNome,
          categoryDescription: categoryNotification.categoryDescription,
          categoryDescricao: categoryNotification.categoryDescricao, // Verificar se h√° outro campo
          categoryTipo: categoryNotification.categoryTipo,
          categoryLimite: categoryNotification.categoryLimite,
          categoryColor: categoryNotification.categoryColor
        });

        // 3. Testar modal diretamente
        console.log('üì± [DebugCategoryDesc] Testando modal diretamente...');
        if (window.eventBus) {
          window.eventBus.emit('notification:show-modal', categoryNotification);
          console.log('üì§ [DebugCategoryDesc] Evento de modal emitido');
        }

      } else {
        console.warn('‚ö†Ô∏è [DebugCategoryDesc] Notifica√ß√£o n√£o encontrada');
        console.log('üìä [DebugCategoryDesc] Notifica√ß√µes dispon√≠veis:', notifications.length);
        notifications.forEach(n => {
          if (n.type === 'category_added') {
            console.log('üìã [DebugCategoryDesc] Notifica√ß√£o de categoria encontrada:', {
              id: n.id,
              categoryNome: n.categoryNome,
              categoryDescription: n.categoryDescription
            });
          }
        });
      }
    }, 3000);

    // 4. Verificar se h√° algum problema com o campo descri√ß√£o
    console.log('üîç [DebugCategoryDesc] === VERIFICA√á√ÉO DE CAMPOS ===');
    console.log('üìä [DebugCategoryDesc] Verificando se h√° inconsist√™ncia nos nomes dos campos...');

    // Verificar se o campo √© 'descricao' ou 'description'
    const testData = {
      descricao: 'Teste descricao',
      description: 'Teste description'
    };

    console.log('üìù [DebugCategoryDesc] Campos de teste:', testData);
    console.log('üîç [DebugCategoryDesc] Verificando mapeamento...');
    console.log('  - categoryData?.descricao:', testData.descricao);
    console.log('  - categoryData?.description:', testData.description);

    console.log('‚úÖ [DebugCategoryDesc] Debug da descri√ß√£o da categoria finalizado!');

  } catch (error) {
    console.error('‚ùå [DebugCategoryDesc] Erro durante debug:', error);
    console.error('‚ùå [DebugCategoryDesc] Stack trace:', error.stack);
  }
}

// Fun√ß√£o para verificar por que o modal parou de aparecer
export async function debugModalNotAppearing() {
  console.log('üîç [DebugModalNotAppearing] Investigando por que o modal parou de aparecer...');

  try {
    // 1. Verificar estado b√°sico
    console.log('üìä [DebugModalNotAppearing] === ESTADO B√ÅSICO ===');
    console.log('App State:', {
      hasAppState: !!window.appState,
      hasCurrentUser: !!window.appState?.currentUser,
      hasCurrentBudget: !!window.appState?.currentBudget,
      currentUserId: window.appState?.currentUser?.uid,
      currentBudgetId: window.appState?.currentBudget?.id
    });

    // 2. Verificar EventBus
    console.log('üì° [DebugModalNotAppearing] === EVENTBUS ===');
    console.log('EventBus:', {
      exists: !!window.eventBus,
      hasOn: !!window.eventBus?.on,
      hasEmit: !!window.eventBus?.emit
    });

    // 3. Verificar listener global
    console.log('üéß [DebugModalNotAppearing] === LISTENER GLOBAL ===');
    console.log('Listener Global:', {
      bound: !!window.__notificationModalListenerBound,
      eventBusExists: !!window.eventBus
    });

    // 4. Verificar localStorage
    console.log('üíæ [DebugModalNotAppearing] === LOCALSTORAGE ===');
    const useModal = localStorage.getItem('notification_use_modal');
    console.log('notification_use_modal:', useModal);
    console.log('useModal !== false:', useModal !== 'false');

    // 5. Verificar controller de notifica√ß√µes
    console.log('üëÇ [DebugModalNotAppearing] === CONTROLLER DE NOTIFICA√á√ïES ===');
    const notifCtl = window.__notifCtl;
    console.log('Controller:', {
      exists: !!notifCtl,
      hasUnsub: !!notifCtl?.unsub,
      currentUid: notifCtl?.uid,
      lastIdsCount: notifCtl?.lastIds?.size || 0
    });

    // 6. Verificar estado das notifica√ß√µes
    console.log('üìß [DebugModalNotAppearing] === ESTADO DAS NOTIFICA√á√ïES ===');
    const notifications = window.appState?.notifications || [];
    console.log('Notifica√ß√µes:', {
      count: notifications.length,
      unreadCount: notifications.filter(n => !n.read).length,
      recent: notifications.slice(-3).map(n => ({ id: n.id, type: n.type, read: n.read }))
    });

    // 7. Testar EventBus diretamente
    console.log('üì° [DebugModalNotAppearing] === TESTE DO EVENTBUS ===');
    if (window.eventBus) {
      console.log('‚úÖ [DebugModalNotAppearing] EventBus encontrado, testando...');

      // Testar evento simples
      let eventReceived = false;
      const testListener = (data) => {
        console.log('‚úÖ [DebugModalNotAppearing] Evento de teste recebido:', data);
        eventReceived = true;
      };

      window.eventBus.on('test-modal-not-appearing', testListener);
      window.eventBus.emit('test-modal-not-appearing', {
        message: 'Teste do modal n√£o aparecendo',
        timestamp: Date.now()
      });

      setTimeout(() => {
        if (eventReceived) {
          console.log('‚úÖ [DebugModalNotAppearing] EventBus est√° funcionando');
        } else {
          console.warn('‚ö†Ô∏è [DebugModalNotAppearing] EventBus pode n√£o estar funcionando');
        }
        window.eventBus.off('test-modal-not-appearing', testListener);
      }, 1000);

      // Testar evento de notifica√ß√£o
      console.log('üì± [DebugModalNotAppearing] Testando evento de notifica√ß√£o...');
      const testNotificationEvent = {
        id: 'test-modal-not-appearing',
        type: 'test_notification',
        message: 'Teste do modal n√£o aparecendo',
        createdAt: new Date(),
        read: false,
        senderName: 'Sistema de Teste',
        budgetName: 'Or√ßamento de Teste'
      };

      window.eventBus.emit('notification:show-modal', testNotificationEvent);
      console.log('üì§ [DebugModalNotAppearing] Evento notification:show-modal emitido');

      // Verificar se o modal apareceu
      setTimeout(() => {
        const modal = document.getElementById('notification-modal');
        if (modal && modal.style.display !== 'none') {
          console.log('‚úÖ [DebugModalNotAppearing] Modal apareceu corretamente');
        } else {
          console.warn('‚ö†Ô∏è [DebugModalNotAppearing] Modal n√£o apareceu');
          console.log('üìä [DebugModalNotAppearing] Estado do modal:', {
            exists: !!modal,
            visible: modal ? modal.style.display !== 'none' : false,
            hasContent: modal ? modal.innerHTML.length > 0 : false
          });
        }
      }, 2000);

    } else {
      console.error('‚ùå [DebugModalNotAppearing] EventBus n√£o encontrado');
    }

    // 8. Testar cria√ß√£o de notifica√ß√£o
    console.log('üß™ [DebugModalNotAppearing] === TESTE DE CRIA√á√ÉO DE NOTIFICA√á√ÉO ===');
    try {
      const { create: createNotification } = await import('@data/repositories/notificationsRepo.js');
      const { serverTimestamp } = await import('firebase/firestore');

      const testNotification = {
        type: 'test_notification',
        budgetId: window.appState?.currentBudget?.id,
        budgetName: window.appState?.currentBudget?.nome || 'Or√ßamento',
        senderUid: window.appState?.currentUser?.uid,
        senderName: window.appState?.currentUser?.displayName || 'Usu√°rio',
        message: 'Teste do modal n√£o aparecendo',
        createdAt: serverTimestamp(),
        read: false,
        recipientUid: window.appState?.currentUser?.uid,
      };

      console.log('üìù [DebugModalNotAppearing] Criando notifica√ß√£o de teste...');
      const notificationId = await createNotification(testNotification);
      console.log('‚úÖ [DebugModalNotAppearing] Notifica√ß√£o criada com ID:', notificationId);

      // Aguardar e verificar se chegou
      setTimeout(() => {
        const notifications = window.appState?.notifications || [];
        const newNotification = notifications.find(n => n.id === notificationId);
        if (newNotification) {
          console.log('‚úÖ [DebugModalNotAppearing] Notifica√ß√£o encontrada no estado local:', newNotification);
        } else {
          console.warn('‚ö†Ô∏è [DebugModalNotAppearing] Notifica√ß√£o n√£o encontrada no estado local');
        }
      }, 3000);

    } catch (error) {
      console.error('‚ùå [DebugModalNotAppearing] Erro ao criar notifica√ß√£o de teste:', error);
    }

    console.log('‚úÖ [DebugModalNotAppearing] Investiga√ß√£o finalizada!');

  } catch (error) {
    console.error('‚ùå [DebugModalNotAppearing] Erro durante investiga√ß√£o:', error);
    console.error('‚ùå [DebugModalNotAppearing] Stack trace:', error.stack);
  }
}


// Fun√ß√£o para testar notifica√ß√£o de categoria com descri√ß√£o
export async function debugCreateCategoryNotification() {
  console.log('üìÅ [DebugCategory] Criando notifica√ß√£o de categoria de teste...');

  try {
    const currentUser = window.appState?.currentUser;
    const currentBudget = window.appState?.currentBudget;

    if (!currentUser?.uid || !currentBudget?.id) {
      console.error('‚ùå [DebugCategory] Usu√°rio ou or√ßamento n√£o encontrado');
      return;
    }

    const { create: createNotification } = await import('@data/repositories/notificationsRepo.js');
    const { serverTimestamp } = await import('firebase/firestore');

    const testNotification = {
      type: 'category_added',
      budgetId: currentBudget.id,
      budgetName: currentBudget.nome || 'Or√ßamento',
      senderUid: currentUser.uid,
      senderName: currentUser.displayName || currentUser.email || 'Usu√°rio',
      categoryId: 'test-category-id',
      categoryNome: 'Categoria de Teste',
      categoryTipo: 'despesa',
      categoryLimite: 500.00,
      categoryDescription: 'Esta √© uma categoria de teste com descri√ß√£o',
      categoryColor: '#3b82f6',
      createdAt: serverTimestamp(),
      read: false,
      recipientUid: currentUser.uid,
    };

    console.log('üìù [DebugCategory] Dados da notifica√ß√£o:', testNotification);

    const notificationId = await createNotification(testNotification);
    console.log('‚úÖ [DebugCategory] Notifica√ß√£o de categoria criada com ID:', notificationId);

    // Aguardar um pouco e verificar se chegou
    setTimeout(() => {
      const notifications = window.appState?.notifications || [];
      const newNotification = notifications.find(n => n.id === notificationId);
      if (newNotification) {
        console.log('‚úÖ [DebugCategory] Notifica√ß√£o encontrada no estado local:', newNotification);
        console.log('üìù [DebugCategory] Descri√ß√£o da categoria:', newNotification.categoryDescription);
      } else {
        console.warn('‚ö†Ô∏è [DebugCategory] Notifica√ß√£o n√£o encontrada no estado local ainda');
      }
    }, 2000);

  } catch (error) {
    console.error('‚ùå [DebugCategory] Erro ao criar notifica√ß√£o de categoria:', error);
  }
}

// Fun√ß√£o para testar integra√ß√£o completa de recorrentes
export async function debugTestRecorrenteIntegration() {
  console.log('üîÑ [DebugIntegration] Testando integra√ß√£o completa de recorrentes...');

  try {
    const currentUser = window.appState?.currentUser;
    const currentBudget = window.appState?.currentBudget;

    if (!currentUser?.uid || !currentBudget?.id) {
      console.error('‚ùå [DebugIntegration] Usu√°rio ou or√ßamento n√£o encontrado');
      return;
    }

    // Importar o servi√ßo de recorrentes
    const { addRecorrente, updateRecorrente, deleteRecorrente } = await import('@features/recorrentes/service.js');

    console.log('üìù [DebugIntegration] Criando despesa recorrente de teste...');

    // 1. Criar uma despesa recorrente
    const dadosRecorrente = {
      nome: 'Teste de Integra√ß√£o',
      valor: 200.00,
      frequencia: 'Mensal',
      categoria: 'Teste',
      descricao: 'Despesa recorrente para testar integra√ß√£o de notifica√ß√µes',
      parcelasTotal: 12,
      parcelasRestantes: 12,
      efetivarMesAtual: false
    };

    const recorrenteId = await addRecorrente(currentUser.uid, currentBudget.id, dadosRecorrente);
    console.log('‚úÖ [DebugIntegration] Despesa recorrente criada com ID:', recorrenteId);

    // Aguardar um pouco para a notifica√ß√£o ser processada
    await new Promise(resolve => setTimeout(resolve, 2000));

    console.log('üìù [DebugIntegration] Atualizando despesa recorrente...');

    // 2. Atualizar a despesa recorrente
    const dadosAtualizacao = {
      ...dadosRecorrente,
      valor: 250.00,
      nome: 'Teste de Integra√ß√£o Atualizado',
      budgetId: currentBudget.id
    };

    await updateRecorrente(currentUser.uid, recorrenteId, dadosAtualizacao);
    console.log('‚úÖ [DebugIntegration] Despesa recorrente atualizada');

    // Aguardar um pouco para a notifica√ß√£o ser processada
    await new Promise(resolve => setTimeout(resolve, 2000));

    console.log('üìù [DebugIntegration] Excluindo despesa recorrente...');

    // 3. Excluir a despesa recorrente
    await deleteRecorrente(currentUser.uid, recorrenteId);
    console.log('‚úÖ [DebugIntegration] Despesa recorrente exclu√≠da');

    console.log('üéâ [DebugIntegration] Teste de integra√ß√£o completo! Verifique se as notifica√ß√µes apareceram no modal.');

  } catch (error) {
    console.error('‚ùå [DebugIntegration] Erro durante teste de integra√ß√£o:', error);
  }
}

// Exportar fun√ß√µes para uso global
window.debugNotificationSystem = debugNotificationSystem;
window.debugSharedNotificationTest = debugSharedNotificationTest;
window.debugCheckOtherUserNotifications = debugCheckOtherUserNotifications;
window.debugTestModal = debugTestModal;
window.debugNotificationState = debugNotificationState;
window.debugCreateTestNotification = debugCreateTestNotification;
window.debugCreateRecorrenteNotification = debugCreateRecorrenteNotification;
window.debugModalStatus = debugModalStatus;
window.debugTestRecorrenteIntegration = debugTestRecorrenteIntegration;
window.debugTestModalDirect = debugTestModalDirect;
window.debugTestEventBus = debugTestEventBus;
window.debugCreateCategoryNotification = debugCreateCategoryNotification;
window.debugCheckNotificationSystem = debugCheckNotificationSystem;
window.debugTestTransactionNotification = debugTestTransactionNotification;
window.debugTestRecurringEditDelete = debugTestRecurringEditDelete;
window.debugFullNotificationDiagnosis = debugFullNotificationDiagnosis;
window.debugTestEventBusSystem = debugTestEventBusSystem;
window.debugTestRecurringNotificationComplete = debugTestRecurringNotificationComplete;
window.debugTestModalDirectly = debugTestModalDirectly;
window.debugCompleteSystemDiagnosis = debugCompleteSystemDiagnosis;
window.debugTestRecurringAndCategoryNotifications = debugTestRecurringAndCategoryNotifications;
window.debugDetailedNotificationTest = debugDetailedNotificationTest;
window.debugCategoryDescriptionIssue = debugCategoryDescriptionIssue;
window.debugModalNotAppearing = debugModalNotAppearing;

console.log('üîß [DebugNotifications] Fun√ß√µes de debug carregadas:');
console.log('  - debugNotificationSystem() - Debug completo do sistema');
console.log('  - debugSharedNotificationTest() - Teste de envio para compartilhados');
console.log('  - debugCheckOtherUserNotifications() - Verificar notifica√ß√µes de outros usu√°rios');
console.log('  - debugTestModal() - Testar modal manualmente');
console.log('  - debugNotificationState() - Verificar estado atual');
console.log('  - debugCreateTestNotification() - Criar notifica√ß√£o de teste manualmente');
console.log('  - debugCreateRecorrenteNotification() - Criar notifica√ß√£o de recorrente de teste');
console.log('  - debugModalStatus() - Verificar status do modal');
console.log('  - debugTestRecorrenteIntegration() - Testar integra√ß√£o completa de recorrentes');
console.log('  - debugTestModalDirect() - Testar modal diretamente');
console.log('  - debugTestEventBus() - Testar EventBus diretamente');
console.log('  - debugCreateCategoryNotification() - Criar notifica√ß√£o de categoria de teste');
console.log('  - debugCheckNotificationSystem() - Verificar se o sistema est√° funcionando');
console.log('  - debugTestTransactionNotification() - Testar notifica√ß√£o de transa√ß√£o');
console.log('  - debugTestRecurringEditDelete() - Testar notifica√ß√µes de edi√ß√£o e exclus√£o de recorrentes');
console.log('  - debugFullNotificationDiagnosis() - Diagn√≥stico completo do sistema de notifica√ß√µes');
console.log('  - debugTestEventBusSystem() - Testar sistema de EventBus e eventos');
console.log('  - debugTestRecurringNotificationComplete() - Testar notifica√ß√£o de recorrente completa');
console.log('  - debugTestModalDirectly() - Testar modal diretamente');
console.log('  - debugCompleteSystemDiagnosis() - Diagn√≥stico completo do sistema de notifica√ß√µes e modal');
console.log('  - debugTestRecurringAndCategoryNotifications() - Testar notifica√ß√µes de recorrentes e categorias');
console.log('  - debugDetailedNotificationTest() - Teste detalhado de cada etapa das notifica√ß√µes');
console.log('  - debugCategoryDescriptionIssue() - Debug espec√≠fico da descri√ß√£o da categoria no modal');
console.log('  - debugModalNotAppearing() - Investigar por que o modal de notifica√ß√£o parou de aparecer');
console.log('  - debugProductionModal() - Diagn√≥stico espec√≠fico para produ√ß√£o');
console.log('  - debugModalWhenNotificationsArrive() - Testar modal quando notifica√ß√µes chegam mas n√£o aparecem');
console.log('  - debugCatchUpSystem() - Testar sistema de catch-up de notifica√ß√µes');

// Fun√ß√£o de debug espec√≠fica para testar o modal quando notifica√ß√µes chegam mas n√£o aparecem
async function debugModalWhenNotificationsArrive() {
  console.log('üîç [Debug] Testando modal quando notifica√ß√µes chegam mas n√£o aparecem...');

  try {
    // 1. Verificar se o EventBus est√° funcionando
    console.log('1Ô∏è‚É£ Verificando EventBus...');
    if (typeof window.eventBus === 'undefined') {
      console.error('‚ùå EventBus n√£o est√° dispon√≠vel globalmente');
      return;
    }
    console.log('‚úÖ EventBus dispon√≠vel:', typeof window.eventBus);

    // 2. Verificar se o listener est√° configurado
    console.log('2Ô∏è‚É£ Verificando listener notification:show-modal...');
    const hasListener = window.__notificationModalListenerBound;
    console.log('Listener configurado:', hasListener);

    // 3. Verificar se o modal pode ser criado
    console.log('3Ô∏è‚É£ Testando cria√ß√£o do modal...');
    const { getNotificationModal } = await import('@features/notifications/ui/NotificationModal.js');
    const modal = getNotificationModal();
    console.log('Modal obtido:', !!modal);

    // 4. Verificar se o modal est√° no DOM
    console.log('4Ô∏è‚É£ Verificando modal no DOM...');
    const existingModal = document.getElementById('notification-modal');
    console.log('Modal no DOM:', !!existingModal);

    // 5. Verificar CSS
    console.log('5Ô∏è‚É£ Verificando CSS...');
    const cssLink = document.querySelector('link[href*="notification-modal.css"]');
    console.log('CSS carregado:', !!cssLink);

    // 6. Testar evento diretamente
    console.log('6Ô∏è‚É£ Testando evento diretamente...');
    const testNotification = {
      id: 'test-' + Date.now(),
      type: 'test_notification',
      message: 'Teste de modal quando notifica√ß√µes chegam',
      createdAt: new Date(),
      read: false
    };

    console.log('Emitindo evento notification:show-modal...');
    window.eventBus.emit('notification:show-modal', testNotification);

    // 7. Verificar se o modal apareceu
    setTimeout(() => {
      console.log('7Ô∏è‚É£ Verificando se modal apareceu...');
      const modalAfter = document.getElementById('notification-modal');
      if (modalAfter) {
        const styles = window.getComputedStyle(modalAfter);
        console.log('Modal ap√≥s evento:', {
          display: styles.display,
          opacity: styles.opacity,
          visibility: styles.visibility,
          zIndex: styles.zIndex
        });
      } else {
        console.error('‚ùå Modal n√£o foi criado ap√≥s evento');
      }
    }, 1000);

  } catch (error) {
    console.error('‚ùå Erro no debug:', error);
  }
}

// Fun√ß√£o de debug para testar o sistema de catch-up
async function debugCatchUpSystem() {
  console.log('üîç [Debug] Testando sistema de catch-up de notifica√ß√µes...');
  try {
    console.log('1Ô∏è‚É£ Verificando sistema de catch-up...');
    const { getCatchUpNotifications } = await import('@features/notifications/CatchUpNotifications.js');
    const catchUp = getCatchUpNotifications();
    console.log('Sistema de catch-up obtido:', !!catchUp);

    console.log('2Ô∏è‚É£ Verificando usu√°rio atual...');
    const userId = catchUp.getCurrentUserId();
    console.log('ID do usu√°rio:', userId);

    if (!userId) {
      console.error('‚ùå Usu√°rio n√£o autenticado');
      return;
    }

    console.log('3Ô∏è‚É£ Verificando notifica√ß√µes n√£o lidas...');
    const { getNotificationsRepo } = await import('@data/repositories/notificationsRepo.js');
    const notificationsRepo = getNotificationsRepo();
    const unreadNotifications = await notificationsRepo.getUnreadNotifications(userId);
    console.log('Notifica√ß√µes n√£o lidas encontradas:', unreadNotifications.length);
    console.log('Detalhes:', unreadNotifications.map(n => ({ id: n.id, type: n.type, message: n.message })));

    console.log('4Ô∏è‚É£ Testando verifica√ß√£o de notifica√ß√µes pendentes...');
    await catchUp.checkPendingNotifications();

    console.log('5Ô∏è‚É£ Verificando se modal de catch-up foi criado...');
    const catchUpModal = document.querySelector('.catch-up-modal-overlay');
    console.log('Modal de catch-up no DOM:', !!catchUpModal);

    if (catchUpModal) {
      const styles = window.getComputedStyle(catchUpModal);
      console.log('Modal de catch-up estilos:', {
        display: styles.display,
        opacity: styles.opacity,
        visibility: styles.visibility,
        zIndex: styles.zIndex
      });
    }

    console.log('‚úÖ Teste do sistema de catch-up conclu√≠do');
  } catch (error) {
    console.error('‚ùå Erro no teste do sistema de catch-up:', error);
  }
}

// Fun√ß√£o para testar o EventBus de notifica√ß√µes
export function debugTestEventBusNotifications() {
  console.log('üîß [DebugNotifications] Testando EventBus de notifica√ß√µes...');

  try {
    // Verificar se o EventBus est√° dispon√≠vel
    if (typeof window !== 'undefined' && window.eventBus) {
      console.log('‚úÖ [DebugNotifications] EventBus dispon√≠vel:', window.eventBus);

      // Testar emitindo evento de notifica√ß√£o
      const testNotification = {
        id: 'test-eventbus-' + Date.now(),
        type: 'transaction',
        title: 'Teste EventBus',
        message: 'Esta √© uma notifica√ß√£o de teste via EventBus.',
        timestamp: new Date(),
        read: false,
        data: {
          transactionId: 'test-eventbus-transaction'
        }
      };

      console.log('üîß [DebugNotifications] Emitindo evento notification:show-modal:', testNotification);
      window.eventBus.emit('notification:show-modal', testNotification);
      console.log('‚úÖ [DebugNotifications] Evento emitido com sucesso');

    } else {
      console.error('‚ùå [DebugNotifications] EventBus n√£o dispon√≠vel');
    }

  } catch (error) {
    console.error('‚ùå [DebugNotifications] Erro ao testar EventBus:', error);
  }
}

// Fun√ß√£o para simular uma notifica√ß√£o real de transa√ß√£o
export function debugTestRealTransactionNotification() {
  console.log('üîß [DebugNotifications] Simulando notifica√ß√£o real de transa√ß√£o...');

  try {
    // Verificar se o EventBus est√° dispon√≠vel
    if (typeof window !== 'undefined' && window.eventBus) {
      console.log('‚úÖ [DebugNotifications] EventBus dispon√≠vel:', window.eventBus);

      // Simular notifica√ß√£o real como seria criada pelo sistema
      const realNotification = {
        id: 'real-transaction-' + Date.now(),
        type: 'new_transaction',
        budgetId: window.appState?.currentBudget?.id || 'test-budget',
        budgetName: window.appState?.currentBudget?.nome || 'Teste',
        recipientUid: window.appState?.currentUser?.uid || 'test-user',
        senderUid: window.appState?.currentUser?.uid || 'test-user',
        title: 'Nova Transa√ß√£o',
        message: 'Uma nova transa√ß√£o foi adicionada ao or√ßamento.',
        createdAt: new Date(),
        read: false,
        data: {
          transactionId: 'real-transaction-' + Date.now(),
          amount: 100.00,
          description: 'Teste de transa√ß√£o real'
        }
      };

      console.log('üîß [DebugNotifications] Simulando notifica√ß√£o real:', realNotification);
      console.log('üîß [DebugNotifications] Emitindo evento notification:show-modal...');
      window.eventBus.emit('notification:show-modal', realNotification);
      console.log('‚úÖ [DebugNotifications] Evento de notifica√ß√£o real emitido com sucesso');

    } else {
      console.error('‚ùå [DebugNotifications] EventBus n√£o dispon√≠vel');
    }

  } catch (error) {
    console.error('‚ùå [DebugNotifications] Erro ao simular notifica√ß√£o real:', error);
  }
}

// Fun√ß√£o para verificar o status do sistema de notifica√ß√µes
export function debugCheckNotificationSystemStatus() {
  console.log('üîç [DebugNotifications] Verificando status do sistema de notifica√ß√µes...');

  try {
    // 1. Verificar EventBus
    console.log('1Ô∏è‚É£ EventBus:', {
      exists: !!window.eventBus,
      hasOn: !!(window.eventBus && window.eventBus.on),
      hasEmit: !!(window.eventBus && window.eventBus.emit)
    });

    // 2. Verificar appState
    console.log('2Ô∏è‚É£ AppState:', {
      exists: !!window.appState,
      hasCurrentUser: !!(window.appState && window.appState.currentUser),
      hasCurrentBudget: !!(window.appState && window.appState.currentBudget),
      hasNotifications: !!(window.appState && window.appState.notifications),
      notificationsCount: window.appState?.notifications?.length || 0
    });

    // 3. Verificar notificationsController
    const notifCtl = window.__notifCtl;
    console.log('3Ô∏è‚É£ NotificationsController:', {
      exists: !!notifCtl,
      hasUnsub: !!(notifCtl && notifCtl.unsub),
      uid: notifCtl?.uid,
      lastSeenAt: notifCtl?.lastSeenAt,
      lastIdsCount: notifCtl?.lastIds?.size || 0
    });

    // 4. Verificar localStorage
    console.log('4Ô∏è‚É£ LocalStorage:', {
      notification_use_modal: localStorage.getItem('notification_use_modal'),
      notification_toasts_enabled: localStorage.getItem('notification_toasts_enabled')
    });

    // 5. Verificar Service Worker
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.getRegistration().then(registration => {
        console.log('5Ô∏è‚É£ Service Worker:', {
          exists: !!registration,
          scope: registration?.scope,
          state: registration?.active?.state
        });
      });
    }

    console.log('‚úÖ [DebugNotifications] Verifica√ß√£o de status conclu√≠da');

  } catch (error) {
    console.error('‚ùå [DebugNotifications] Erro na verifica√ß√£o de status:', error);
  }
}

// Expor fun√ß√µes de debug globalmente
if (typeof window !== 'undefined') {
  window.debugEventBusAndModal = debugEventBusAndModal;
  window.debugProductionModal = debugProductionModal;
  window.debugTestModalDirectly = debugTestModalDirectly;
  window.debugFullNotificationDiagnosis = debugFullNotificationDiagnosis;
  window.debugCompleteSystemDiagnosis = debugCompleteSystemDiagnosis;
  window.debugDetailedNotificationTest = debugDetailedNotificationTest;
  window.debugTestRecurringAndCategoryNotifications = debugTestRecurringAndCategoryNotifications;
  window.debugTestEventBusSystem = debugTestEventBusSystem;
  window.debugTestRecurringNotificationComplete = debugTestRecurringNotificationComplete;
  window.debugTestTransactionNotification = debugTestTransactionNotification;
  window.debugTestRecurringEditDelete = debugTestRecurringEditDelete;
  window.debugCategoryDescriptionIssue = debugCategoryDescriptionIssue;
  window.debugModalNotAppearing = debugModalNotAppearing;
  window.debugModalWhenNotificationsArrive = debugModalWhenNotificationsArrive;
  window.debugCatchUpSystem = debugCatchUpSystem;
  window.debugTestEventBusNotifications = debugTestEventBusNotifications;
  window.debugTestRealTransactionNotification = debugTestRealTransactionNotification;
  window.debugCheckNotificationSystemStatus = debugCheckNotificationSystemStatus;
  console.log('üîß [DebugNotifications] Fun√ß√µes de debug expostas globalmente');
}

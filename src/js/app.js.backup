import '../css/styles.css';
import { Modal } from './ui/Modal.js';
import { auth, db } from './firebase.js';
import { calcularParcelaRecorrente, calcularStatusRecorrente } from '@features/recorrentes/service.js';
import * as budgetsRepo from '@data/repositories/budgetsRepo.js';
import * as transactionsRepo from '@data/repositories/transactionsRepo.js';
import * as categoriesRepo from '@data/repositories/categoriesRepo.js';
import * as invitationsRepo from '@data/repositories/invitationsRepo.js';
import { FAB } from './ui/FAB.js';
import { SwipeNavigation } from './ui/SwipeTabs.js';
import { renderAnalytics } from './ui/AnalyticsRoute.js';
import {
  getFirestore,
  collection,
  addDoc,
  getDocs,
  updateDoc,
  deleteDoc,
  doc,
  query,
  where,
  serverTimestamp,
  onSnapshot,
  setDoc,
  or,
  arrayUnion,
  getDoc,
  orderBy,
  limit,
  startAfter,
  endBefore,
  startAt,
  endAt
} from 'firebase/firestore';
import { loginWithGoogle } from './auth.js';

// Tornar Modal dispon√≠vel globalmente para utilit√°rios que usam window.Modal
if (typeof window !== 'undefined') {
  window.Modal = Modal;
}

// Pequena utilidade para atualizar o t√≠tulo da p√°gina conforme a rota atual
function updatePageTitle(path) {
  try {
    const routeNames = {
      '/dashboard': 'Dashboard',
      '/transactions': 'Transa√ß√µes',
      '/categories': 'Categorias',
      '/analytics': 'An√°lises',
      '/recorrentes': 'Recorrentes',
      '/notifications': 'Notifica√ß√µes',
      '/settings': 'Configura√ß√µes'
    };
    const title = routeNames[path] || 'Dashboard';
    // Atualiza poss√≠veis elementos de t√≠tulo no layout
    document.title = `Financeiro ‚Ä¢ ${title}`;
    const el = document.querySelector('.tab-title-highlight');
    if (el && !el.textContent.includes(title)) {
      // Mant√©m emoji se houver e atualiza label ap√≥s o espa√ßo
      const emoji = el.textContent.split(' ')[0];
      el.textContent = `${emoji} ${title}`;
    }
  } catch (e) {
    // noop
  }
}
window.updatePageTitle = updatePageTitle;

// Fun√ß√£o de compacta√ß√£o movida para globalUtils
window.applyCompactMode = () => import('@core/utils/globalUtils.js').then(m => m.applyCompactMode());

// Fun√ß√£o para atualizar o bot√£o de instala√ß√£o
window.updateInstallButton = function () {
  const installBtn = document.getElementById('install-app-btn');
  if (!installBtn) {
    return;
  }

  const isInstalled =
    window.matchMedia('(display-mode: standalone)').matches ||
    window.navigator.standalone === true;
  const hasPrompt = !!window.deferredPrompt;

  console.log(
    'üì± PWA: Atualizando bot√£o - Instalado:',
    isInstalled,
    'Prompt:',
    hasPrompt
  );

  if (isInstalled) {
    console.log('üì± PWA: Mostrando "App Instalado"');
    installBtn.innerHTML = `
      <div class="flex items-center gap-3">
        <span class="text-xl">‚úÖ</span>
        <div>
          <div class="font-medium text-gray-800 dark:text-white">App Instalado</div>
          <div class="text-sm text-gray-500 dark:text-gray-400">J√° est√° na tela inicial</div>
        </div>
      </div>
      <span class="text-green-500">‚úì</span>
    `;
    installBtn.disabled = true;
    installBtn.classList.add('opacity-50', 'cursor-not-allowed');
  } else if (hasPrompt) {
    console.log('üì± PWA: Mostrando "Instalar App"');
    installBtn.innerHTML = `
      <div class="flex items-center gap-3">
        <span class="text-xl">‚¨áÔ∏è</span>
        <div>
          <div class="font-medium text-gray-800 dark:text-white">Instalar App</div>
          <div class="text-sm text-gray-500 dark:text-gray-400">Adicionar √† tela inicial</div>
        </div>
      </div>
      <span class="text-blue-500">‚Üí</span>
    `;
    installBtn.disabled = false;
    installBtn.classList.remove('opacity-50', 'cursor-not-allowed');
  } else {
    console.log('üì± PWA: Ocultando bot√£o');
    installBtn.style.display = 'none';
  }
};

window.importBackup = function () {
  // Permite importar um backup JSON
  const input = document.createElement('input');
  input.type = 'file';
  input.accept = 'application/json';
  input.onchange = async e => {
    const file = e.target.files[0];
    if (!file) return;
    
    const text = await file.text();
    try {
      const data = JSON.parse(text);
      if (data.transactions && data.categories && data.budgets) {
        Modal({
          title: 'Importa√ß√£o de Backup (Somente Leitura)',
          content: `<div class='space-y-2'>
            <p class='text-gray-700'>O backup foi lido com sucesso, mas <b>n√£o ser√° gravado no sistema</b> por quest√µes de seguran√ßa.</p>
            <p class='text-gray-500 text-sm'>Se precisar restaurar dados, entre em contato com o suporte.</p>
            <pre class='bg-gray-100 rounded p-2 text-xs overflow-x-auto max-h-48'>${JSON.stringify(data, null, 2)}</pre>
            <button onclick='closeModal()' class='mt-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600'>Fechar</button>
          </div>`
        });
        Snackbar({
          message: 'Backup lido, mas n√£o importado. Apenas leitura.',
          type: 'info'
        });
      } else {
        Snackbar({ message: 'Arquivo de backup inv√°lido.', type: 'error' });
        alert('Arquivo de backup inv√°lido.');
      }
    } catch (err) {
      Snackbar({
        message: 'Erro ao importar backup: ' + err.message,
        type: 'error'
      });
      alert('Erro ao importar backup: ' + err.message);
    }
  };
  input.click();
};

// Fun√ß√£o para restaurar backup (importar e salvar no sistema)
window.restoreBackup = function () {
  console.log('üîç restoreBackup chamada');
  
  // Verificar se o usu√°rio est√° logado
  if (!window.appState?.currentUser) {
    console.log('‚ùå Usu√°rio n√£o logado');
    if (window.Snackbar) {
      window.Snackbar({
        message: '‚ùå Voc√™ precisa estar logado para restaurar backup.',
        type: 'error'
      });
    } else {
      alert('‚ùå Voc√™ precisa estar logado para restaurar backup.');
    }
    return;
  }

  // Verificar se h√° um or√ßamento selecionado
  if (!window.appState?.currentBudget) {
    console.log('‚ùå Nenhum or√ßamento selecionado');
    if (window.Snackbar) {
      window.Snackbar({
        message: '‚ùå Nenhum or√ßamento selecionado.',
        type: 'error'
      });
    } else {
      alert('‚ùå Nenhum or√ßamento selecionado.');
    }
    return;
  }

  console.log('‚úÖ Usu√°rio e or√ßamento OK, abrindo modal...');

  // Verificar se Modal est√° dispon√≠vel
  if (!window.Modal) {
    console.error('‚ùå Modal n√£o est√° dispon√≠vel');
    alert('Erro: Modal n√£o est√° dispon√≠vel. Tente recarregar a p√°gina.');
    return;
  }

  try {
    // Mostrar modal de confirma√ß√£o primeiro
    const confirmModal = window.Modal({
      title: 'üì• Restaurar Backup',
      content: `
        <div class='space-y-4'>
          <div class='bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg'>
            <p class='text-blue-800 dark:text-blue-200 font-medium'>Como restaurar backup:</p>
            <ol class='mt-2 text-sm text-blue-700 dark:text-blue-300 space-y-1 list-decimal list-inside'>
              <li>Clique em "Selecionar Arquivo"</li>
              <li>Escolha o arquivo JSON de backup</li>
              <li>Confirme os dados encontrados</li>
              <li>Aguarde a restaura√ß√£o</li>
            </ol>
          </div>
          
          <div class='bg-yellow-50 dark:bg-yellow-900/20 p-4 rounded-lg'>
            <p class='text-yellow-800 dark:text-yellow-200 font-medium'>‚ö†Ô∏è Aviso Importante:</p>
            <p class='text-sm text-yellow-700 dark:text-yellow-300'>
              Esta a√ß√£o ir√° substituir todos os dados atuais. 
              Certifique-se de que este √© o backup correto.
            </p>
          </div>
          
          <div class='flex gap-3'>
            <button onclick='closeModal()' class='flex-1 px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors'>
              Cancelar
            </button>
            <button onclick='window.selectBackupFile()' class='flex-1 px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors'>
              üìÅ Selecionar Arquivo
            </button>
          </div>
        </div>
      `
    });
    
    console.log('‚úÖ Modal criado com sucesso');
    document.body.appendChild(confirmModal);
    
  } catch (error) {
    console.error('‚ùå Erro ao criar modal:', error);
    alert('Erro ao abrir modal: ' + error.message);
  }
};

// Fun√ß√£o para selecionar arquivo de backup
window.selectBackupFile = function () {
  console.log('üîç selectBackupFile chamada');
  
  // Fechar modal de confirma√ß√£o
  console.log('üîç Fechando modal de confirma√ß√£o...');
  closeModal();
  
  // Aguardar um pouco para garantir que o modal foi fechado
  setTimeout(() => {
    console.log('üîç Criando input de arquivo...');
    
    // Criar input de arquivo
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = 'application/json,.json';
    input.style.display = 'none';
    
    // Adicionar ao DOM temporariamente
    document.body.appendChild(input);
    console.log('üîç Input adicionado ao DOM');
    
    // Configurar evento de mudan√ßa
    input.onchange = async e => {
      console.log('üîç Arquivo selecionado:', e.target.files[0]);
      
      const file = e.target.files[0];
      if (!file) {
        console.log('‚ùå Nenhum arquivo selecionado');
        document.body.removeChild(input);
        return;
      }

      try {
        console.log('üîç Lendo arquivo...');
        
        // Mostrar loading
        if (window.Snackbar) {
          window.Snackbar({
            message: 'üì• Lendo arquivo de backup...',
            type: 'info'
          });
        } else {
          alert('üì• Lendo arquivo de backup...');
        }

        const text = await file.text();
        console.log('üîç Arquivo lido, tamanho:', text.length);
        
        const data = JSON.parse(text);
        console.log('üîç JSON parseado com sucesso:', data);

        // Validar estrutura do backup
        if (!data.transactions || !data.categories || !data.budgets) {
          throw new Error('Arquivo de backup inv√°lido. Deve conter transa√ß√µes, categorias e or√ßamentos.');
        }

        console.log('üîç Dados v√°lidos, criando modal de preview...');

        // Verificar se Modal est√° dispon√≠vel
        if (!window.Modal) {
          console.error('‚ùå Modal n√£o est√° dispon√≠vel');
          alert('Erro: Modal n√£o est√° dispon√≠vel. Tente recarregar a p√°gina.');
          return;
        }

        // Mostrar preview dos dados
        const previewModal = window.Modal({
          title: 'üì• Confirmar Restaura√ß√£o de Backup',
          content: `
            <div class='space-y-4'>
              <div class='bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg'>
                <p class='text-blue-800 dark:text-blue-200 font-medium'>Dados encontrados no backup:</p>
                <ul class='mt-2 text-sm text-blue-700 dark:text-blue-300 space-y-1'>
                  <li>üìä <strong>${data.transactions.length}</strong> transa√ß√µes</li>
                  <li>üìÇ <strong>${data.categories.length}</strong> categorias</li>
                  <li>üìÅ <strong>${data.budgets.length}</strong> or√ßamentos</li>
                </ul>
                <p class='text-xs text-blue-600 dark:text-blue-400 mt-2'>
                  Arquivo: ${file.name} (${(file.size / 1024).toFixed(1)} KB)
                </p>
              </div>
              
              <div class='bg-yellow-50 dark:bg-yellow-900/20 p-4 rounded-lg'>
                <p class='text-yellow-800 dark:text-yellow-200 font-medium'>‚ö†Ô∏è Aviso:</p>
                <p class='text-sm text-yellow-700 dark:text-yellow-300'>
                  Esta a√ß√£o ir√° substituir todos os dados atuais. 
                  Certifique-se de que este √© o backup correto.
                </p>
              </div>
              
              <div class='flex gap-3'>
                <button onclick='closeModal()' class='flex-1 px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors'>
                  Cancelar
                </button>
                <button onclick='window.confirmRestoreBackup(${JSON.stringify(data).replace(/'/g, "\\'")})' class='flex-1 px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors'>
                  ‚úÖ Confirmar Restaura√ß√£o
                </button>
              </div>
            </div>
          `
        });
        
        console.log('üîç Modal de preview criado, adicionando ao DOM...');
        document.body.appendChild(previewModal);
        console.log('‚úÖ Modal de preview exibido com sucesso');

      } catch (err) {
        console.error('‚ùå Erro ao ler backup:', err);
        if (window.Snackbar) {
          window.Snackbar({
            message: '‚ùå Erro ao ler arquivo: ' + err.message,
            type: 'error'
          });
        } else {
          alert('‚ùå Erro ao ler arquivo: ' + err.message);
        }
      } finally {
        // Remover input do DOM
        console.log('üîç Removendo input do DOM');
        document.body.removeChild(input);
      }
    };
    
    // Trigger do clique no input
    console.log('üîç Triggerando clique no input...');
    input.click();
    console.log('üîç Clique no input executado');
  }, 300);
};

// Fun√ß√£o para confirmar e executar a restaura√ß√£o
window.confirmRestoreBackup = async function (backupData) {
  console.log('üîç confirmRestoreBackup chamada com dados:', backupData);
  
  try {
    // Fechar modal de preview
    console.log('üîç Fechando modal...');
    closeModal();

    // Mostrar loading
    console.log('üîç Mostrando loading...');
    if (window.Snackbar) {
      window.Snackbar({
        message: 'üîÑ Restaurando backup...',
        type: 'info'
      });
    } else {
      alert('üîÑ Restaurando backup...');
    }

    const userId = window.appState.currentUser.uid;
    const budgetId = window.appState.currentBudget.id;

    console.log('üîÑ Iniciando restaura√ß√£o de backup...');
    console.log('üë§ User ID:', userId);
    console.log('üìÅ Budget ID:', budgetId);
    console.log('üìä Dados do backup:', backupData);

    // Verificar se os dados s√£o v√°lidos
    if (!backupData || !backupData.categories || !backupData.transactions || !backupData.budgets) {
      throw new Error('Dados de backup inv√°lidos ou incompletos');
    }

    // 1. LIMPAR DADOS ATUAIS
    console.log('üóëÔ∏è Limpando dados atuais...');
    
    // Limpar transa√ß√µes
    console.log('üóëÔ∏è Limpando transa√ß√µes...');
    for (const transaction of window.appState.transactions) {
      try {
        await deleteTransaction(transaction.id);
        console.log(`üóëÔ∏è Transa√ß√£o "${transaction.descricao}" removida`);
      } catch (error) {
        console.error(`‚ùå Erro ao remover transa√ß√£o "${transaction.descricao}":`, error);
      }
    }
    
    // Limpar categorias
    console.log('üóëÔ∏è Limpando categorias...');
    for (const category of window.appState.categories) {
      try {
        await deleteCategory(category.id);
        console.log(`üóëÔ∏è Categoria "${category.nome}" removida`);
      } catch (error) {
        console.error(`‚ùå Erro ao remover categoria "${category.nome}":`, error);
      }
    }
    
    // Limpar recorrentes
    console.log('üóëÔ∏è Limpando recorrentes...');
    for (const recorrente of window.appState.recorrentes) {
      try {
        await deleteDespesaRecorrente(userId, recorrente.id);
        console.log(`üóëÔ∏è Recorrente "${recorrente.descricao}" removida`);
      } catch (error) {
        console.error(`‚ùå Erro ao remover recorrente "${recorrente.descricao}":`, error);
      }
    }

    // Aguardar um pouco para garantir que a limpeza foi processada
    await new Promise(resolve => setTimeout(resolve, 2000));

    let categoriasImportadas = 0;
    let transacoesImportadas = 0;
    let orcamentosImportados = 0;
    let recorrentesImportados = 0;

    // 2. Importar categorias
    console.log('üìÇ Importando categorias...');
    for (const category of backupData.categories) {
      try {
        // Remover ID original para criar novo
        const { id, ...categoryData } = category;
        categoryData.budgetId = budgetId; // Usar budget atual
        
        await addCategory(categoryData);
        categoriasImportadas++;
        console.log(`‚úÖ Categoria "${category.nome}" importada (${categoriasImportadas}/${backupData.categories.length})`);
      } catch (error) {
        console.error(`‚ùå Erro ao importar categoria "${category.nome}":`, error);
      }
    }

    // 3. Importar transa√ß√µes
    console.log('üí∏ Importando transa√ß√µes...');
    for (const transaction of backupData.transactions) {
      try {
        // Remover ID original para criar novo
        const { id, ...transactionData } = transaction;
        transactionData.budgetId = budgetId; // Usar budget atual
        
        await addTransaction(transactionData);
        transacoesImportadas++;
        console.log(`‚úÖ Transa√ß√£o "${transaction.descricao}" importada (${transacoesImportadas}/${backupData.transactions.length})`);
      } catch (error) {
        console.error(`‚ùå Erro ao importar transa√ß√£o "${transaction.descricao}":`, error);
      }
    }

    // 4. Importar or√ßamentos (se n√£o existirem)
    console.log('üìÅ Importando or√ßamentos...');
    for (const budget of backupData.budgets) {
      try {
        // Verificar se o or√ßamento j√° existe
        const existingBudget = window.appState.budgets.find(b => b.nome === budget.nome);
        if (!existingBudget) {
          const { id, ...budgetData } = budget;
          budgetData.userId = userId; // Usar usu√°rio atual
          
          await addBudget(budgetData);
          orcamentosImportados++;
          console.log(`‚úÖ Or√ßamento "${budget.nome}" importado (${orcamentosImportados}/${backupData.budgets.length})`);
        } else {
          console.log(`‚ÑπÔ∏è Or√ßamento "${budget.nome}" j√° existe, pulando...`);
        }
      } catch (error) {
        console.error(`‚ùå Erro ao importar or√ßamento "${budget.nome}":`, error);
      }
    }

    // 5. Importar recorrentes
    console.log('üîÑ Importando recorrentes...');
    if (backupData.recorrentes && backupData.recorrentes.length > 0) {
      for (const recorrente of backupData.recorrentes) {
        try {
          // Remover ID original para criar novo
          const { id, ...recorrenteData } = recorrente;
          recorrenteData.budgetId = budgetId; // Usar budget atual
          
          await addDespesaRecorrente(userId, budgetId, recorrenteData);
          recorrentesImportados++;
          console.log(`‚úÖ Recorrente "${recorrente.descricao}" importada (${recorrentesImportados}/${backupData.recorrentes.length})`);
        } catch (error) {
          console.error(`‚ùå Erro ao importar recorrente "${recorrente.descricao}":`, error);
        }
      }
    } else {
      console.log('‚ÑπÔ∏è Nenhuma recorrente encontrada no backup');
    }

    // 5. Recarregar dados
    console.log('üîÑ Recarregando dados...');
    await refreshCurrentView();

    // 6. Sucesso com detalhes
    console.log('‚úÖ Restaura√ß√£o conclu√≠da com sucesso!');
    console.log(`üìä Resumo: ${categoriasImportadas} categorias, ${transacoesImportadas} transa√ß√µes, ${orcamentosImportados} or√ßamentos, ${recorrentesImportados} recorrentes`);
    
    const mensagemSucesso = `‚úÖ Backup restaurado com sucesso!\n\nüìä Dados importados:\n‚Ä¢ ${categoriasImportadas} categorias\n‚Ä¢ ${transacoesImportadas} transa√ß√µes\n‚Ä¢ ${orcamentosImportados} or√ßamentos\n‚Ä¢ ${recorrentesImportados} recorrentes\n\nA p√°gina ser√° recarregada em 3 segundos...`;
    
    if (window.Snackbar) {
      window.Snackbar({
        message: mensagemSucesso,
        type: 'success',
        duration: 5000
      });
    } else {
      alert(mensagemSucesso);
    }

    // 7. Recarregar p√°gina ap√≥s um delay
    console.log('üîÑ Agendando recarregamento da p√°gina...');
    setTimeout(() => {
      console.log('üîÑ Recarregando p√°gina...');
      window.location.reload();
    }, 3000);

  } catch (error) {
    console.error('‚ùå Erro durante restaura√ß√£o:', error);
    const mensagemErro = `‚ùå Erro durante restaura√ß√£o:\n${error.message}`;
    
    if (window.Snackbar) {
      window.Snackbar({
        message: mensagemErro,
        type: 'error',
        duration: 5000
      });
    } else {
      alert(mensagemErro);
    }
  }
};

// Fun√ß√£o para alternar entre p√°gina de login e app
function toggleLoginPage(show) {
  const loginPage = document.getElementById('login-page');
  const appContainer = document.querySelector('.app-container');
  const loadingPage = document.getElementById('loading-page');

  if (show) {
    loginPage.style.display = 'flex';
    if (appContainer) appContainer.style.display = 'none';
    if (loadingPage) loadingPage.style.display = 'none';
  } else {
    loginPage.style.display = 'none';
    if (appContainer) appContainer.style.display = 'flex';
    if (loadingPage) loadingPage.style.display = 'none';
  }
}

// Fun√ß√£o para logout
function logout() {
  auth.signOut().then(() => {
    console.log('‚úÖ Logout realizado com sucesso');
    window.appState.currentUser = null;
    window.appState.currentBudget = null;
    window.appState.transactions = [];
    window.appState.categories = [];
    window.appState.budgets = [];
    window.appState.recorrentes = [];
    
    toggleLoginPage(true);
    window.location.hash = '';
  }).catch((error) => {
    console.error('‚ùå Erro no logout:', error);
  });
}

// Fun√ß√£o para atualizar a view atual
async function refreshCurrentView() {
  const currentPath = window.location.hash.slice(1) || '/dashboard';
  await router(currentPath);
}

// Fun√ß√£o addTransaction movida para features/transactions
const addTransaction = async (transactionData) => {
  const { addTransactionWithNotifications } = await import('@features/transactions/service.js');
  return addTransactionWithNotifications(transactionData);
};

// Fun√ß√£o updateTransaction movida para features/transactions
const updateTransaction = async (transactionId, transactionData) => {
  const { updateTransactionWithNotifications } = await import('@features/transactions/service.js');
  return updateTransactionWithNotifications(transactionId, transactionData);
};

// Fun√ß√£o deleteTransaction movida para features/transactions
const deleteTransaction = async (transactionId) => {
  const { deleteTransactionWithNotifications } = await import('@features/transactions/service.js');
  return deleteTransactionWithNotifications(transactionId);
};

// Fun√ß√£o loadTransactions movida para features/transactions
const loadTransactions = async () => {
  const { loadTransactions: loadTx } = await import('@features/transactions/service.js');
  return loadTx();
};

// Fun√ß√£o addCategory movida para features/categories
const addCategory = async (categoryData) => {
  const { addCategory: createCategory } = await import('@features/categories/service.js');
  return createCategory(categoryData);
};

// Fun√ß√£o updateCategory movida para features/categories
const updateCategory = async (categoryId, categoryData) => {
  const { updateCategory: editCategory } = await import('@features/categories/service.js');
  return editCategory(categoryId, categoryData);
};

// Fun√ß√£o deleteCategory movida para features/categories
const deleteCategory = async (categoryId) => {
  const { deleteCategory: removeCategory } = await import('@features/categories/service.js');
  return removeCategory(categoryId);
};

// Fun√ß√£o loadCategories movida para features/categories
const loadCategories = async () => {
  const { loadCategories: loadCats } = await import('@features/categories/service.js');
  return loadCats();
};

// Fun√ß√£o addBudget movida para features/budgets
const addBudget = async (budgetData) => {
  const { addBudget: createBudget } = await import('@features/budgets/service.js');
  return createBudget(budgetData);
};

// Fun√ß√£o deleteBudget movida para features/budgets
window.deleteBudget = async (budgetId) => {
  const { deleteBudget: removeBudget } = await import('@features/budgets/service.js');
  return removeBudget(budgetId);
};

// Fun√ß√£o loadBudgets movida para features/budgets
const loadBudgets = async () => {
  const { loadBudgets: loadBuds } = await import('@features/budgets/service.js');
  return loadBuds();
};

// Fun√ß√£o setCurrentBudget movida para features/budgets
const setCurrentBudget = (budget) => {
  const { setCurrentBudget: setBudget } = import('@features/budgets/service.js');
  return setBudget(budget);
};

// Fun√ß√£o setCurrentBudget global movida para features/budgets
window.setCurrentBudget = async (budget) => {
  const { setCurrentBudgetGlobal: setBudgetGlobal } = await import('@features/budgets/service.js');
  return setBudgetGlobal(budget);
};

// Fun√ß√£o selectDefaultBudget movida para features/budgets
const selectDefaultBudget = async () => {
  const { selectDefaultBudget: selectDefault } = await import('@features/budgets/service.js');
  return selectDefault();
};

// Fun√ß√£o loadRecorrentes movida para features/recorrentes
const loadRecorrentes = async () => {
  const { loadRecorrentes: loadRec } = await import('@features/recorrentes/service.js');
  return loadRec();
};

// Fun√ß√£o getTransacoesDoMes movida para features/transactions
const getTransacoesDoMes = async (userId, ano, mes) => {
  const { getTransacoesDoMes: getTransMes } = await import('@features/transactions/service.js');
  return getTransMes(userId, ano, mes);
};

// FUN√á√ÉO RENDERDASHBOARD LIMPA E FUNCIONAL
// Fun√ß√£o renderDashboard movida para features/dashboard
const renderDashboard = async (selectedYear, selectedMonth) => {
  const { renderDashboard: renderDash } = await import('@features/index.js');
  return renderDash(selectedYear, selectedMonth);
};

// Fun√ß√£o para mostrar o modal de categorias em alerta
                    </div>
                    <p class="text-xs opacity-90">${saldo >= 0 ? '‚úì Saldo Positivo' : '‚ö†Ô∏è Saldo Negativo'}</p>
                  </div>
                </div>
                
                <!-- Grid de M√©tricas -->
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                  <div class="bg-white bg-opacity-15 backdrop-blur-sm rounded-xl p-4 text-center">
                    <div class="text-2xl mb-2">üíö</div>
                    <div class="text-2xl md:text-3xl font-bold text-green-200">R$ ${receitas.toFixed(2)}</div>
                    <div class="text-sm opacity-90">Receitas</div>
                </div>
                
                  <div class="bg-white bg-opacity-15 backdrop-blur-sm rounded-xl p-4 text-center">
                    <div class="text-2xl mb-2">üí∏</div>
                    <div class="text-2xl md:text-3xl font-bold text-red-200">R$ ${despesas.toFixed(2)}</div>
                    <div class="text-sm opacity-90">Despesas</div>
                </div>
                
                  <div class="bg-white bg-opacity-15 backdrop-blur-sm rounded-xl p-4 text-center">
                    <div class="text-2xl mb-2">üéØ</div>
                    <div class="text-2xl md:text-3xl font-bold">R$ ${orcado.toFixed(2)}</div>
                    <div class="text-sm opacity-90">Or√ßado</div>
                </div>
              </div>
              
                <!-- Barra de Progresso do Or√ßamento -->
                <div class="bg-white bg-opacity-10 backdrop-blur-sm rounded-xl p-4">
                  <div class="flex justify-between items-center mb-2">
                    <span class="text-sm font-medium">Progresso do Or√ßamento</span>
                    <span class="text-sm font-bold">${(progressoOrcado * 100).toFixed(1)}%</span>
                </div>
                  <div class="w-full bg-white bg-opacity-20 rounded-full h-3">
                    <div class="bg-white h-3 rounded-full transition-all duration-500 ease-out" style="width: ${Math.min(progressoOrcado * 100, 100)}%"></div>
                  </div>
                  <div class="flex justify-between text-xs mt-2 opacity-90">
                    <span id="categorias-alerta-btn" class="${totalAlertas > 0 ? 'cursor-pointer hover:opacity-100 hover:underline bg-red-500 bg-opacity-20 px-2 py-1 rounded-full' : ''}" ${totalAlertas > 0 ? 'onclick="showCategoriasAlertaModal()"' : ''}>${totalAlertas > 0 ? `‚ö†Ô∏è ${totalAlertas} alerta(s)` : '‚úÖ Tudo OK'}</span>
                    <span>${saldo >= 0 ? 'üìà Meta alcan√ßada' : 'üìâ Revisar gastos'}</span>
                  </div>
                </div>
                </div>
              </div>
              
            <!-- ========== SE√á√ÉO 2: ATIVIDADE RECENTE ========== -->
            <div class="mb-8">
              <div class="flex items-center gap-2 mb-4">
                <div class="w-1 h-6 bg-gradient-to-b from-green-500 to-blue-500 rounded-full"></div>
                <h2 class="text-xl md:text-2xl font-bold text-gray-900 dark:text-gray-100">üí≥ Atividade Recente</h2>
              </div>
              
              <div class="bg-white dark:bg-gray-900 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden">
                <!-- Header -->
                <div class="bg-gradient-to-r from-green-50 to-blue-50 dark:from-gray-800 dark:to-gray-800 p-4 border-b border-gray-200 dark:border-gray-700">
                  <div class="flex flex-wrap justify-between items-center gap-2">
                    <h3 class="text-lg md:text-xl font-bold text-gray-900 dark:text-gray-100">√öltimas Transa√ß√µes</h3>
                    <button onclick="showAddTransactionModal()" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-xl text-sm font-medium transition-all duration-200 shadow-md hover:shadow-lg">
                      + Nova Transa√ß√£o
                    </button>
              </div>
            </div>

                <!-- Lista de Transa√ß√µes -->
                <div class="p-4">
                  <div class="space-y-3">
                    ${transacoes.length === 0 ? `
                      <div class="text-center py-8">
                        <div class="text-4xl mb-3">üí∏</div>
                        <p class="text-gray-500 dark:text-gray-400">Nenhuma transa√ß√£o encontrada neste m√™s</p>
                        <button onclick="showAddTransactionModal()" class="mt-3 text-blue-600 hover:text-blue-800 text-sm">+ Adicionar primeira transa√ß√£o</button>
              </div>
                    ` : transacoes
                      .slice(0, 5)
                      .map(t => {
                        const categoria = window.appState.categories?.find(c => c.id === t.categoriaId);
                        let parcelaInfo = '';
                        if (t.recorrenteId) {
                          const recorrente = window.appState.recorrentes?.find(r => r.id === t.recorrenteId);
                          if (recorrente) {
                            if (recorrente.parcelasTotal && recorrente.parcelasTotal > 1) {
                              const status = window.calcularStatusRecorrente ?
                                window.calcularStatusRecorrente(recorrente, window.appState.transactions || [], year, month) :
                                { parcelaAtual: 1, totalParcelas: recorrente.parcelasTotal, foiEfetivadaEsteMes: false };
                              parcelaInfo = status.foiEfetivadaEsteMes
                                ? ` ‚Ä¢ ‚úÖ ${status.parcelaAtual}/${status.totalParcelas}`
                                : ` ‚Ä¢ üìÖ ${status.parcelaAtual}/${status.totalParcelas}`;
                            } else {
                              parcelaInfo = ' ‚Ä¢ ‚ôæÔ∏è';
                            }
                          } else {
                            parcelaInfo = ' ‚Ä¢ üîÑ';
                          }
                        }
                        return `
                          <div class="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-xl hover:bg-gray-100 dark:hover:bg-gray-700 transition-all duration-200 group">
                            <div class="flex items-center gap-3 flex-1 min-w-0">
                              <div class="w-3 h-3 rounded-full flex-shrink-0" style="background-color: ${categoria?.cor || '#6B7280'}"></div>
                              <div class="min-w-0 flex-1">
                                <p class="font-medium text-gray-900 dark:text-gray-100 truncate">${t.descricao}</p>
                                <p class="text-xs text-gray-500 dark:text-gray-400">
                                  ${categoria?.nome || 'Sem categoria'} ‚Ä¢ ${typeof formatTransactionDisplayDate === 'function' ? formatTransactionDisplayDate(t, year, month) : (t.createdAt && t.createdAt.toDate ? t.createdAt.toDate().toLocaleDateString() : t.createdAt ? new Date(t.createdAt).toLocaleDateString() : '')}${parcelaInfo}
                                </p>
                              </div>
                            </div>
                            <div class="flex items-center gap-2">
                              <span class="font-bold text-lg ${t.tipo === 'receita' ? 'text-green-600' : 'text-red-600'}">
                                ${t.tipo === 'receita' ? '+' : '-'}R$ ${parseFloat(t.valor).toFixed(2)}
                              </span>
                              <div class="opacity-0 group-hover:opacity-100 flex gap-1 transition-opacity duration-200">
                                <button onclick="window.editTransaction && window.editTransaction('${t.id}')" class="text-blue-600 hover:text-blue-800 p-1">‚úèÔ∏è</button>
                                <button onclick="window.deleteTransactionWithConfirmation && window.deleteTransactionWithConfirmation('${t.id}', '${t.descricao.replace(/'/g, "\\'")}')" class="text-red-600 hover:text-red-800 p-1">üóëÔ∏è</button>
                              </div>
                            </div>
                          </div>
                        `;
                      })
                      .join('')}
                  </div>
                  
                  ${transacoes.length > 5 ? `
                    <div class="mt-4 text-center">
                      <button onclick="router('/transactions')" class="text-blue-600 hover:text-blue-800 text-sm font-medium">
                        Ver todas as ${transacoes.length} transa√ß√µes ‚Üí
                      </button>
                    </div>
                  ` : ''}
                </div>
              </div>
            </div>

            <!-- ========== SE√á√ÉO 3: CATEGORIAS & LIMITES ========== -->
            <div class="mb-8">
              <div class="flex items-center gap-2 mb-4">
                <div class="w-1 h-6 bg-gradient-to-b from-purple-500 to-pink-500 rounded-full"></div>
                <h2 class="text-xl md:text-2xl font-bold text-gray-900 dark:text-gray-100">üìä Categorias & Limites</h2>
              </div>
              
              <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Top 5 Categorias -->
                <div class="bg-white dark:bg-gray-900 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden">
                  <div class="bg-gradient-to-r from-purple-50 to-pink-50 dark:from-gray-800 dark:to-gray-800 p-4 border-b border-gray-200 dark:border-gray-700">
                    <h3 class="text-lg font-bold text-gray-900 dark:text-gray-100">üèÜ Top 5 Categorias</h3>
                    <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">Categorias com maiores gastos</p>
                  </div>
                  <div class="p-4">
              <div class="space-y-3">
                      ${categoriasComGasto.length === 0 ? `
                        <div class="text-center py-6">
                          <div class="text-3xl mb-2">üìÇ</div>
                          <p class="text-gray-500 dark:text-gray-400 text-sm">Nenhuma categoria com gastos neste m√™s</p>
                        </div>
                      ` : categoriasComGasto
                  .slice(0, 5)
                        .map((cat, index) => {
                    const categoria = window.appState.categories?.find(c => c.id === cat.id);
                    const limite = categoria?.limite ? parseFloat(categoria.limite) : 0;
                    const porcentagem = limite > 0 ? Math.min((cat.gasto / limite) * 100, 100) : 0;
                    let corBarra = 'bg-green-500';
                    if (porcentagem >= 90) {
                      corBarra = 'bg-red-500';
                    } else if (porcentagem >= 75) {
                      corBarra = 'bg-yellow-500';
                    } else if (porcentagem >= 50) {
                      corBarra = 'bg-orange-500';
                    }
                          
                          const medalhas = ['ü•á', 'ü•à', 'ü•â', '4Ô∏è‚É£', '5Ô∏è‚É£'];
                    
                    return `
                            <div class="bg-gray-50 dark:bg-gray-800 rounded-xl p-3 border border-gray-200 dark:border-gray-700">
                        <div class="flex items-center justify-between mb-2">
                                <div class="flex items-center gap-2">
                                  <span class="text-lg">${medalhas[index]}</span>
                            <div class="w-3 h-3 rounded-full" style="background-color: ${categoria?.cor || '#4F46E5'}"></div>
                                  <span class="font-medium text-sm text-gray-900 dark:text-gray-100">${cat.nome}</span>
                          </div>
                                <span class="font-bold text-sm ${cat.gasto > limite && limite > 0 ? 'text-red-600' : 'text-gray-900 dark:text-gray-100'}">
                            R$ ${cat.gasto.toFixed(2)}
                          </span>
                        </div>
                        ${limite > 0 ? `
                          <div class="flex justify-between text-xs text-gray-500 dark:text-gray-400 mb-1">
                                  <span>Limite: R$ ${limite.toFixed(2)}</span>
                                  <span>${porcentagem.toFixed(1)}%</span>
                          </div>
                          <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                                  <div class="${corBarra} h-2 rounded-full transition-all duration-300" style="width: ${Math.min(porcentagem, 100)}%"></div>
                          </div>
                        ` : '<p class="text-xs text-gray-500 dark:text-gray-400">Sem limite definido</p>'}
                      </div>
                    `;
                  })
                  .join('')}
                    </div>
              </div>
            </div>

                <!-- Categorias com Limites Excedidos -->
                <div class="bg-white dark:bg-gray-900 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden">
                  <div class="bg-gradient-to-r from-red-50 to-orange-50 dark:from-gray-800 dark:to-gray-800 p-4 border-b border-gray-200 dark:border-gray-700">
                    <div class="flex justify-between items-center">
                      <div>
                        <h3 class="text-lg font-bold text-gray-900 dark:text-gray-100">‚ö†Ô∏è Controle de Limites</h3>
                        <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">Categorias com limites definidos</p>
                      </div>
                      <button onclick="window.showAddCategoryModal && window.showAddCategoryModal()" class="bg-purple-500 hover:bg-purple-600 text-white px-3 py-2 rounded-xl text-sm font-medium transition-all duration-200 shadow-md hover:shadow-lg">
                        + Nova
                </button>
              </div>
                  </div>
                  <div class="p-4">
                    <div class="space-y-3 max-h-80 overflow-y-auto">
                      ${(window.appState.categories || []).filter(cat => cat.limite > 0).length === 0 ? `
                        <div class="text-center py-6">
                          <div class="text-3xl mb-2">üéØ</div>
                          <p class="text-gray-500 dark:text-gray-400 text-sm">Nenhuma categoria com limite definido</p>
                          <button onclick="window.showAddCategoryModal && window.showAddCategoryModal()" class="mt-2 text-purple-600 hover:text-purple-800 text-sm">+ Definir primeiro limite</button>
                        </div>
                      ` : (window.appState.categories || [])
                  .filter(cat => cat.limite > 0)
                  .map(cat => {
                    const transacoesCategoria = transacoes.filter(t => t.categoriaId === cat.id && t.tipo === cat.tipo);
                    const gasto = transacoesCategoria.reduce((sum, t) => sum + parseFloat(t.valor), 0);
                    return { ...cat, gasto };
                  })
                        .sort((a, b) => {
                          // Priorizar categorias que excederam o limite
                          const aExcedeu = a.gasto > parseFloat(a.limite);
                          const bExcedeu = b.gasto > parseFloat(b.limite);
                          if (aExcedeu && !bExcedeu) return -1;
                          if (!aExcedeu && bExcedeu) return 1;
                          // Se ambas excederam ou n√£o excederam, ordenar por maior gasto
                          return b.gasto - a.gasto;
                        })
                        .slice(0, 6) // Mostrar m√°ximo 6 categorias
                  .map(cat => {
                    const limite = parseFloat(cat.limite || 0);
                          const porcentagem = limite > 0 ? (cat.gasto / limite) * 100 : 0;
                    let corBarra = 'bg-green-500';
                          let iconeStatus = '‚úÖ';
                          if (porcentagem >= 100) {
                      corBarra = 'bg-red-500';
                            iconeStatus = 'üö®';
                          } else if (porcentagem >= 90) {
                            corBarra = 'bg-red-400';
                            iconeStatus = '‚ö†Ô∏è';
                    } else if (porcentagem >= 75) {
                      corBarra = 'bg-yellow-500';
                            iconeStatus = '‚ö°';
                    } else if (porcentagem >= 50) {
                      corBarra = 'bg-orange-500';
                            iconeStatus = 'üìä';
                    }
                    
                    return `
                            <div class="bg-gray-50 dark:bg-gray-800 rounded-xl p-3 border border-gray-200 dark:border-gray-700 ${porcentagem >= 90 ? 'ring-2 ring-red-200 dark:ring-red-800' : ''}">
                        <div class="flex items-center justify-between mb-2">
                                <div class="flex items-center gap-2">
                                  <span class="text-sm">${iconeStatus}</span>
                            <div class="w-3 h-3 rounded-full" style="background-color: ${cat.cor || '#4F46E5'}"></div>
                                  <span class="font-medium text-sm text-gray-900 dark:text-gray-100">${cat.nome}</span>
                          </div>
                                <span class="font-bold text-sm ${cat.gasto > limite ? 'text-red-600' : 'text-gray-900 dark:text-gray-100'}">
                            R$ ${cat.gasto.toFixed(2)}
                          </span>
                        </div>
                          <div class="flex justify-between text-xs text-gray-500 dark:text-gray-400 mb-1">
                            <span>Limite: R$ ${limite.toFixed(2)}</span>
                                <span class="${porcentagem >= 100 ? 'text-red-600 font-bold' : porcentagem >= 90 ? 'text-orange-600 font-medium' : ''}">${porcentagem.toFixed(1)}%</span>
                          </div>
                          <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                                <div class="${corBarra} h-2 rounded-full transition-all duration-300" style="width: ${Math.min(porcentagem, 100)}%"></div>
                          </div>
                              ${porcentagem >= 100 ? `
                                <div class="mt-2 text-xs text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-900 dark:bg-opacity-20 px-2 py-1 rounded">
                                  Excedeu em R$ ${(cat.gasto - limite).toFixed(2)}
                                </div>
                              ` : ''}
                      </div>
                    `;
                  })
                  .join('')}
            </div>

                    ${(window.appState.categories || []).filter(cat => cat.limite > 0).length > 6 ? `
                      <div class="mt-4 text-center">
                        <button onclick="router('/categories')" class="text-purple-600 hover:text-purple-800 text-sm font-medium">
                          Ver todas as categorias ‚Üí
                </button>
              </div>
                    ` : ''}
                        </div>
                        </div>
                      </div>
              </div>

            <!-- ========== SE√á√ÉO 4: RECORRENTES DO M√äS ========== -->
            <div class="mb-8">
              <div class="flex items-center gap-2 mb-4">
                <div class="w-1 h-6 bg-gradient-to-b from-orange-500 to-red-500 rounded-full"></div>
                <h2 class="text-xl md:text-2xl font-bold text-gray-900 dark:text-gray-100">üîÑ Recorrentes do M√™s</h2>
            </div>

              <div class="bg-white dark:bg-gray-900 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden">
                <!-- Header -->
                <div class="bg-gradient-to-r from-orange-50 to-red-50 dark:from-gray-800 dark:to-gray-800 p-4 border-b border-gray-200 dark:border-gray-700">
                  <div class="flex flex-wrap justify-between items-center gap-2">
                    <div>
                      <h3 class="text-lg md:text-xl font-bold text-gray-900 dark:text-gray-100">Despesas Autom√°ticas</h3>
                      <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                        ${todasRecorrentes.filter(r => r.efetivada).length} efetivadas ‚Ä¢ ${todasRecorrentes.filter(r => !r.efetivada).length} pendentes
                      </p>
                    </div>
                    <button onclick="window.showAddRecorrenteModal && window.showAddRecorrenteModal()" class="bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded-xl text-sm font-medium transition-all duration-200 shadow-md hover:shadow-lg">
                      + Nova Recorrente
                </button>
              </div>
                </div>
                
                <!-- Lista de Recorrentes -->
                <div class="p-4">
                  <div class="space-y-3">
                    ${todasRecorrentes.length === 0 ? `
                      <div class="text-center py-8">
                        <div class="text-4xl mb-3">üîÑ</div>
                        <p class="text-gray-500 dark:text-gray-400">Nenhuma despesa recorrente neste m√™s</p>
                        <button onclick="window.showAddRecorrenteModal && window.showAddRecorrenteModal()" class="mt-3 text-orange-600 hover:text-orange-800 text-sm">+ Criar primeira recorrente</button>
                      </div>
                    ` : todasRecorrentes
                      .slice(0, 8)
                      .map(rec => {
                        const categoria = window.appState.categories?.find(c => c.id === rec.categoriaId);
                        let statusInfo = '';
                        let statusIcon = '';
                        let statusColor = '';
                        
                        if (rec.efetivada) {
                          statusIcon = '‚úÖ';
                          statusColor = 'text-green-600';
                          if (rec.parcelasTotal && rec.parcelasTotal > 1) {
                            statusInfo = `Efetivada: ${rec.parcelaAtual || 1}/${rec.parcelasTotal}`;
                          } else {
                            statusInfo = 'Efetivada';
                          }
                        } else {
                          statusIcon = 'üìÖ';
                          statusColor = 'text-blue-600';
                          if (!rec.parcelasTotal || rec.parcelasTotal <= 1) {
                            statusInfo = 'Agendada (Infinito)';
                      } else {
                            const status = window.calcularStatusRecorrente ? 
                              window.calcularStatusRecorrente(rec, window.appState.transactions || [], year, month) : 
                              { parcelaAtual: 1, totalParcelas: rec.parcelasTotal, foiEfetivadaEsteMes: false };
                            statusInfo = `Agendada: ${status.parcelaAtual}/${status.totalParcelas}`;
                      }
                    }
                    
                    return `
                          <div class="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-xl hover:bg-gray-100 dark:hover:bg-gray-700 transition-all duration-200 ${rec.efetivada ? 'border-l-4 border-green-500' : 'border-l-4 border-blue-500'}">
                            <div class="flex items-center gap-3 flex-1 min-w-0">
                              <div class="flex flex-col items-center">
                                <span class="text-lg">${statusIcon}</span>
                                <div class="w-3 h-3 rounded-full mt-1" style="background-color: ${categoria?.cor || '#6B7280'}"></div>
                              </div>
                              <div class="min-w-0 flex-1">
                                <p class="font-medium text-gray-900 dark:text-gray-100 truncate">${rec.descricao}</p>
                                <p class="text-xs text-gray-500 dark:text-gray-400">
                                  ${categoria?.nome || 'Sem categoria'} ‚Ä¢ <span class="${statusColor}">${statusInfo}</span>
                          </p>
                        </div>
                            </div>
                            <div class="text-right">
                              <span class="font-bold text-lg text-red-600">
                                -R$ ${parseFloat(rec.valor).toFixed(2)}
                          </span>
                              ${rec.parcelasTotal && rec.parcelasTotal > 1 ? `
                                <p class="text-xs text-gray-500 dark:text-gray-400">
                                  Total: R$ ${(parseFloat(rec.valor) * rec.parcelasTotal).toFixed(2)}
                                </p>
                              ` : ''}
                        </div>
                      </div>
                    `;
                  })
                  .join('')}
              </div>
                  
                  ${todasRecorrentes.length > 8 ? `
                    <div class="mt-4 text-center">
                      <button onclick="router('/recorrentes')" class="text-orange-600 hover:text-orange-800 text-sm font-medium">
                        Ver todas as ${todasRecorrentes.length} recorrentes ‚Üí
                      </button>
            </div>
                  ` : ''}
                  
                  <!-- Resumo das Recorrentes -->
                  ${todasRecorrentes.length > 0 ? `
                    <div class="mt-6 bg-gradient-to-r from-orange-50 to-red-50 dark:from-gray-800 dark:to-gray-800 rounded-xl p-4 border border-orange-200 dark:border-gray-600">
                      <div class="flex justify-between items-center">
                        <div>
                          <p class="text-sm font-medium text-gray-900 dark:text-gray-100">Total Recorrentes do M√™s</p>
                          <p class="text-xs text-gray-500 dark:text-gray-400">${despesasRecorrentesEfetivadas > 0 ? `R$ ${despesasRecorrentesEfetivadas.toFixed(2)} efetivadas` : 'Nenhuma efetivada'} ${despesasRecorrentesAgendadas > 0 ? ` ‚Ä¢ R$ ${despesasRecorrentesAgendadas.toFixed(2)} agendadas` : ''}</p>
                        </div>
                        <div class="text-right">
                          <span class="text-xl font-bold text-red-600">R$ ${despesasRecorrentesTotal.toFixed(2)}</span>
                        </div>
                      </div>
                    </div>
                  ` : ''}
                </div>
              </div>
            </div>


          </div>
        </div>
      </div>
      
      <!-- Modal Categorias em Alerta -->
      <div id="categorias-alerta-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center p-4">
        <div class="bg-white dark:bg-gray-800 rounded-lg max-w-md w-full max-h-[80vh] overflow-y-auto">
          <div class="p-4 border-b border-gray-200 dark:border-gray-700">
            <div class="flex justify-between items-center">
              <h3 class="text-lg font-bold text-gray-900 dark:text-white">‚ö†Ô∏è Categorias em Alerta</h3>
              <button onclick="closeCategoriasAlertaModal()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
                <span class="text-xl">√ó</span>
              </button>
            </div>
          </div>
          <div id="categorias-alerta-content" class="p-4">
            <!-- Conte√∫do ser√° preenchido dinamicamente -->
          </div>
        </div>
      </div>
    `;

    // UMA √öNICA OPERA√á√ÉO INNERHTML - SOLU√á√ÉO DEFINITIVA
    content.innerHTML = dashboardHTML;

    // Configurar bot√µes do dashboard
    setTimeout(() => {
      setupDashboardButtons();
    }, 100);

    renderFAB();
    // Remover renderBottomNav daqui - deve ser chamado apenas pelo router
    // renderBottomNav('/dashboard');

  } catch (err) {
    console.error('Erro ao renderizar dashboard:', err);
    const content = document.getElementById('app-content');
    if (content) {
      content.innerHTML =
        '<div class="text-red-600 text-center mt-4">Erro ao carregar dashboard. Tente novamente.</div>';
    }
  } finally {
    // Reset da flag de renderiza√ß√£o
    window.isRenderingDashboard = false;
  }
}

// Fun√ß√£o para mostrar o modal de categorias em alerta
window.showCategoriasAlertaModal = function() {
  try {
    const modal = document.getElementById('categorias-alerta-modal');
    const content = document.getElementById('categorias-alerta-content');
    
    if (!modal || !content) {
      console.error('‚ùå Modal de categorias em alerta n√£o encontrado');
      return;
    }

    // Obter categorias em alerta
    const categoriasAlerta = window.appState.categories?.filter(categoria => {
      const limite = parseFloat(categoria.limite || 0);
      if (limite <= 0) return false;

      // Calcular gasto da categoria
      const transacoesCategoria = window.appState.transactions?.filter(t => 
        t.categoriaId === categoria.id && t.tipo === categoria.tipo
      ) || [];
      
      const gasto = transacoesCategoria.reduce((sum, t) => sum + parseFloat(t.valor || 0), 0);
      const porcentagem = (gasto / limite) * 100;
      
      return porcentagem >= 75; // Consideramos alerta quando >= 75%
    }) || [];

    if (categoriasAlerta.length === 0) {
      content.innerHTML = `
        <div class="text-center py-8">
          <div class="text-4xl mb-4">‚úÖ</div>
          <div class="text-lg font-semibold text-gray-800 dark:text-white mb-2">Nenhuma categoria em alerta</div>
          <div class="text-gray-600 dark:text-gray-400">Todas as categorias est√£o dentro do limite</div>
        </div>
      `;
    } else {
      content.innerHTML = `
        <div class="space-y-3">
          ${categoriasAlerta.map(categoria => {
            const limite = parseFloat(categoria.limite || 0);
            const transacoesCategoria = window.appState.transactions?.filter(t => 
              t.categoriaId === categoria.id && t.tipo === categoria.tipo
            ) || [];
            
            const gasto = transacoesCategoria.reduce((sum, t) => sum + parseFloat(t.valor || 0), 0);
            const porcentagem = Math.min((gasto / limite) * 100, 100);
            
            let corBarra = 'bg-green-500';
            let statusTexto = 'Normal';
            let statusIcon = '‚úÖ';
            
            if (porcentagem >= 90) {
              corBarra = 'bg-red-500';
              statusTexto = 'Cr√≠tico';
              statusIcon = 'üö®';
            } else if (porcentagem >= 75) {
              corBarra = 'bg-yellow-500';
              statusTexto = 'Aten√ß√£o';
              statusIcon = '‚ö†Ô∏è';
            } else if (porcentagem >= 50) {
              corBarra = 'bg-orange-500';
              statusTexto = 'Moderado';
              statusIcon = 'üî∂';
            }
            
            return `
              <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-3 border border-gray-200 dark:border-gray-600">
                <div class="flex justify-between items-start mb-2">
                  <div>
                    <h4 class="font-semibold text-gray-900 dark:text-white">${categoria.nome}</h4>
                    <p class="text-sm text-gray-600 dark:text-gray-300">${categoria.tipo === 'receita' ? 'Receita' : 'Despesa'}</p>
                  </div>
                  <div class="text-right">
                    <div class="text-sm font-semibold ${porcentagem >= 90 ? 'text-red-600' : porcentagem >= 75 ? 'text-yellow-600' : 'text-orange-600'}">
                      ${statusIcon} ${statusTexto}
                    </div>
                    <div class="text-xs text-gray-500 dark:text-gray-400">${porcentagem.toFixed(0)}% usado</div>
                  </div>
                </div>
                
                <div class="mb-2">
                  <div class="flex justify-between text-sm mb-1">
                    <span class="text-gray-600 dark:text-gray-300">R$ ${gasto.toFixed(2)}</span>
                    <span class="text-gray-600 dark:text-gray-300">R$ ${limite.toFixed(2)}</span>
                  </div>
                  <div class="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2">
                    <div class="${corBarra} h-2 rounded-full transition-all duration-300" style="width: ${porcentagem}%"></div>
                  </div>
                </div>
                
                <div class="text-xs text-gray-500 dark:text-gray-400">
                  Restante: R$ ${Math.max(limite - gasto, 0).toFixed(2)}
                </div>
              </div>
            `;
          }).join('')}
        </div>
        
        <div class="mt-4 p-3 bg-blue-50 dark:bg-blue-900 rounded-lg">
          <p class="text-sm text-blue-800 dark:text-blue-200">
            <strong>üí° Dica:</strong> Categorias em alerta s√£o aquelas que j√° utilizaram 75% ou mais do limite definido.
          </p>
        </div>
      `;
    }

    modal.classList.remove('hidden');
  } catch (error) {
    console.error('‚ùå Erro ao mostrar modal de categorias em alerta:', error);
  }
};

// Fun√ß√£o para fechar o modal de categorias em alerta
window.closeCategoriasAlertaModal = function() {
  const modal = document.getElementById('categorias-alerta-modal');
  if (modal) {
    modal.classList.add('hidden');
  }
};

// Fechar modal ao clicar fora dele
document.addEventListener('click', function(event) {
  const modal = document.getElementById('categorias-alerta-modal');
  if (modal && event.target === modal) {
    window.closeCategoriasAlertaModal();
  }
});

// Fun√ß√£o para fechar modal de alertas
function closeModalAlertas() {
  const modal = document.getElementById('modal-alertas');
  if (modal) {
    modal.classList.add('hidden');
  }
}

// Fun√ß√£o renderTransactions movida para features/transactions
const renderTransactions = async () => {
  const { renderTransactions: renderTx } = await import('@features/transactions/TransactionsPage.js');
  return renderTx();
};

// ===== Helpers globais para per√≠odo selecionado (m√™s/ano) =====
function parseYm(str) {
  if (!str) return null;
  const m = String(str).match(/^(\d{4})-(\d{2})$/);
  if (!m) return null;
  const y = parseInt(m[1], 10);
  const mo = parseInt(m[2], 10);
  if (y > 1900 && mo >= 1 && mo <= 12) return { year: y, month: mo };
  return null;
}

function readYmFromHash() {
  try {
    const hash = window.location.hash || '';
    const qIndex = hash.indexOf('?');
    if (qIndex === -1) return null;
    const query = new URLSearchParams(hash.slice(qIndex + 1));
    const ym = query.get('ym');
    return parseYm(ym);
  } catch { return null; }
}

function getSelectedPeriod() {
  // 1) Hash ?ym=YYYY-MM
  const fromHash = readYmFromHash();
  if (fromHash) return fromHash;
  // 2) appState
  const y = window.appState?.selectedYear;
  const m = window.appState?.selectedMonth;
  if (y && m) return { year: y, month: m };
  // 3) localStorage
  try {
    const saved = localStorage.getItem('selectedYM');
    const parsed = parseYm(saved);
    if (parsed) return parsed;
  } catch {}
  // 4) Agora
  const now = new Date();
  return { year: now.getFullYear(), month: now.getMonth() + 1 };
}

function updateHashWithYM(path) {
  try {
    const { year, month } = getSelectedPeriod();
    const ym = `${year}-${String(month).padStart(2, '0')}`;
    const cleanPath = path || (window.location.hash.slice(1).split('?')[0] || '/dashboard');
    const newHash = `#${cleanPath}?ym=${ym}`;
    if (window.location.hash !== newHash) {
      window.location.hash = newHash;
    }
  } catch {}
}

function setSelectedPeriod(year, month, opts = {}) {
  window.appState = window.appState || {};
  window.appState.selectedYear = year;
  window.appState.selectedMonth = month;
  try { localStorage.setItem('selectedYM', `${year}-${String(month).padStart(2, '0')}`); } catch {}
  if (opts.updateHash !== false) {
    updateHashWithYM(opts.path || (window.location.hash.slice(1).split('?')[0] || '/dashboard'));
  }
}
// Expor helpers se necess√°rio
window.getSelectedPeriod = getSelectedPeriod;
window.setSelectedPeriod = setSelectedPeriod;

// Fun√ß√£o para configurar pesquisa de transa√ß√µes
function setupTransactionSearch() {
  const searchInput = document.getElementById('transaction-search');
  const resultsDiv = document.getElementById('transaction-search-results');
  const countSpan = document.getElementById('transaction-search-count');
  const listDiv = document.getElementById('transactions-list');
  
  if (!searchInput) return;
  
  // Evitar bind duplicado em re-renders
  if (searchInput.dataset.bound === '1') return;
  searchInput.dataset.bound = '1';

  searchInput.addEventListener('input', function() {
    // Debounce para evitar filtro a cada tecla
    if (this._debounceTimer) {
      clearTimeout(this._debounceTimer);
    }
    this._debounceTimer = setTimeout(() => {
      const searchTerm = this.value.toLowerCase().trim();
      
      if (searchTerm === '') {
        // Mostrar todas as transa√ß√µes
        resultsDiv.classList.add('hidden');
        listDiv.innerHTML = renderAllTransactions();
        return;
      }
      
      // Filtrar transa√ß√µes
      const filteredTransactions = window.appState.transactions?.filter(t => {
        const descricao = (t.descricao || '').toLowerCase();
        const categoria = window.appState.categories?.find(c => c.id === t.categoriaId);
        const categoriaNome = (categoria?.nome || '').toLowerCase();
        const valor = String(t.valor ?? '');
        
        return descricao.includes(searchTerm) || 
               categoriaNome.includes(searchTerm) || 
               valor.includes(searchTerm);
      }) || [];
      
      // Atualizar contador
      countSpan.textContent = filteredTransactions.length;
      resultsDiv.classList.remove('hidden');
      
      // Renderizar transa√ß√µes filtradas
      listDiv.innerHTML = renderFilteredTransactions(filteredTransactions);
    }, 150);
  });
  
  // Limpar pesquisa com Escape (bind √∫nico)
  searchInput.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
      this.value = '';
      this.dispatchEvent(new Event('input'));
    }
  });
}

// Fun√ß√£o para renderizar todas as transa√ß√µes
// Fun√ß√£o getTransactionDate movida para features/transactions
const getTransactionDate = async (t) => {
  const { getTransactionDate: getDate } = await import('@features/transactions/TransactionsPage.js');
  return getDate(t);
};

// Fun√ß√£o getTransactionYearMonth movida para features/transactions
const getTransactionYearMonth = async (t) => {
  const { getTransactionYearMonth: getYearMonth } = await import('@features/transactions/TransactionsPage.js');
  return getYearMonth(t);
};
  try {
    // Campos expl√≠citos de compet√™ncia (BR): MM/YYYY, YYYY-MM
    if (typeof t?.competencia === 'string') {
      const s = t.competencia.trim();
      let m;
      m = s.match(/^(\d{1,2})\/(\d{4})$/);
      if (m) return `${m[2]}-${String(parseInt(m[1], 10)).padStart(2, '0')}`;
      m = s.match(/^(\d{4})-(\d{2})$/);
      if (m) return `${m[1]}-${m[2]}`;
    }

    // Pares (mes, ano) em diferentes conven√ß√µes
    const monthCandidates = [t?.mes, t?.mesReferencia, t?.mesLancamento, t?.mesCompetencia];
    const yearCandidates = [t?.ano, t?.anoReferencia, t?.anoLancamento, t?.anoCompetencia];
    const mesIdx = monthCandidates.findIndex(v => v !== undefined && v !== null && v !== '');
    const anoIdx = yearCandidates.findIndex(v => v !== undefined && v !== null && v !== '');
    if (mesIdx !== -1 && anoIdx !== -1) {
      const mon = parseInt(monthCandidates[mesIdx], 10);
      const y = parseInt(yearCandidates[anoIdx], 10);
      if (!Number.isNaN(mon) && mon >= 1 && mon <= 12 && !Number.isNaN(y) && y > 1900) {
        return `${y}-${String(mon).padStart(2, '0')}`;
      }
    }

    const v = t?.dataEfetivacao || t?.dataLancamento || t?.data || t?.date || t?.createdAt;
    if (!v) return null;

    // Firestore Timestamp
    if (v && typeof v.toDate === 'function') {
      const d = v.toDate();
      const y = d.getFullYear();
      const m = d.getMonth() + 1;
      return `${y}-${String(m).padStart(2, '0')}`;
    }

    // Number epoch (ms or seconds)
    if (typeof v === 'number') {
      const ms = v < 1e12 ? v * 1000 : v; // tratar epoch em segundos
      const d = new Date(ms);
      if (!isNaN(d.getTime())) {
        const y = d.getFullYear();
        const m = d.getMonth() + 1;
        return `${y}-${String(m).padStart(2, '0')}`;
      }
      return null;
    }

    if (typeof v === 'string') {
      const s = v.trim();
      // ISO completo: YYYY-MM-DD...
      let m;
      m = s.match(/^(\d{4})-(\d{2})-(\d{2})/);
      if (m) return `${m[1]}-${m[2]}`;

      // ISO ano-m√™s: YYYY-MM
      m = s.match(/^(\d{4})-(\d{2})$/);
      if (m) return `${m[1]}-${m[2]}`;

      // BR: DD/MM/YYYY
      m = s.match(/^(\d{1,2})\/(\d{1,2})\/(\d{4})$/);
      if (m) {
        const y = parseInt(m[3], 10);
        const mon = parseInt(m[2], 10);
        return `${y}-${String(mon).padStart(2, '0')}`;
      }

      // BR: MM/YYYY
      m = s.match(/^(\d{1,2})\/(\d{4})$/);
      if (m) {
        const y = parseInt(m[2], 10);
        const mon = parseInt(m[1], 10);
        return `${y}-${String(mon).padStart(2, '0')}`;
      }

      // Fallback: tentar Date
      const d = new Date(s);
      if (!isNaN(d.getTime())) {
        const y = d.getFullYear();
        const mon = d.getMonth() + 1;
        return `${y}-${String(mon).padStart(2, '0')}`;
      }
      return null;
    }

    // Fallback gen√©rico
    const d = new Date(v);
    if (!isNaN(d.getTime())) {
      const y = d.getFullYear();
      const mon = d.getMonth() + 1;
      return `${y}-${String(mon).padStart(2, '0')}`;
    }
    return null;
  } catch {
    return null;
  }
}

// Fun√ß√£o formatTransactionDisplayDate movida para features/transactions
const formatTransactionDisplayDate = async (t, anoCtx, mesCtx) => {
  const { formatTransactionDisplayDate: formatDate } = await import('@features/transactions/TransactionsPage.js');
  return formatDate(t, anoCtx, mesCtx);
};

// Fun√ß√£o renderAllTransactions movida para features/transactions
const renderAllTransactions = async () => {
  const { renderAllTransactions: renderAllTx } = await import('@features/transactions/TransactionsPage.js');
  return renderAllTx();
};

// Fun√ß√£o renderOlderMonthsControl movida para features/transactions
const renderOlderMonthsControl = async () => {
  const { renderOlderMonthsControl: renderOlderMonths } = await import('@features/transactions/TransactionsPage.js');
  return renderOlderMonths();
};

// Fun√ß√£o loadAllOlderMonths movida para features/transactions
window.loadAllOlderMonths = async function() {
  const { loadAllOlderMonths: loadOlderMonths } = await import('@features/transactions/TransactionsPage.js');
  return loadOlderMonths();
};

// Fun√ß√£o renderMonthSectionHTML movida para features/transactions
const renderMonthSectionHTML = async (mesAno, transacoesMes) => {
  const { renderMonthSectionHTML: renderMonthSection } = await import('@features/transactions/TransactionsPage.js');
  return renderMonthSection(mesAno, transacoesMes);
};

// Fun√ß√£o renderTransactionsGroupedByDay movida para features/transactions
const renderTransactionsGroupedByDay = async (transacoesMes, ano, mes) => {
  const { renderTransactionsGroupedByDay: renderTxGroupedByDay } = await import('@features/transactions/TransactionsPage.js');
  return renderTxGroupedByDay(transacoesMes, ano, mes);
};

// ===== Estado de colapso por dia: helpers e toggle =====
function getCollapsedDays() {
  try {
    const raw = localStorage.getItem('txCollapsedDays');
    const arr = raw ? JSON.parse(raw) : [];
    if (Array.isArray(arr)) return new Set(arr);
  } catch {}
  return new Set();
}

function saveCollapsedDays(set) {
  try {
    localStorage.setItem('txCollapsedDays', JSON.stringify(Array.from(set)));
  } catch {}
}

function isDayCollapsed(key) {
  if (!window.appState) window.appState = {};
  if (!window.appState.ui) window.appState.ui = {};
  if (!window.appState.ui.collapsedDays) {
    window.appState.ui.collapsedDays = getCollapsedDays();
  }
  return window.appState.ui.collapsedDays.has(key);
}

// Fun√ß√£o toggleDayGroup movida para features/transactions
window.toggleDayGroup = async function(key) {
  const { toggleDayGroup: toggleDay } = await import('@features/transactions/TransactionsPage.js');
  return toggleDay(key);
};

// Fun√ß√£o expandAllDays movida para features/transactions
window.expandAllDays = async function(mesAno) {
  const { expandAllDays: expandDays } = await import('@features/transactions/TransactionsPage.js');
  return expandDays(mesAno);
};

// Fun√ß√£o collapseAllDays movida para features/transactions
window.collapseAllDays = async function(mesAno) {
  const { collapseAllDays: collapseDays } = await import('@features/transactions/TransactionsPage.js');
  return collapseDays(mesAno);
};

// Fun√ß√£o renderTransactionItemHTML movida para features/transactions
const renderTransactionItemHTML = async (t, ano, mes) => {
  const { renderTransactionItemHTML: renderItem } = await import('@features/transactions/TransactionsPage.js');
  return renderItem(t, ano, mes);
};


// Fun√ß√£o loadMonthSection movida para features/transactions
window.loadMonthSection = async function(mesAno) {
  const { loadMonthSection: loadMonth } = await import('@features/transactions/TransactionsPage.js');
  return loadMonth(mesAno);
};

// Fun√ß√£o renderFilteredTransactions movida para features/transactions
const renderFilteredTransactions = async (filteredTransactions) => {
  const { renderFilteredTransactions: renderFiltered } = await import('@features/transactions/TransactionsPage.js');
  return renderFiltered(filteredTransactions);
};

// Fun√ß√£o calcularNumeroParcela movida para features/transactions
const calcularNumeroParcela = async (transacao) => {
  const { calcularNumeroParcela: calcParcela } = await import('@features/transactions/TransactionsPage.js');
  return calcParcela(transacao);
};

// Fun√ß√£o renderCategories movida para features/categories
const renderCategories = async () => {
  const { renderCategories: renderCat } = await import('@features/categories/CategoriesPage.js');
  return renderCat();
};
      let corBarra = 'bg-green-500';
      if (porcentagem >= 90) {
        corBarra = 'bg-red-500';
      } else if (porcentagem >= 75) {
        corBarra = 'bg-yellow-500';
      } else if (porcentagem >= 50) {
        corBarra = 'bg-orange-500';
      }

      return {
        ...cat,
        totalGasto,
        totalGastoTransacoes,
        totalGastoRecorrentes,
        limite,
        saldo,
        porcentagem,
        corBarra
      };
    })
    .sort((a, b) => b.totalGasto - a.totalGasto); // Ordenar por gasto (maior para menor)

  // Calcular categorias em alerta (limite excedido)
  const categoriasEmAlerta = categoriasComGastos.filter(cat => cat.limite > 0 && cat.totalGasto > cat.limite).length;

  // Seletor de m√™s/ano
  const selYear = window.appState?.selectedYear || new Date().getFullYear();
  const selMonth = window.appState?.selectedMonth || (new Date().getMonth() + 1);
  const mesesNomes = ['Janeiro','Fevereiro','Mar√ßo','Abril','Maio','Junho','Julho','Agosto','Setembro','Outubro','Novembro','Dezembro'];
  const monthOptions = mesesNomes.map((nome, idx) => `
    <option value="${idx + 1}" ${idx + 1 === selMonth ? 'selected' : ''}>${nome}</option>
  `).join('');
  const anosSet = new Set((window.appState.transactions || [])
    .map(t => getTransactionYearMonth(t))
    .filter(Boolean)
    .map(ym => parseInt(ym.split('-')[0], 10)));
  if (anosSet.size === 0) {
    const y = new Date().getFullYear();
    [y - 1, y, y + 1].forEach(a => anosSet.add(a));
  }
  const anos = Array.from(anosSet).sort((a,b) => b - a);
  const yearOptions = anos.map(y => `<option value="${y}" ${y === selYear ? 'selected' : ''}>${y}</option>`).join('');

  content.innerHTML = `
    <div class="tab-container">
      <div class="tab-header">
        <h2 class="tab-title-highlight">üìÇ Categorias</h2>
        <div id="cat-period-indicator"></div>
      </div>
      <div class="tab-content">
        <div class="content-spacing">
          <!-- Indicador de per√≠odo padronizado movido para o cabe√ßalho -->
          
          <!-- ========== SE√á√ÉO 1: RESUMO ANAL√çTICO ========== -->
          <div class="mb-8">
            <div class="flex items-center gap-2 mb-4">
              <div class="w-1 h-6 bg-gradient-to-b from-purple-500 to-pink-500 rounded-full"></div>
              <h2 class="text-xl md:text-2xl font-bold text-gray-900 dark:text-gray-100">üìä Vis√£o Geral</h2>
            </div>
            
            <div class="bg-gradient-to-br from-purple-500 via-pink-500 to-indigo-600 rounded-2xl shadow-xl p-6 md:p-8 text-white mb-6">
              <!-- Header do Card -->
              <div class="flex items-center justify-between mb-6">
                <div>
                  <div class="flex items-center gap-2">
                    <h3 class="text-xl md:text-2xl font-bold">Controle de Categorias</h3>
                  </div>
                  <p class="text-sm opacity-90">${totalCategorias} categorias cadastradas</p>
                </div>
                <div class="text-right">
                  <div class="text-2xl md:text-3xl font-bold ${categoriasEmAlerta > 0 ? 'text-red-200' : 'text-green-200'}">
                    ${categoriasEmAlerta}
                  </div>
                  <p class="text-xs opacity-90">${categoriasEmAlerta > 0 ? '‚ö†Ô∏è Alertas' : '‚úÖ Sem Alertas'}</p>
                </div>
              </div>
              
              <!-- Grid de M√©tricas -->
              <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div class="bg-white bg-opacity-15 backdrop-blur-sm rounded-xl p-4 text-center">
                  <div class="text-2xl mb-2">üìÇ</div>
                  <div class="text-2xl md:text-3xl font-bold">${totalCategorias}</div>
                  <div class="text-sm opacity-90">Total</div>
                </div>
                
                <div class="bg-white bg-opacity-15 backdrop-blur-sm rounded-xl p-4 text-center">
                  <div class="text-2xl mb-2">üéØ</div>
                  <div class="text-2xl md:text-3xl font-bold text-blue-200">${categoriasComLimite}</div>
                  <div class="text-sm opacity-90">Com Limite</div>
                </div>
                
                <div class="bg-white bg-opacity-15 backdrop-blur-sm rounded-xl p-4 text-center">
                  <div class="text-2xl mb-2">üíö</div>
                  <div class="text-2xl md:text-3xl font-bold text-green-200">${categoriasReceita}</div>
                  <div class="text-sm opacity-90">Receitas</div>
                </div>
                
                <div class="bg-white bg-opacity-15 backdrop-blur-sm rounded-xl p-4 text-center">
                  <div class="text-2xl mb-2">üí∏</div>
                  <div class="text-2xl md:text-3xl font-bold text-red-200">${categoriasDespesa}</div>
                  <div class="text-sm opacity-90">Despesas</div>
                </div>
              </div>
            </div>
          </div>

          <!-- ========== SE√á√ÉO 2: A√á√ïES E FILTROS ========== -->
          <div class="mb-8">
            <div class="flex items-center gap-2 mb-4">
              <div class="w-1 h-6 bg-gradient-to-b from-blue-500 to-purple-500 rounded-full"></div>
              <h2 class="text-xl md:text-2xl font-bold text-gray-900 dark:text-gray-100">üîß A√ß√µes & Filtros</h2>
            </div>
            
            <div class="bg-white dark:bg-gray-900 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden">
              <!-- Header -->
              <div class="bg-gradient-to-r from-blue-50 to-purple-50 dark:from-gray-800 dark:to-gray-800 p-4 border-b border-gray-200 dark:border-gray-700">
                <div class="flex flex-wrap justify-between items-center gap-2">
                  <h3 class="text-lg font-bold text-gray-900 dark:text-gray-100">Gerenciar Categorias</h3>
                  <div class="flex gap-2 flex-wrap">
                    <button onclick="window.migrarTransacoesAntigas()" class="bg-gray-500 hover:bg-gray-600 text-white px-3 py-2 rounded-xl text-sm font-medium transition-all duration-200 shadow-md hover:shadow-lg">
                      üîÑ Migrar
          </button>
                    <button onclick="window.corrigirTipoCategoria()" class="bg-yellow-500 hover:bg-yellow-600 text-white px-3 py-2 rounded-xl text-sm font-medium transition-all duration-200 shadow-md hover:shadow-lg">
                      üîß Corrigir
          </button>
                    <button id="add-category-btn" class="bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-xl text-sm font-medium transition-all duration-200 shadow-md hover:shadow-lg">
                      + Nova Categoria
          </button>
        </div>
      </div>
              </div>
              
          <!-- Filtro de pesquisa -->
              <div class="p-4">
            <div class="relative">
              <input 
                type="text" 
                id="category-search" 
                    placeholder="üîç Pesquisar por nome, tipo ou limite..." 
                    class="w-full px-4 py-3 pl-12 border border-gray-300 dark:border-gray-600 rounded-xl bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200"
              />
                  <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                    <span class="text-gray-400 text-lg">üîç</span>
              </div>
            </div>
            <div id="category-search-results" class="mt-2 text-sm text-gray-600 dark:text-gray-400 hidden">
              <span id="category-search-count">0</span> categoria(s) encontrada(s)
                </div>
              </div>
            </div>
          </div>
          
          <!-- ========== SE√á√ÉO 3: GRID DE CATEGORIAS ========== -->
          <div class="mb-8">
            <div class="flex items-center gap-2 mb-4">
              <div class="w-1 h-6 bg-gradient-to-b from-green-500 to-teal-500 rounded-full"></div>
              <h2 class="text-xl md:text-2xl font-bold text-gray-900 dark:text-gray-100">üìã Todas as Categorias</h2>
              </div>
            
${categorias.length === 0 ? `
              <div class="bg-white dark:bg-gray-900 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden">
                <div class="text-center py-12">
                  <div class="text-6xl mb-4">üìÇ</div>
                  <div class="text-xl font-semibold text-gray-800 dark:text-white mb-2">Nenhuma categoria encontrada</div>
                  <div class="text-gray-600 dark:text-gray-400 mb-4">Crie sua primeira categoria para organizar suas finan√ßas</div>
                  <button onclick="window.showAddCategoryModal()" class="bg-purple-500 hover:bg-purple-600 text-white px-6 py-3 rounded-xl font-medium transition-all duration-200 shadow-lg">
                    üìÇ Criar Primeira Categoria
                  </button>
                  </div>
                  </div>
            ` : `
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                ${categoriasComGastos.map(cat => {
                  const isReceita = cat.tipo === 'receita';
                  const temLimite = cat.limite > 0;
                  const excedeuLimite = temLimite && cat.totalGasto > cat.limite;
                  
                  return `
                    <div class="bg-white dark:bg-gray-900 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden hover:shadow-2xl transition-all duration-300 group ${excedeuLimite ? 'ring-2 ring-red-200 dark:ring-red-800' : ''}">
                      <!-- Header da Categoria -->
                      <div class="bg-gradient-to-r ${isReceita ? 'from-green-50 to-emerald-50 dark:from-gray-800 dark:to-gray-800' : 'from-blue-50 to-indigo-50 dark:from-gray-800 dark:to-gray-800'} p-4 border-b border-gray-200 dark:border-gray-700">
                        <div class="flex items-center justify-between">
                          <div class="flex items-center gap-3">
                            <div class="w-12 h-12 rounded-full flex items-center justify-center text-2xl" style="background-color: ${cat.cor || '#4F46E5'}20; color: ${cat.cor || '#4F46E5'}">
                              ${isReceita ? 'üí∞' : 'üí∏'}
                    </div>
                            <div>
                              <h3 class="font-bold text-gray-900 dark:text-gray-100 truncate">${cat.nome}</h3>
                              <p class="text-sm text-gray-500 dark:text-gray-400">${isReceita ? 'Receita' : 'Despesa'}</p>
                            </div>
                          </div>
                          ${excedeuLimite ? '<div class="text-2xl">üö®</div>' : temLimite && cat.porcentagem >= 90 ? '<div class="text-2xl">‚ö†Ô∏è</div>' : ''}
                        </div>
                  </div>
                      
                      <!-- Conte√∫do da Categoria -->
                      <div class="p-4">
                        ${temLimite ? `
                          <!-- Com Limite -->
                          <div class="space-y-3">
                            <div class="flex justify-between items-center">
                              <span class="text-sm text-gray-600 dark:text-gray-400">Limite Mensal</span>
                              <span class="font-bold text-gray-900 dark:text-gray-100">R$ ${cat.limite.toFixed(2)}</span>
                            </div>
                            
                            <div class="flex justify-between items-center">
                              <span class="text-sm text-gray-600 dark:text-gray-400">${isReceita ? 'Recebido' : 'Gasto'}</span>
                              <span class="font-bold ${isReceita ? 'text-green-600' : excedeuLimite ? 'text-red-600' : 'text-gray-900 dark:text-gray-100'}">
                                R$ ${cat.totalGasto.toFixed(2)}
                              </span>
                            </div>
                            
                            <div class="flex justify-between items-center">
                              <span class="text-sm text-gray-600 dark:text-gray-400">${isReceita ? 'Falta para meta' : 'Saldo'}</span>
                              <span class="font-bold ${cat.saldo < 0 ? 'text-red-600' : cat.saldo < cat.limite * 0.25 ? 'text-yellow-600' : 'text-green-600'}">
                                R$ ${cat.saldo.toFixed(2)}
                              </span>
                            </div>
                            
                            <!-- Breakdown por tipo -->
                            ${cat.totalGasto > 0 ? `
                              <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-3 text-xs space-y-1">
                                <div class="flex justify-between">
                                  <span class="text-gray-600 dark:text-gray-400">Transa√ß√µes diretas:</span>
                                  <span>R$ ${cat.totalGastoTransacoes.toFixed(2)}</span>
                                </div>
                                ${cat.totalGastoRecorrentes > 0 ? `
                                  <div class="flex justify-between">
                                    <span class="text-gray-600 dark:text-gray-400">Recorrentes:</span>
                                    <span>R$ ${cat.totalGastoRecorrentes.toFixed(2)}</span>
                                  </div>
                                ` : ''}
                              </div>
                            ` : ''}
                  
                  <!-- Barra de Progresso -->
                            <div class="space-y-2">
                              <div class="flex justify-between text-xs text-gray-500 dark:text-gray-400">
                                <span>${cat.porcentagem.toFixed(1)}% ${isReceita ? 'atingido' : 'usado'}</span>
                                <span>${cat.porcentagem >= 100 ? (isReceita ? 'Meta atingida!' : 'Limite excedido!') : ''}</span>
                    </div>
                              <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3">
                                <div class="${cat.corBarra} h-3 rounded-full transition-all duration-500 ease-out" style="width: ${Math.min(cat.porcentagem, 100)}%"></div>
                    </div>
                  </div>
                            
                            ${excedeuLimite ? `
                              <div class="bg-red-50 dark:bg-red-900 dark:bg-opacity-20 border border-red-200 dark:border-red-800 rounded-lg p-3">
                                <div class="text-sm font-medium text-red-800 dark:text-red-200">
                                  ‚ö†Ô∏è Limite excedido em R$ ${(cat.totalGasto - cat.limite).toFixed(2)}
                </div>
                  </div>
                            ` : ''}
                    </div>
                        ` : `
                          <!-- Sem Limite -->
                          <div class="space-y-3">
                            <div class="flex justify-between items-center">
                              <span class="text-sm text-gray-600 dark:text-gray-400">${isReceita ? 'Receita' : 'Gasto'} do m√™s</span>
                              <span class="font-bold ${isReceita ? 'text-green-600' : 'text-gray-900 dark:text-gray-100'}">
                                R$ ${cat.totalGasto.toFixed(2)}
                              </span>
                </div>
                            
                            ${cat.totalGasto > 0 ? `
                              <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-3 text-xs space-y-1">
                                <div class="flex justify-between">
                                  <span class="text-gray-600 dark:text-gray-400">Transa√ß√µes diretas:</span>
                                  <span>R$ ${cat.totalGastoTransacoes.toFixed(2)}</span>
                                </div>
                                ${cat.totalGastoRecorrentes > 0 ? `
                                  <div class="flex justify-between">
                                    <span class="text-gray-600 dark:text-gray-400">Recorrentes:</span>
                                    <span>R$ ${cat.totalGastoRecorrentes.toFixed(2)}</span>
                                  </div>
                                ` : ''}
                              </div>
                            ` : `
                              <div class="text-center py-4 text-gray-500 dark:text-gray-400">
                                <div class="text-2xl mb-2">üìä</div>
                                <p class="text-sm">Nenhuma movimenta√ß√£o este m√™s</p>
                              </div>
                            `}
                            
                            <div class="bg-blue-50 dark:bg-blue-900 dark:bg-opacity-20 border border-blue-200 dark:border-blue-800 rounded-lg p-3">
                              <div class="text-sm text-blue-800 dark:text-blue-200">
                                üí° Defina um limite para melhor controle
                              </div>
                            </div>
                          </div>
                        `}
                      </div>
                      
                      <!-- Bot√µes de A√ß√£o -->
                      <div class="bg-gray-50 dark:bg-gray-800 p-4 border-t border-gray-200 dark:border-gray-700">
                        <div class="flex gap-2">
                          <button onclick="window.editCategory && window.editCategory('${cat.id}')" class="flex-1 bg-blue-500 hover:bg-blue-600 text-white px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 flex items-center justify-center gap-2">
                            ‚úèÔ∏è Editar
                </button>
                          <button onclick="window.showCategoryHistory && window.showCategoryHistory('${cat.id}')" class="flex-1 bg-gray-500 hover:bg-gray-600 text-white px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 flex items-center justify-center gap-2">
                            üìä Hist√≥rico
                </button>
              </div>
            </div>
          </div>
                  `;
                }).join('')}
              </div>
            `}
          </div>
        </div>
      </div>
    </div>
  `;
  
  // Configurar bot√µes da tela de categorias
  setTimeout(() => {
    setupCategoryButtons();
  }, 100);
  
  // Configurar filtro de pesquisa
  setupCategorySearch();
  
  // Injetar indicador de per√≠odo padr√£o no cabe√ßalho
  (async () => {
    try {
  const { createPeriodIndicator } = await import('@ui/PeriodIndicator.js');
      const holder = document.getElementById('cat-period-indicator');
      if (holder) {
        holder.innerHTML = '';
        holder.appendChild(createPeriodIndicator({ onChange: () => renderCategories() }));
      }
    } catch (e) {
      console.warn('PeriodIndicator (Categorias) indispon√≠vel:', e);
    }
  })();
  
  renderFAB();
  // Remover renderBottomNav daqui - deve ser chamado apenas pelo router
  // renderBottomNav('/categories');
}

// Fun√ß√£o para configurar pesquisa de categorias
function setupCategorySearch() {
  const searchInput = document.getElementById('category-search');
  const resultsDiv = document.getElementById('category-search-results');
  const countSpan = document.getElementById('category-search-count');
  const gridDiv = document.getElementById('categories-grid');
  
  if (!searchInput) return;
  
  searchInput.addEventListener('input', function() {
    const searchTerm = this.value.toLowerCase().trim();
    
    if (searchTerm === '') {
      // Mostrar todas as categorias
      resultsDiv.classList.add('hidden');
      gridDiv.innerHTML = renderAllCategories();
      return;
    }
    
    // Filtrar categorias
    const filteredCategories = window.appState.categories?.filter(cat => {
      const nome = cat.nome.toLowerCase();
      const tipo = cat.tipo.toLowerCase();
      const limite = cat.limite?.toString() || '';
      
      return nome.includes(searchTerm) || 
             tipo.includes(searchTerm) || 
             limite.includes(searchTerm);
    }) || [];
    
    // Atualizar contador
    countSpan.textContent = filteredCategories.length;
    resultsDiv.classList.remove('hidden');
    
    // Renderizar categorias filtradas
    gridDiv.innerHTML = renderFilteredCategories(filteredCategories);
  });
  
  // Limpar pesquisa com Escape
  searchInput.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
      this.value = '';
      this.dispatchEvent(new Event('input'));
    }
  });
}

// Fun√ß√£o para renderizar todas as categorias
// Fun√ß√£o renderAllCategories movida para features/categories
const renderAllCategories = async () => {
  const { renderAllCategories: renderAllCat } = await import('@features/categories/CategoriesPage.js');
  return renderAllCat();
};

// Fun√ß√£o renderFilteredCategories movida para features/categories
const renderFilteredCategories = async (filteredCategories) => {
  const { renderFilteredCategories: renderFilteredCat } = await import('@features/categories/CategoriesPage.js');
  return renderFilteredCat(filteredCategories);
};

// Fun√ß√£o router simplificada
async function router(path) {
  // Normalizar path removendo query string (ex: ?ym=YYYY-MM)
  const cleanPath = (path || '').split('?')[0] || '/dashboard';
  console.log('üîÑ Router chamado com path:', path, '‚Üí normalizado:', cleanPath);
  console.log('üîÑ Estado atual:', {
    currentUser: !!window.appState?.currentUser,
    currentBudget: !!window.appState?.currentBudget,
    hash: window.location.hash
  });
  
  // Atualizar t√≠tulo da p√°gina
  updatePageTitle(cleanPath);
  
  // Aplicar modo de compacta√ß√£o
  if (window.applyCompactMode) {
    window.applyCompactMode();
  }
  
  switch (cleanPath) {
    case '/dashboard':
      console.log('üîÑ Renderizando dashboard...');
      await renderDashboard();
      renderBottomNav('/dashboard');
      console.log('‚úÖ Dashboard renderizado');
      break;
    case '/transactions':
      console.log('üîÑ Renderizando transa√ß√µes...');
      renderTransactions();
      renderBottomNav('/transactions');
      console.log('‚úÖ Transa√ß√µes renderizadas');
      break;
    case '/categories':
      console.log('üîÑ Renderizando categorias...');
      await renderCategories();
      renderBottomNav('/categories');
      console.log('‚úÖ Categorias renderizadas');
      break;
    case '/analytics':
      console.log('üîÑ Renderizando an√°lises...');
      try {
        if (typeof renderAnalytics === 'function') {
          await renderAnalytics();
        } else {
          // Fallback: carregar m√≥dulo dinamicamente
          try {
            const mod = await import('./ui/AnalyticsRoute.js');
            if (mod?.renderAnalytics) {
              await mod.renderAnalytics();
            } else if (window.renderAnalytics) {
              await window.renderAnalytics();
            } else {
              throw new Error('Fun√ß√£o renderAnalytics n√£o dispon√≠vel');
            }
          } catch (dynErr) {
            console.error('‚ùå Erro ao importar AnalyticsRoute dinamicamente:', dynErr);
            const content = document.getElementById('app-content');
            if (content) {
              content.innerHTML = `
                <div class="tab-container">
                  <div class="tab-header">
                    <h2 class="tab-title-highlight">üìä An√°lises</h2>
                  </div>
                  <div class="tab-content">
                    <div class="content-spacing">
                      <div class="bg-yellow-50 dark:bg-yellow-900/30 border border-yellow-200 dark:border-yellow-800 text-yellow-800 dark:text-yellow-300 px-4 py-3 rounded mb-4">
                        N√£o foi poss√≠vel carregar o m√≥dulo de an√°lises.
                      </div>
                    </div>
                  </div>
                </div>`;
            }
          }
        }
      } catch (e) {
        console.error('‚ùå Erro ao renderizar an√°lises:', e);
      }
      renderBottomNav('/analytics');
      console.log('‚úÖ An√°lises renderizadas');
      break;
    case '/recorrentes':
      console.log('üîÑ Renderizando recorrentes...');
      if (window._renderRecorrentes || window.renderRecorrentes) {
        (window._renderRecorrentes || window.renderRecorrentes)();
      } else {
        console.warn('‚ö†Ô∏è RecorrentesPage n√£o dispon√≠vel; tentando carregar m√≥dulo diretamente');
        try {
          const mod = await import('./recorrentes/RecorrentesPage.js');
          if (mod?.renderRecorrentes) {
            mod.renderRecorrentes();
          } else {
            const content = document.getElementById('app-content');
            if (content) content.innerHTML = `<div class="p-4">N√£o foi poss√≠vel carregar Recorrentes.</div>`;
          }
        } catch (e) {
          console.error('Erro ao carregar RecorrentesPage.js:', e);
          const content = document.getElementById('app-content');
          if (content) content.innerHTML = `<div class="p-4">Erro ao carregar Recorrentes.</div>`;
        }
      }
      renderFAB();
      renderBottomNav('/recorrentes');
      console.log('‚úÖ Recorrentes renderizadas');
      break;
    case '/notifications':
      console.log('üîÑ Renderizando notifica√ß√µes...');
      if (window.renderNotifications) {
        await window.loadNotifications();
        window.renderNotifications();
      } else {
        // Fallback se a fun√ß√£o n√£o existir
        console.log('‚ö†Ô∏è Fun√ß√£o renderNotifications n√£o encontrada, usando fallback');
        const content = document.getElementById('app-content');
        if (content) {
          content.innerHTML = `
            <div class="tab-container">
              <div class="tab-header">
                <h2 class="tab-title-highlight">Notifica√ß√µes</h2>
              </div>
              <div class="tab-content">
                <div class="content-spacing">
                  <div class="text-center py-8">
                    <div class="text-4xl mb-4">üîî</div>
                    <div class="text-lg font-semibold text-gray-800 dark:text-white mb-2">Notifica√ß√µes</div>
                    <div class="text-gray-600 dark:text-gray-400">Funcionalidade em desenvolvimento</div>
                  </div>
                </div>
              </div>
            </div>
          `;
        }
      }
      renderFAB();
      renderBottomNav('/notifications');
      console.log('‚úÖ Notifica√ß√µes renderizadas');
      break;
    case '/settings':
      console.log('üîÑ Renderizando configura√ß√µes...');
      if (window.renderSettings) {
        window.renderSettings();
      } else {
        console.warn('‚ö†Ô∏è SettingsPage n√£o dispon√≠vel; tentando carregar m√≥dulo diretamente');
        try {
          const mod = await import('./config/SettingsPage.js');
          if (mod?.renderSettings) {
            window.renderSettings = mod.renderSettings;
            await mod.renderSettings();
          } else {
            const content = document.getElementById('app-content');
            if (content) content.innerHTML = `<div class="p-4">N√£o foi poss√≠vel carregar Configura√ß√µes.</div>`;
          }
        } catch (e) {
          console.error('Erro ao carregar SettingsPage.js:', e);
          const content = document.getElementById('app-content');
          if (content) content.innerHTML = `<div class="p-4">Erro ao carregar Configura√ß√µes.</div>`;
        }
      }
      renderFAB();
      renderBottomNav('/settings');
      console.log('‚úÖ Configura√ß√µes renderizadas');
      break;
    default:
      console.log('üîÑ Rota n√£o reconhecida, usando dashboard como fallback');
      await renderDashboard();
      renderBottomNav('/dashboard');
      console.log('‚úÖ Dashboard renderizado (fallback)');
  }
  
  // Atualizar SwipeNavigation ap√≥s navega√ß√£o
  setTimeout(() => {
    if (window.swipeNavigation && window.swipeNavigation.updateCurrentTabIndex) {
      window.swipeNavigation.updateCurrentTabIndex();
      window.swipeNavigation.updateSwipeIndicator();
    }
  }, 200);
  
  // Sempre voltar ao topo ao trocar de aba/rota
  resetScrollPosition();
  // E garantir novamente logo ap√≥s o tick (caso de renders ass√≠ncronos)
  setTimeout(resetScrollPosition, 50);
  

}

// Exportar fun√ß√£o router para uso global
window.router = router;

// Fun√ß√£o para editar transa√ß√£o
window.editTransaction = function(transactionId) {
  console.log('üîß Editando transa√ß√£o:', transactionId);
  
  if (!transactionId) {
    console.error('‚ùå ID da transa√ß√£o n√£o fornecido');
    return;
  }
  
  // Buscar a transa√ß√£o
  const transaction = window.appState.transactions?.find(t => t.id === transactionId);
  
  if (!transaction) {
    console.error('‚ùå Transa√ß√£o n√£o encontrada:', transactionId);
    if (window.Snackbar) {
      window.Snackbar({
        message: 'Transa√ß√£o n√£o encontrada',
        type: 'error'
      });
    }
    return;
  }
  
  console.log('‚úÖ Transa√ß√£o encontrada:', transaction);
  
  // Abrir modal de edi√ß√£o com os dados da transa√ß√£o
  if (window.showAddTransactionModal) {
    window.showAddTransactionModal(transaction);
  } else {
    console.error('‚ùå Fun√ß√£o showAddTransactionModal n√£o dispon√≠vel');
    if (window.Snackbar) {
      window.Snackbar({
        message: 'Fun√ß√£o de edi√ß√£o n√£o dispon√≠vel',
        type: 'error'
      });
    }
  }
};

// Fun√ß√£o para editar categoria
window.editCategory = function(categoryId) {
  console.log('üîß Editando categoria:', categoryId);
  
  if (!categoryId) {
    console.error('‚ùå ID da categoria n√£o fornecido');
    return;
  }
  
  // Buscar a categoria
  const category = window.appState.categories?.find(c => c.id === categoryId);
  
  if (!category) {
    console.error('‚ùå Categoria n√£o encontrada:', categoryId);
    if (window.Snackbar) {
      window.Snackbar({
        message: 'Categoria n√£o encontrada',
        type: 'error'
      });
    }
    return;
  }
  
  console.log('‚úÖ Categoria encontrada:', category);
  
  // Abrir modal de edi√ß√£o com os dados da categoria
  if (window.showAddCategoryModal) {
    window.showAddCategoryModal(category);
  } else {
    console.error('‚ùå Fun√ß√£o showAddCategoryModal n√£o dispon√≠vel');
    if (window.Snackbar) {
      window.Snackbar({
        message: 'Fun√ß√£o de edi√ß√£o n√£o dispon√≠vel',
        type: 'error'
      });
    }
  }
};

// Fun√ß√£o para mostrar hist√≥rico da categoria
window.showCategoryHistory = function(categoryId) {
  console.log('üìä Mostrando hist√≥rico da categoria:', categoryId);
  
  if (!categoryId) {
    console.error('‚ùå ID da categoria n√£o fornecido');
    return;
  }
  
  // Buscar a categoria
  const category = window.appState.categories?.find(c => c.id === categoryId);
  
  if (!category) {
    console.error('‚ùå Categoria n√£o encontrada:', categoryId);
    if (window.Snackbar) {
      window.Snackbar({
        message: 'Categoria n√£o encontrada',
        type: 'error'
      });
    }
    return;
  }
  
  // Buscar transa√ß√µes desta categoria
  const transactions = window.appState.transactions?.filter(t => t.categoriaId === categoryId) || [];
  
  // Criar modal com hist√≥rico
  if (window.Modal) {
    const totalGasto = transactions.reduce((sum, t) => sum + parseFloat(t.valor), 0);
    
    window.Modal({
      title: `üìä Hist√≥rico: ${category.nome}`,
      content: `
        <div class="space-y-4">
          <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-4">
            <div class="flex justify-between items-center">
              <span class="text-sm text-gray-600 dark:text-gray-400">Total movimentado:</span>
              <span class="font-bold text-lg ${category.tipo === 'receita' ? 'text-green-600' : 'text-red-600'}">
                R$ ${totalGasto.toFixed(2)}
              </span>
            </div>
            <div class="flex justify-between items-center mt-2">
              <span class="text-sm text-gray-600 dark:text-gray-400">N√∫mero de transa√ß√µes:</span>
              <span class="font-medium">${transactions.length}</span>
            </div>
          </div>
          
          <div class="max-h-96 overflow-y-auto space-y-2">
            ${transactions.length === 0 ? `
              <div class="text-center py-8">
                <div class="text-4xl mb-2">üìä</div>
                <p class="text-gray-500 dark:text-gray-400">Nenhuma transa√ß√£o encontrada para esta categoria</p>
              </div>
            ` : transactions.map(t => {
              const data = t.createdAt && t.createdAt.toDate ? t.createdAt.toDate().toLocaleDateString('pt-BR') : new Date(t.createdAt).toLocaleDateString('pt-BR');
              return `
                <div class="bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-lg p-3 flex justify-between items-center">
                  <div>
                    <div class="font-medium text-gray-900 dark:text-gray-100">${t.descricao}</div>
                    <div class="text-sm text-gray-500 dark:text-gray-400">${data}</div>
                  </div>
                  <div class="font-medium ${t.tipo === 'receita' ? 'text-green-600' : 'text-red-600'}">
                    ${t.tipo === 'receita' ? '+' : '-'}R$ ${parseFloat(t.valor).toFixed(2)}
                  </div>
                </div>
              `;
            }).join('')}
          </div>
        </div>
      `,
      confirmText: 'Fechar',
      onConfirm: () => {}
    });
  } else {
    console.error('‚ùå Fun√ß√£o Modal n√£o dispon√≠vel');
  }
};

// Fun√ß√£o renderFAB movida para features/ui
const renderFAB = async () => {
  const { renderFAB } = await import('@features/ui/UIService.js');
  return renderFAB();
};

// Fun√ß√£o renderBottomNav movida para features/ui
const renderBottomNav = async (activeRoute) => {
  const { renderBottomNav } = await import('@features/ui/UIService.js');
  return renderBottomNav(activeRoute);
};

// Fun√ß√£o showLoading movida para features/ui
const showLoading = async (show) => {
  const { showLoading } = await import('@features/ui/UIService.js');
  return showLoading(show);
};

// Fun√ß√£o setupNavigation movida para features/navigation
const setupNavigation = async () => {
  const { setupNavigation } = await import('@features/navigation/NavigationService.js');
  return setupNavigation();
};

// Fun√ß√£o resetScrollPosition movida para features/ui
const resetScrollPosition = async () => {
  const { resetScrollPosition } = await import('@features/ui/UIService.js');
  return resetScrollPosition();
};

// Fun√ß√£o setupLoginButton movida para features/auth
const setupLoginButton = async () => {
  const { setupLoginButton } = await import('@features/auth/AuthService.js');
  return setupLoginButton();
};

// Fun√ß√£o checkAuthState movida para features/auth
const checkAuthState = async () => {
  const { checkAuthState } = await import('@features/auth/AuthService.js');
  return checkAuthState();
};

// Inicializa√ß√£o da aplica√ß√£o
document.addEventListener('DOMContentLoaded', async () => {
  console.log('üöÄ Iniciando aplica√ß√£o...');
  
  // Estado global da aplica√ß√£o
  window.appState = {
    currentUser: null,
    currentBudget: null,
    transactions: [],
    categories: [],
    budgets: [],
    recorrentes: [],
    isInitialized: false
  };



  // Aplicar modo de compacta√ß√£o globalmente
  if (window.applyCompactMode) {
    window.applyCompactMode();
  }

  // Teste: Verificar se a navega√ß√£o est√° sendo renderizada
  console.log('üîç Teste: Verificando elementos de navega√ß√£o...');
  const bottomNav = document.getElementById('bottom-nav');
  console.log('üîç Elemento bottom-nav encontrado:', !!bottomNav);
  if (bottomNav) {
    console.log('üîç Conte√∫do do bottom-nav:', bottomNav.innerHTML);
  }

  // Verificar estado de autentica√ß√£o
  const isAuthenticated = await checkAuthState();
  
  // Configurar navega√ß√£o e login apenas se autenticado
  if (isAuthenticated) {
    setupNavigation();
    
    // Mostrar loading
    showLoading(true);
    
    // Carregar dados do usu√°rio
    try {
      console.log('üìä Carregando dados do usu√°rio...');
      await loadBudgets();
      await selectDefaultBudget();
      await loadTransactions();
      await loadCategories();
      await loadRecorrentes();
      await loadNotifications();
      await listenNotifications();
      await startAllListeners(window.appState.currentBudget?.id);
      console.log('‚úÖ Dados carregados com sucesso');
      
      // Aguardar um pouco para garantir que os dados foram carregados
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Renderizar dashboard inicial ap√≥s carregar dados
      console.log('üîÑ Renderizando dashboard inicial...');
      await renderDashboard();
      renderBottomNav('/dashboard');
      renderFAB();
      console.log('‚úÖ Dashboard inicial renderizado');
      
    } catch (error) {
      console.error('‚ùå Erro ao carregar dados:', error);
      // Mostrar feedback visual do erro
      if (window.Snackbar) {
        window.Snackbar({
          message: 'Erro ao carregar dados. Tente recarregar a p√°gina.',
          type: 'error'
        });
      }
    } finally {
      // Esconder loading
      showLoading(false);
    }
    
    // Inicializar sistema de swipe navigation ap√≥s autentica√ß√£o
    setTimeout(() => {
      try {
        // Verificar se o container existe
        const container = document.querySelector('#app-content');
        if (!container) {
          console.warn('‚ö†Ô∏è Container #app-content n√£o encontrado, tentando novamente em 500ms...');
          setTimeout(() => {
            if (document.querySelector('#app-content')) {
              window.swipeNavigation = new SwipeNavigation();
              console.log('‚úÖ SwipeNavigation inicializado (tentativa 2)');
            }
          }, 500);
          return;
        }
        
        // Verificar se o usu√°rio est√° autenticado
        if (!window.appState?.currentUser) {
          console.warn('‚ö†Ô∏è Usu√°rio n√£o autenticado, aguardando...');
          return;
        }
        
        window.swipeNavigation = new SwipeNavigation();
        console.log('‚úÖ SwipeNavigation inicializado com sucesso');
        
      } catch (error) {
        console.error('‚ùå Erro ao inicializar SwipeNavigation:', error);
      }
    }, 1000);
    
    // Marcar como inicializado
    window.appState.isInitialized = true;
  }
  
  setupLoginButton();
  
  console.log('‚úÖ Aplica√ß√£o iniciada com sucesso!');
});

// Fun√ß√£o wrapper para adicionar categoria com confirma√ß√£o
window.addCategoryWithConfirmation = async function (categoryData) {
  return new Promise((resolve, reject) => {
    window.showConfirmationModal({
      title: 'Adicionar Categoria',
      message: `Deseja adicionar a categoria "${categoryData.nome}"?`,
      confirmText: 'Sim, Adicionar',
      confirmColor: 'bg-green-500 hover:bg-green-600',
      onConfirm: async () => {
        try {
          const result = await window.addCategory(categoryData);
          if (window.Snackbar) {
            window.Snackbar({
              message: '‚úÖ Categoria adicionada com sucesso!',
              type: 'success'
            });
          }
          resolve(result);
        } catch (error) {
          console.error('‚ùå Erro ao adicionar categoria:', error);
          if (window.Snackbar) {
            window.Snackbar({
              message: 'Erro ao adicionar categoria: ' + error.message,
              type: 'error'
            });
          }
          reject(error);
        }
      },
      onCancel: () => {
        console.log('‚ùå Adi√ß√£o de categoria cancelada pelo usu√°rio');
        reject(new Error('Opera√ß√£o cancelada pelo usu√°rio'));
      }
    });
  });
};

// Exportar fun√ß√µes globais
window.renderDashboard = renderDashboard;
window.renderTransactions = renderTransactions;
window.renderCategories = renderCategories;
window.router = router;
window.addTransaction = addTransaction;
window.updateTransaction = updateTransaction;
window.deleteTransaction = deleteTransaction;
window.addCategory = addCategory;
window.updateCategory = updateCategory;
window.deleteCategory = deleteCategory;
window.addBudget = addBudget;
window.loadTransactions = loadTransactions;
window.loadCategories = loadCategories;
window.loadBudgets = loadBudgets;
window.selectDefaultBudget = selectDefaultBudget;
window.loadRecorrentes = loadRecorrentes;
window.closeModalAlertas = closeModalAlertas;
window.calcularNumeroParcela = calcularNumeroParcela;
window.showLoading = showLoading;
window.toggleLoginPage = toggleLoginPage;
window.refreshCurrentView = refreshCurrentView;
window.logout = logout;

// ===== SISTEMA DE VOZ REESTRUTURADO =====
// Importar o novo sistema de voz
import { VoiceSystem } from './ui/VoiceSystem.js';

// Inicializar sistema de voz global
let voiceSystem = null;

// Fun√ß√£o getVoiceSystem movida para features/voice
const getVoiceSystem = async () => {
  const { getVoiceSystem: getVoiceSys } = await import('@features/voice/VoiceService.js');
  return getVoiceSys();
};

// Fun√ß√£o openVoiceModal movida para features/voice
window.openVoiceModal = async function(type = 'transaction') {
  const { openVoiceModal } = await import('@features/voice/VoiceService.js');
  return openVoiceModal(type);
};

// Fun√ß√£o closeVoiceModal movida para features/voice
window.closeVoiceModal = async function() {
  const { closeVoiceModal } = await import('@features/voice/VoiceService.js');
  return closeVoiceModal();
};

// Fun√ß√£o startVoiceRecognition movida para features/voice
window.startVoiceRecognition = async function(type = 'transaction') {
  const { startVoiceRecognition } = await import('@features/voice/VoiceService.js');
  return startVoiceRecognition(type);
};

// Fun√ß√£o processVoiceCommand movida para features/voice
const processVoiceCommand = async (transcript, type) => {
  const { processVoiceCommand: processVoiceCmd } = await import('@features/voice/VoiceService.js');
  return processVoiceCmd(transcript, type);
};

// Fun√ß√£o parseNumeroPorExtenso movida para features/voice
const parseNumeroPorExtenso = async (palavra) => {
  const { parseNumeroPorExtenso: parseNum } = await import('@features/voice/VoiceService.js');
  return parseNum(palavra);
};

// Fun√ß√£o processTransactionVoice movida para features/voice
const processTransactionVoice = async (transcript) => {
  const { processTransactionVoice: processTxVoice } = await import('@features/voice/VoiceService.js');
  return processTxVoice(transcript);
};

// Fun√ß√£o processCategoryVoice movida para features/voice
const processCategoryVoice = async (transcript) => {
  const { processCategoryVoice: processCatVoice } = await import('@features/voice/VoiceService.js');
  return processCatVoice(transcript);
};

// Fun√ß√£o normalizarTexto movida para features/voice
const normalizarTexto = async (str) => {
  const { normalizarTexto: normalizeText } = await import('@features/voice/VoiceService.js');
  return normalizeText(str);
};

// Fun√ß√£o downloadBackup movida para features/backup
window.downloadBackup = async function () {
  const { downloadBackup } = await import('@features/backup/BackupService.js');
  return downloadBackup();
};

// Fun√ß√£o exportToExcel movida para features/backup
window.exportToExcel = async function () {
  const { exportToExcel } = await import('@features/backup/BackupService.js');
  return exportToExcel();
};

// Fun√ß√£o exportToPDF movida para features/backup
window.exportToPDF = async function () {
  const { exportToPDF } = await import('@features/backup/BackupService.js');
  return exportToPDF();
};

// Fun√ß√£o exportReadmePDF movida para features/backup
window.exportReadmePDF = async function () {
  const { exportReadmePDF } = await import('@features/backup/BackupService.js');
  return exportReadmePDF();
}; 

// Fun√ß√£o showExportOptions movida para features/backup
window.showExportOptions = async function () {
  const { showExportOptions } = await import('@features/backup/BackupService.js');
  return showExportOptions();
};

// ===== CONFIGURA√á√ÉO DOS BOT√ïES DA TELA INICIAL =====
function setupHeaderButtons() {
  console.log('üîß Configurando bot√µes do header...');
  
  // Verificar se os elementos existem
  const voiceModal = document.getElementById('voice-modal');
  
  console.log('üîß Elementos encontrados:', {
    voiceModal: !!voiceModal
  });
  
  // Bot√£o de voz movido para o FAB
  
  // Bot√£o de tema - configura√ß√£o removida para evitar duplica√ß√£o
  // A configura√ß√£o do tema √© feita apenas uma vez na inicializa√ß√£o do app

  // Configurar bot√£o de fechar modal de voz
  const closeVoiceModalBtn = document.getElementById('close-voice-modal');
  if (closeVoiceModalBtn) {
    closeVoiceModalBtn.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      console.log('‚ùå Close voice modal button clicked');
      closeVoiceModal();
    });
    console.log('‚úÖ Close voice modal button configurado');
  }

  // Fechar modal de voz ao clicar fora
  if (voiceModal) {
    voiceModal.addEventListener('click', (e) => {
      if (e.target === voiceModal) {
        closeVoiceModal();
      }
    });
  }
}

// Fun√ß√µes do drawer removidas - funcionalidades movidas para as abas do rodap√©

// Fun√ß√£o para abrir modal de voz
function openVoiceModal() {
  const voiceModal = document.getElementById('voice-modal');
  const voiceContent = voiceModal?.querySelector('.voice-content');
  
  if (voiceModal && voiceContent) {
    // Mostrar modal
    voiceModal.style.display = 'flex';
    
    // Animar abertura com fundo mais opaco
    voiceModal.style.pointerEvents = 'auto';
    voiceModal.style.background = 'rgba(0, 0, 0, 0.95)';
    voiceModal.style.backdropFilter = 'blur(30px)';
    voiceContent.style.transform = 'scale(1)';
    voiceContent.style.opacity = '1';
    
    // Adicionar classe ao body para esconder bot√£o de voz
    document.body.classList.add('voice-modal-open');
    
    // Iniciar reconhecimento de voz
    if (window.startVoiceRecognition) {
      setTimeout(() => {
        window.startVoiceRecognition('transaction');
      }, 500);
    }
    
    console.log('üé§ Modal de voz aberto');
  }
}

// Tornar fun√ß√£o global para uso no FAB
window.openVoiceModal = openVoiceModal;

// Fun√ß√£o para fechar modal de voz
function closeVoiceModal() {
  const voiceModal = document.getElementById('voice-modal');
  const voiceContent = voiceModal?.querySelector('.voice-content');
  
  if (voiceModal && voiceContent) {
    // Animar fechamento
    voiceContent.style.transform = 'scale(0.95)';
    voiceContent.style.opacity = '0';
    voiceModal.style.background = 'rgba(0, 0, 0, 0)';
    voiceModal.style.backdropFilter = 'blur(0px)';
    
    // Remover classe do body para mostrar bot√£o de voz
    document.body.classList.remove('voice-modal-open');
    
    setTimeout(() => {
      voiceModal.style.pointerEvents = 'none';
      // Garantir que o modal n√£o interfira com a tela principal
      voiceModal.style.display = 'none';
    }, 300);
    
    console.log('üé§ Modal de voz fechado');
  }
}

// Fun√ß√£o para carregar or√ßamentos no drawer
// Fun√ß√£o loadDrawerBudgets removida - agora gerenciada pela classe Drawer

// ===== CONFIGURA√á√ÉO DOS BOT√ïES DA TELA DE CATEGORIAS =====
function setupCategoryButtons() {
  console.log('üîß Configurando bot√µes da tela de categorias...');
  
  // Bot√£o de adicionar categoria
  const addCategoryBtn = document.getElementById('add-category-btn');
  if (addCategoryBtn) {
    addCategoryBtn.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      console.log('üìÇ Add category button clicked');
      
      if (window.showAddCategoryModal) {
        window.showAddCategoryModal();
      } else {
        console.warn('‚ö†Ô∏è Fun√ß√£o de adicionar categoria n√£o dispon√≠vel');
        if (window.Snackbar) {
          window.Snackbar.show('Funcionalidade de adicionar categoria n√£o dispon√≠vel', 'warning');
        }
      }
    });
    console.log('‚úÖ Add category button configurado');
  }
  
  // Bot√£o de migrar
  const migrarBtn = document.querySelector('button[onclick="window.migrarTransacoesAntigas()"]');
  if (migrarBtn) {
    migrarBtn.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      console.log('üîÑ Migrar button clicked');
      
      if (window.migrarTransacoesAntigas) {
        window.migrarTransacoesAntigas();
      } else {
        console.warn('‚ö†Ô∏è Fun√ß√£o de migrar n√£o dispon√≠vel');
      }
    });
    console.log('‚úÖ Migrar button configurado');
  }
  
  // Bot√£o de corrigir
  const corrigirBtn = document.querySelector('button[onclick="window.corrigirTipoCategoria()"]');
  if (corrigirBtn) {
    corrigirBtn.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      console.log('üîß Corrigir button clicked');
      
      if (window.corrigirTipoCategoria) {
        window.corrigirTipoCategoria();
      } else {
        console.warn('‚ö†Ô∏è Fun√ß√£o de corrigir n√£o dispon√≠vel');
      }
    });
    console.log('‚úÖ Corrigir button configurado');
  }
}

// ===== CONFIGURA√á√ÉO DOS BOT√ïES DA TELA DE TRANSA√á√ïES =====
function setupTransactionButtons() {
  console.log('üîß Configurando bot√µes da tela de transa√ß√µes...');
  
  // Bot√£o de adicionar transa√ß√£o
  const addTransactionBtn = document.getElementById('add-transaction-btn');
  if (addTransactionBtn) {
    addTransactionBtn.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      console.log('üìã Add transaction button clicked');
      
      if (window.showAddTransactionModal) {
        window.showAddTransactionModal();
      } else {
        console.warn('‚ö†Ô∏è Fun√ß√£o de adicionar transa√ß√£o n√£o dispon√≠vel');
        if (window.Snackbar) {
          window.Snackbar.show('Funcionalidade de adicionar transa√ß√£o n√£o dispon√≠vel', 'warning');
        }
      }
    });
    console.log('‚úÖ Add transaction button configurado');
  }
  
  // Bot√£o de voz
  const voiceBtn = document.getElementById('voice-btn');
  if (voiceBtn) {
    voiceBtn.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      console.log('üé§ Voice button clicked');
      
      if (window.startVoiceRecognition) {
        window.startVoiceRecognition('transaction');
      } else {
        console.warn('‚ö†Ô∏è Fun√ß√£o de voz n√£o dispon√≠vel');
      }
    });
    console.log('‚úÖ Voice button configurado');
  } else {
    console.warn('‚ö†Ô∏è Bot√£o de voz n√£o encontrado');
  }
}

// ===== CONFIGURA√á√ÉO DOS BOT√ïES DO DASHBOARD =====
function setupDashboardButtons() {
  console.log('üîß Configurando bot√µes do dashboard...');
  
  // Bot√£o de exportar
  const exportBtn = document.getElementById('export-btn');
  if (exportBtn) {
    exportBtn.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      console.log('üì§ Export button clicked');
      
      if (window.showExportOptions) {
        window.showExportOptions();
      } else {
        console.warn('‚ö†Ô∏è Fun√ß√£o de exporta√ß√£o n√£o dispon√≠vel');
        if (window.Snackbar) {
          window.Snackbar({
            message: 'Funcionalidade de exporta√ß√£o n√£o dispon√≠vel',
            type: 'warning'
          });
        }
      }
    });
    console.log('‚úÖ Export button configurado');
  }
  
  // Bot√£o de tema no Dashboard
  const themeBtn = document.getElementById('theme-toggle-btn');
  if (themeBtn) {
    console.log('Dashboard: Configurando bot√£o de tema...');
    if (window.setupThemeToggle) {
      window.setupThemeToggle('theme-toggle-btn');
    } else {
      console.warn('‚ö†Ô∏è setupThemeToggle n√£o dispon√≠vel');
    }
  }
  
  // Bot√µes de navega√ß√£o de m√™s
  const mesAnterior = document.getElementById('mes-anterior');
  const mesProximo = document.getElementById('mes-proximo');
  
  if (mesAnterior) {
    mesAnterior.addEventListener('click', async (e) => {
      e.preventDefault();
      e.stopPropagation();
      console.log('‚¨ÖÔ∏è M√™s anterior clicked');
      
  const label = document.getElementById('mes-display')?.textContent || '';
  const parts = label.trim().split(/\s+/);
  const currentMonth = parts[0];
  const currentYear = parseInt(parts[1], 10);
      const meses = [
        'Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Maio', 'Junho',
        'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'
      ];
      const currentMonthIndex = meses.indexOf(currentMonth);
      
      let newYear = currentYear;
      let newMonth = currentMonthIndex;
      
      if (currentMonthIndex === 0) {
        newYear = currentYear - 1;
        newMonth = 11;
      } else {
        newMonth = currentMonthIndex - 1;
      }
      
      if (window.renderDashboard) {
        await window.renderDashboard(newYear, newMonth + 1);
      }
    });
    console.log('‚úÖ M√™s anterior button configurado');
  }
  
  if (mesProximo) {
    mesProximo.addEventListener('click', async (e) => {
      e.preventDefault();
      e.stopPropagation();
      console.log('‚û°Ô∏è M√™s pr√≥ximo clicked');
      
  const label = document.getElementById('mes-display')?.textContent || '';
  const parts = label.trim().split(/\s+/);
  const currentMonth = parts[0];
  const currentYear = parseInt(parts[1], 10);
      const meses = [
        'Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Maio', 'Junho',
        'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'
      ];
      const currentMonthIndex = meses.indexOf(currentMonth);
      
      let newYear = currentYear;
      let newMonth = currentMonthIndex;
      
      if (currentMonthIndex === 11) {
        newYear = currentYear + 1;
        newMonth = 0;
      } else {
        newMonth = currentMonthIndex + 1;
      }
      
      if (window.renderDashboard) {
        await window.renderDashboard(newYear, newMonth + 1);
      }
    });
    console.log('‚úÖ M√™s pr√≥ximo button configurado');
  }
}

window.migrarTransacoesAntigas = async function () {
  try {
    console.log('üîÑ Iniciando migra√ß√£o de transa√ß√µes antigas...');
    const user = window.appState.currentUser;
    if (!user) {
      Snackbar({ message: 'Usu√°rio n√£o autenticado', type: 'error' });
      return;
    }

    const budget = window.appState.currentBudget;
    if (!budget) {
      Snackbar.show('Or√ßamento n√£o selecionado', 'error');
      return;
    }

    // Buscar transa√ß√µes sem categoriaId
    const q = query(
      collection(db, 'transactions'),
      where('budgetId', '==', budget.id),
      where('categoriaId', '==', null)
    );
    
    const querySnapshot = await getDocs(q);
    const transacoesSemCategoria = querySnapshot.docs;
    
    if (transacoesSemCategoria.length === 0) {
      Snackbar({ message: 'Nenhuma transa√ß√£o para migrar', type: 'info' });
      return;
    }

    // Criar categoria padr√£o se n√£o existir
    let categoriaPadrao = window.appState.categories.find(cat => cat.nome === 'Geral');
    if (!categoriaPadrao) {
      const categoriaData = {
        nome: 'Geral',
        descricao: 'Categoria padr√£o para transa√ß√µes antigas',
        tipo: 'despesa',
        cor: '#6B7280',
        limite: 0
      };
      const categoriaId = await addCategory(categoriaData);
      await loadCategories();
      categoriaPadrao = window.appState.categories.find(cat => cat.id === categoriaId);
    }

    // Atualizar transa√ß√µes
    let atualizadas = 0;
    for (const doc of transacoesSemCategoria) {
      await updateDoc(doc.ref, {
        categoriaId: categoriaPadrao.id,
        updatedAt: serverTimestamp()
      });
      atualizadas++;
    }

    await loadTransactions();
    Snackbar({ message: `${atualizadas} transa√ß√µes migradas para categoria "Geral"`, type: 'success' });
  } catch (error) {
    console.error('‚ùå Erro na migra√ß√£o:', error);
    Snackbar({ message: 'Erro ao migrar transa√ß√µes', type: 'error' });
  }
};

window.corrigirTipoCategoria = async function () {
  try {
    console.log('üîß Iniciando corre√ß√£o de tipos de categoria...');
    const user = window.appState.currentUser;
    if (!user) {
      Snackbar({ message: 'Usu√°rio n√£o autenticado', type: 'error' });
      return;
    }

    const budget = window.appState.currentBudget;
    if (!budget) {
      Snackbar.show('Or√ßamento n√£o selecionado', 'error');
      return;
    }

    // Buscar categorias sem tipo
    const q = query(
      collection(db, 'categories'),
      where('budgetId', '==', budget.id),
      where('tipo', '==', null)
    );
    
    const querySnapshot = await getDocs(q);
    const categoriasSemTipo = querySnapshot.docs;
    
    if (categoriasSemTipo.length === 0) {
      Snackbar({ message: 'Nenhuma categoria para corrigir', type: 'info' });
      return;
    }

    // Atualizar categorias
    let corrigidas = 0;
    for (const doc of categoriasSemTipo) {
      await updateDoc(doc.ref, {
        tipo: 'despesa', // Tipo padr√£o
        updatedAt: serverTimestamp()
      });
      corrigidas++;
    }

    await loadCategories();
    Snackbar({ message: `${corrigidas} categorias corrigidas`, type: 'success' });
  } catch (error) {
    console.error('‚ùå Erro na corre√ß√£o:', error);
    Snackbar({ message: 'Erro ao corrigir categorias', type: 'error' });
  }
};

// ===== FUN√á√ïES DE NOTIFICA√á√ïES =====

// Fun√ß√£o para carregar notifica√ß√µes do usu√°rio
async function loadNotifications() {
  try {
    const user = auth.currentUser;
    if (!user) return [];
    const { listByRecipient } = await import('@data/repositories/notificationsRepo.js');
    const notifications = await listByRecipient(user.uid, 50);
    window.appState.notifications = notifications;
    console.log('üìß Notifica√ß√µes carregadas:', notifications.length);
    updateNotificationBadge();
    return notifications;
  } catch (error) {
    console.error('Erro ao carregar notifica√ß√µes:', error);
    return [];
  }
}

// Fun√ß√£o para marcar notifica√ß√£o como lida
async function markNotificationAsRead(notificationId) {
  try {
  const { markAsRead } = await import('@data/repositories/notificationsRepo.js');
  await markAsRead(notificationId);
    
    // Atualizar estado local
    const notificationIndex = window.appState.notifications.findIndex(n => n.id === notificationId);
    if (notificationIndex !== -1) {
      window.appState.notifications[notificationIndex].read = true;
    }
    
    updateNotificationBadge();
  } catch (error) {
    console.error('Erro ao marcar notifica√ß√£o como lida:', error);
  }
}

// Fun√ß√£o para marcar todas as notifica√ß√µes como lidas
async function markAllNotificationsAsRead() {
  try {
    const unreadNotifications = window.appState.notifications?.filter(n => !n.read) || [];
    if (unreadNotifications.length === 0) {
      Snackbar({ message: 'Nenhuma notifica√ß√£o n√£o lida', type: 'info' });
      return;
    }

  const { markManyAsRead } = await import('@data/repositories/notificationsRepo.js');
  await markManyAsRead(unreadNotifications.map(n => n.id));
    
    // Atualizar estado local
    window.appState.notifications.forEach(n => n.read = true);
    updateNotificationBadge();
    
    Snackbar({ message: `${unreadNotifications.length} notifica√ß√µes marcadas como lidas`, type: 'success' });
    
    // Re-renderizar se estiver na p√°gina de notifica√ß√µes
    if (window.location.hash === '#/notifications') {
      renderNotifications();
    }
  } catch (error) {
    console.error('Erro ao marcar notifica√ß√µes como lidas:', error);
    Snackbar({ message: 'Erro ao marcar notifica√ß√µes como lidas', type: 'error' });
  }
}

// Fun√ß√£o para atualizar badge de notifica√ß√µes
let __badgeUpdateTimer = null;
function updateNotificationBadge() {
  if (__badgeUpdateTimer) {
    clearTimeout(__badgeUpdateTimer);
  }
  __badgeUpdateTimer = setTimeout(() => {
  const unreadCount = window.appState.notifications?.filter(n => !n.read).length || 0;
  
  // Atualizar badge na navega√ß√£o
  const notificationBtn = document.querySelector('[data-route="/notifications"]');
  if (notificationBtn) {
    let badge = notificationBtn.querySelector('.notification-badge');
    if (!badge) {
      badge = document.createElement('span');
      badge.className = 'notification-badge absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center';
      notificationBtn.style.position = 'relative';
      notificationBtn.appendChild(badge);
    }
    
    if (unreadCount > 0) {
      badge.textContent = unreadCount > 99 ? '99+' : unreadCount;
      badge.style.display = 'flex';
    } else {
      badge.style.display = 'none';
    }
  }
  __badgeUpdateTimer = null;
  }, 100);
}

// Listener para notifica√ß√µes em tempo real
let unsubscribeNotifications = null;

async function listenNotifications() {
  if (unsubscribeNotifications) {
    unsubscribeNotifications();
  }

  const user = auth.currentUser;
  if (!user) {
    console.log('‚ö†Ô∏è Usu√°rio n√£o autenticado, n√£o iniciando listener de notifica√ß√µes');
    return;
  }

  // Verificar se h√° um or√ßamento atual
  if (!window.appState.currentBudget) {
    console.log('‚ö†Ô∏è Nenhum or√ßamento selecionado, n√£o iniciando listener de notifica√ß√µes');
    return;
  }

  try {
    const { listenByRecipient } = await import('@data/repositories/notificationsRepo.js');
    unsubscribeNotifications = listenByRecipient(user.uid, (notifications) => {
      console.log('üìß Listener de notifica√ß√µes executado!');
      const prev = window.appState.notifications || [];
      const prevIds = new Set(prev.map(n => n.id));

      window.appState.notifications = notifications;
      console.log('üìß Notifica√ß√µes atualizadas:', notifications.length);
      
      // Atualizar badge
      updateNotificationBadge();

      // Mostrar toast em tempo real para novas notifica√ß√µes (evitar spam no primeiro load)
      try {
        const isFirstLoad = !window.__notificationsInitialized;
        if (!isFirstLoad) {
          const newOnes = notifications.filter(n => !prevIds.has(n.id));
          const toastsEnabled = (typeof window.getNotificationsToastsEnabled === 'function') ? window.getNotificationsToastsEnabled() : true;
          if (toastsEnabled && newOnes.length > 0 && typeof Snackbar === 'function' && window.location.hash !== '#/notifications') {
            newOnes.forEach(n => {
              const who = n.senderName || 'Usu√°rio';
              let message = `üîî ${who} `;
              let type = 'info';
              switch (n.type) {
                case 'deleted_transaction':
                  message += `excluiu uma transa√ß√£o${n.transactionDescricao ? `: ${n.transactionDescricao}` : ''}`;
                  type = 'warning';
                  break;
                case 'updated_transaction':
                  message += `atualizou uma transa√ß√£o${n.transactionDescricao ? `: ${n.transactionDescricao}` : ''}`;
                  type = 'info';
                  break;
                case 'new_transaction':
                  message += `adicionou uma transa√ß√£o${n.transactionDescricao ? `: ${n.transactionDescricao}` : ''}`;
                  type = 'info';
                  break;
                case 'category_added':
                  message += `criou a categoria${n.categoryNome ? `: ${n.categoryNome}` : ''}`;
                  type = 'success';
                  break;
                case 'category_updated':
                  message += `atualizou a categoria${n.categoryNome ? `: ${n.categoryNome}` : ''}`;
                  type = 'info';
                  break;
                case 'category_deleted':
                  message += `excluiu a categoria${n.categoryNome ? `: ${n.categoryNome}` : ''}`;
                  type = 'warning';
                  break;
                default:
                  message += 'realizou uma a√ß√£o';
                  type = 'info';
              }
              Snackbar({ message, type });
            });
          }
        }
        window.__notificationsInitialized = true;
      } catch (toastErr) {
        console.warn('Falha ao exibir toast de notifica√ß√£o:', toastErr);
      }
      
      // Se estiver na p√°gina de notifica√ß√µes, re-renderizar
      if (window.location.hash === '#/notifications') {
        renderNotifications();
      }
    });
  } catch (error) {
    console.error('‚ùå Erro ao configurar listener de notifica√ß√µes:', error);
  }
}

// Fun√ß√£o para renderizar notifica√ß√µes
async function renderNotifications() {
  const content = document.getElementById('app-content');
  
  if (!content) return;

  // Carregar notifica√ß√µes antes de renderizar
  await loadNotifications();
  const notifications = window.appState.notifications || [];
  // Aplicar filtros e agrupamento
  const filters = getNotifFilters();
  const filtered = applyNotificationFilters(notifications, filters);
  const grouped = groupNotificationsByDay(filtered);
  
  // Calcular estat√≠sticas das notifica√ß√µes
  const totalNotificacoes = filtered.length;
  const notificacoesNaoLidas = filtered.filter(n => !n.read).length;
  const notificacoesLidas = totalNotificacoes - notificacoesNaoLidas;
  const notificacoesHoje = filtered.filter(n => {
    const data = n.createdAt?.toDate ? n.createdAt.toDate() : new Date(n.createdAt);
    const hoje = new Date();
    return data.toDateString() === hoje.toDateString();
  }).length;

  content.innerHTML = `
    <div class="tab-container">
      <div class="tab-header">
  <h2 class="tab-title-highlight">üîî Notifica√ß√µes</h2>
  <div id="notif-period-indicator"></div>
      </div>
      <div class="tab-content">
        <div class="content-spacing">
          
          
          <!-- ========== SE√á√ÉO 1: RESUMO DAS NOTIFICA√á√ïES ========== -->
          <div class="mb-8">
            <div class="flex items-center gap-2 mb-4">
              <div class="w-1 h-6 bg-gradient-to-b from-blue-500 to-indigo-500 rounded-full"></div>
              <h2 class="text-xl md:text-2xl font-bold text-gray-900 dark:text-gray-100">üìä Vis√£o Geral</h2>
            </div>
            
            <div class="bg-gradient-to-br from-blue-500 via-indigo-500 to-purple-600 rounded-2xl shadow-xl p-6 md:p-8 text-white">
              <!-- Header do Card -->
              <div class="flex items-center justify-between mb-6">
                <div>
                  <h3 class="text-xl md:text-2xl font-bold">Centro de Notifica√ß√µes</h3>
                  <p class="text-sm opacity-90">${totalNotificacoes} notifica√ß√µes no total</p>
                </div>
                <div class="text-right">
                  <div class="text-2xl md:text-3xl font-bold ${notificacoesNaoLidas > 0 ? 'text-yellow-200' : 'text-green-200'}">
                    ${notificacoesNaoLidas}
                  </div>
                  <p class="text-xs opacity-90">${notificacoesNaoLidas > 0 ? 'üì¨ N√£o lidas' : '‚úÖ Todas lidas'}</p>
                </div>
              </div>
              
              <!-- Grid de M√©tricas -->
              <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div class="bg-white bg-opacity-15 backdrop-blur-sm rounded-xl p-4 text-center">
                  <div class="text-2xl mb-2">üìß</div>
                  <div class="text-2xl md:text-3xl font-bold">${totalNotificacoes}</div>
                  <div class="text-sm opacity-90">Total</div>
                </div>
                
                <div class="bg-white bg-opacity-15 backdrop-blur-sm rounded-xl p-4 text-center">
                  <div class="text-2xl mb-2">üì¨</div>
                  <div class="text-2xl md:text-3xl font-bold text-yellow-200">${notificacoesNaoLidas}</div>
                  <div class="text-sm opacity-90">N√£o lidas</div>
                </div>
                
                <div class="bg-white bg-opacity-15 backdrop-blur-sm rounded-xl p-4 text-center">
                  <div class="text-2xl mb-2">‚úÖ</div>
                  <div class="text-2xl md:text-3xl font-bold text-green-200">${notificacoesLidas}</div>
                  <div class="text-sm opacity-90">Lidas</div>
                </div>
                
                <div class="bg-white bg-opacity-15 backdrop-blur-sm rounded-xl p-4 text-center">
                  <div class="text-2xl mb-2">üìÖ</div>
                  <div class="text-2xl md:text-3xl font-bold">${notificacoesHoje}</div>
                  <div class="text-sm opacity-90">Hoje</div>
                </div>
              </div>
            </div>
          </div>

          <!-- ========== SE√á√ÉO 2: A√á√ïES E CONTROLES ========== -->
          <div class="mb-8">
            <div class="flex items-center gap-2 mb-4">
              <div class="w-1 h-6 bg-gradient-to-b from-green-500 to-teal-500 rounded-full"></div>
              <h2 class="text-xl md:text-2xl font-bold text-gray-900 dark:text-gray-100">üîß A√ß√µes & Controles</h2>
            </div>
            
            <div class="bg-white dark:bg-gray-900 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden">
              <!-- Header -->
              <div class="bg-gradient-to-r from-green-50 to-teal-50 dark:from-gray-800 dark:to-gray-800 p-4 border-b border-gray-200 dark:border-gray-700">
                <div class="flex flex-wrap justify-between items-center gap-2">
                  <h3 class="text-lg font-bold text-gray-900 dark:text-gray-100">Gerenciar Notifica√ß√µes</h3>
                  <div class="flex gap-2 flex-wrap">
                    <button onclick="window.showConfirmationModal({
                      title: 'Marcar como Lidas',
                      message: 'Deseja marcar todas as notifica√ß√µes como lidas?',
                      confirmText: 'Sim, Marcar',
                      confirmColor: 'bg-blue-500 hover:bg-blue-600',
                      onConfirm: 'window.markAllNotificationsAsRead && window.markAllNotificationsAsRead()'
                    })" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-xl text-sm font-medium transition-all duration-200 shadow-md hover:shadow-lg">
                      ‚úÖ Marcar todas como lidas
                    </button>
                    <button onclick="window.showConfirmationModal({
                      title: 'Apagar notifica√ß√µes lidas',
                      message: 'Deseja apagar todas as notifica√ß√µes lidas? Esta a√ß√£o n√£o pode ser desfeita.',
                      confirmText: 'Sim, Apagar',
                      confirmColor: 'bg-red-500 hover:bg-red-600',
                      onConfirm: 'window.deleteAllReadNotifications && window.deleteAllReadNotifications()'
                    })" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-xl text-sm font-medium transition-all duration-200 shadow-md hover:shadow-lg">
                      üóëÔ∏è Apagar lidas
                    </button>
                    <button onclick="window.renderNotifications()" class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-xl text-sm font-medium transition-all duration-200 shadow-md hover:shadow-lg">
                      üîÑ Atualizar
                    </button>
                  </div>
                </div>
                <!-- Controles: filtros e prefer√™ncia de toasts -->
                <div class="mt-3 flex flex-col gap-3">
                  <!-- Filtro por tipo -->
                  <div class="flex flex-wrap gap-2 items-center">
                    <span class="text-sm text-gray-700 dark:text-gray-300 mr-1">Tipos:</span>
                    ${['new_transaction','updated_transaction','deleted_transaction','category_added','category_updated','category_deleted']
                      .map(t => {
                        const active = filters.types.includes(t);
                        const labels = { new_transaction:'Nova Tx', updated_transaction:'Tx Atualizada', deleted_transaction:'Tx Exclu√≠da', category_added:'Cat Criada', category_updated:'Cat Atualizada', category_deleted:'Cat Exclu√≠da' };
                        return `<button onclick=\"window.toggleNotificationTypeFilter('`+t+`')\" class=\"px-3 py-1 rounded-full text-xs font-medium ${active ? 'bg-blue-600 text-white' : 'bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200'}\">${labels[t]}</button>`;
                      }).join('')}
                  </div>
                  <!-- Filtro por per√≠odo -->
                  <div class="flex flex-wrap gap-2 items-center">
                    <span class="text-sm text-gray-700 dark:text-gray-300 mr-1">Per√≠odo:</span>
                    ${['all','today','7d','30d'].map(p => {
                      const label = p==='all'?'Tudo':(p==='today'?'Hoje':(p==='7d'?'7 dias':'30 dias'));
                      const active = filters.period===p;
                      return `<button onclick=\"window.setNotificationPeriod('`+p+`')\" class=\"px-3 py-1 rounded-full text-xs font-medium ${active ? 'bg-indigo-600 text-white' : 'bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200'}\">${label}</button>`;
                    }).join('')}
                  </div>
                  <!-- Prefer√™ncia de toasts -->
                  <label class="flex items-center gap-2 text-sm text-gray-700 dark:text-gray-300">
                    <input type="checkbox" ${getNotificationsToastsEnabled() ? 'checked' : ''} onchange="window.setNotificationsToastsEnabled(this.checked)" />
                    Mostrar toasts em tempo real
                  </label>
                  <!-- Pol√≠tica de reten√ß√£o -->
                  <div class="flex items-center gap-2 text-sm text-gray-700 dark:text-gray-300">
                    <span>Apagar automaticamente ap√≥s:</span>
                    <select onchange="window.setNotificationRetentionDays(this.value)" class="bg-white dark:bg-gray-900 border border-gray-300 dark:border-gray-700 rounded px-2 py-1">
                      ${[0, 15, 30, 60, 90].map(d => `<option value=\"${d}\" ${getNotificationRetentionDays()==d?'selected':''}>${d===0?'Nunca':d+' dias'}</option>`).join('')}
                    </select>
                    <button class="ml-2 px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded" onclick="window.runNotificationAutoClean()">Executar limpeza</button>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- ========== SE√á√ÉO 3: LISTA DE NOTIFICA√á√ïES ========== -->
          <div class="mb-8">
            <div class="flex items-center gap-2 mb-4">
              <div class="w-1 h-6 bg-gradient-to-b from-purple-500 to-pink-500 rounded-full"></div>
              <h2 class="text-xl md:text-2xl font-bold text-gray-900 dark:text-gray-100">üìã Todas as Notifica√ß√µes</h2>
            </div>
            
            <div class="space-y-6">
              ${filtered.length > 0 ? grouped.map(group => `
                <div>
                  <div class=\"text-sm font-semibold text-gray-600 dark:text-gray-300 mb-2\">${group.label}</div>
                  <div class=\"space-y-4\">
                  ${group.items.map(notification => `
                <div class="bg-white dark:bg-gray-900 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden hover:shadow-2xl transition-all duration-300 group ${!notification.read ? 'ring-2 ring-blue-200 dark:ring-blue-800' : ''}">
                  <!-- Header da Notifica√ß√£o -->
                  <div class="bg-gradient-to-r ${!notification.read ? 'from-blue-50 to-indigo-50 dark:from-gray-800 dark:to-gray-800' : 'from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-800'} p-4 border-b border-gray-200 dark:border-gray-700">
                    <div class="flex items-center justify-between">
                      <div class="flex items-center gap-3">
                        <div class="w-12 h-12 rounded-full ${notification.type === 'deleted_transaction' ? 'bg-red-100 dark:bg-red-900' : notification.type === 'updated_transaction' ? 'bg-yellow-100 dark:bg-yellow-900' : (notification.type && notification.type.startsWith('category_')) ? 'bg-purple-100 dark:bg-purple-900' : 'bg-blue-100 dark:bg-blue-900'} flex items-center justify-center text-xl">
                          ${notification.type === 'deleted_transaction' ? 'üóëÔ∏è' : notification.type === 'updated_transaction' ? '‚úèÔ∏è' : (notification.type && notification.type.startsWith('category_')) ? 'üìÇ' : 'üí∞'}
                        </div>
                        <div>
                          <h3 class="font-bold text-gray-900 dark:text-gray-100">${
                            notification.type === 'deleted_transaction' ? 'Transa√ß√£o Exclu√≠da' :
                            notification.type === 'updated_transaction' ? 'Transa√ß√£o Atualizada' :
                            notification.type === 'new_transaction' ? 'Nova Transa√ß√£o' :
                            notification.type === 'category_added' ? 'Categoria Criada' :
                            notification.type === 'category_updated' ? 'Categoria Atualizada' :
                            notification.type === 'category_deleted' ? 'Categoria Exclu√≠da' : 'Notifica√ß√£o'
                          }</h3>
                          <p class="text-sm text-gray-500 dark:text-gray-400">Or√ßamento: ${notification.budgetName || 'Or√ßamento'}</p>
                        </div>
                      </div>
                      <div class="text-right">
                        ${!notification.read ? '<div class="text-2xl">üì¨</div>' : '<div class="text-2xl">‚úÖ</div>'}
                      </div>
                    </div>
                  </div>
                  
                  <!-- Conte√∫do da Notifica√ß√£o -->
                  <div class="p-4">
                    <div class="space-y-3">
                      <div class="flex items-center justify-between">
                        <span class="text-sm text-gray-600 dark:text-gray-400">Enviado por:</span>
                        <span class="font-medium text-gray-900 dark:text-gray-100">${notification.senderName || 'Usu√°rio'}</span>
                      </div>
                      
                      ${notification.type && notification.type.startsWith('category_') ? `
                        <div class="flex items-center justify-between">
                          <span class="text-sm text-gray-600 dark:text-gray-400">Categoria:</span>
                          <span class="font-medium text-gray-900 dark:text-gray-100">${notification.categoryNome || 'Categoria'}</span>
                        </div>
                        <div class="bg-gray-50 dark:bg-gray-800 rounded-xl p-4">
                          <div class="flex items-center justify-between mb-2">
                            <div class="font-medium text-gray-900 dark:text-gray-100">${notification.categoryTipo ? (notification.categoryTipo === 'receita' ? 'Receita' : 'Despesa') : 'Categoria'}</div>
                            ${typeof notification.categoryLimite !== 'undefined' ? `<div class=\"text-sm text-gray-600 dark:text-gray-400\">Limite: R$ ${Number(notification.categoryLimite || 0).toFixed(2)}</div>` : ''}
                          </div>
                        </div>
                      ` : `
                        <div class="flex items-center justify-between">
                          <span class="text-sm text-gray-600 dark:text-gray-400">Tipo:</span>
                          ${notification.type === 'deleted_transaction'
                            ? '<span class="font-medium text-red-600">exclu√≠da</span>'
                            : `<span class=\"font-medium ${(notification.transactionTipo || 'despesa') === 'receita' ? 'text-green-600' : 'text-red-600'}\">${notification.transactionTipo || 'Transa√ß√£o'}</span>`}
                        </div>
                        
                        <!-- Detalhes da Transa√ß√£o -->
                        <div class="bg-gray-50 dark:bg-gray-800 rounded-xl p-4 ${notification.type === 'deleted_transaction' ? 'opacity-75' : ''}">
                          <div class="flex items-center justify-between mb-2">
                            <div class="font-medium text-gray-900 dark:text-gray-100 ${notification.type === 'deleted_transaction' ? 'line-through' : ''}">${notification.transactionDescricao || 'Transa√ß√£o'}</div>
                            <div class="font-bold text-lg ${(notification.transactionTipo || 'despesa') === 'receita' ? 'text-green-600' : 'text-red-600'} ${notification.type === 'deleted_transaction' ? 'line-through' : ''}">
                              R$ ${Number(notification.transactionValor || 0).toFixed(2)}
                            </div>
                          </div>
                          <div class="text-sm text-gray-500 dark:text-gray-400">
                            Categoria: ${notification.transactionCategoria || 'Sem categoria'}
                          </div>
                        </div>
                      `}
                      
                      <div class="flex items-center justify-between">
                        <span class="text-sm text-gray-600 dark:text-gray-400">Data:</span>
                        <span class="text-sm text-gray-500 dark:text-gray-400">
                          ${notification.createdAt?.toDate ? notification.createdAt.toDate().toLocaleString('pt-BR') : 'Data n√£o dispon√≠vel'}
                        </span>
                      </div>
                    </div>
                  </div>
                  
                  <!-- Bot√µes de A√ß√£o -->
                  ${!notification.read ? `
                    <div class="bg-gray-50 dark:bg-gray-800 p-4 border-t border-gray-200 dark:border-gray-700">
                      <div class="flex gap-2">
                        <button onclick="window.showConfirmationModal({
                          title: 'Marcar como Lida',
                          message: 'Deseja marcar esta notifica√ß√£o como lida?',
                          confirmText: 'Sim, Marcar',
                          confirmColor: 'bg-blue-500 hover:bg-blue-600',
                          onConfirm: 'window.markNotificationAsRead && window.markNotificationAsRead(\\'${notification.id}\\')'
                        })" class="flex-1 bg-blue-500 hover:bg-blue-600 text-white px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 flex items-center justify-center gap-2">
                          ‚úÖ Marcar como lida
                        </button>
                        <button onclick="window.openNotificationTarget('${notification.id}','${notification.type || ''}')" class="flex-1 bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100 px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 flex items-center justify-center gap-2">
                          üîó Ver no app
                        </button>
                      </div>
                    </div>
                  ` : ''}
                </div>
                  `).join('')}
                  </div>
                </div>
              `).join('') : `
                <div class="bg-white dark:bg-gray-900 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden">
                  <div class="text-center py-12">
                    <div class="text-6xl mb-4">üîî</div>
                    <div class="text-xl font-semibold text-gray-800 dark:text-white mb-2">Nenhuma notifica√ß√£o</div>
                    <div class="text-gray-600 dark:text-gray-400 mb-4">Voc√™ n√£o tem notifica√ß√µes no momento</div>
                    <button onclick="window.renderNotifications()" class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-xl font-medium transition-all duration-200 shadow-lg">
                      üîÑ Atualizar
                    </button>
                  </div>
                </div>
              `}
            </div>
          </div>
        </div>
      </div>
    </div>
  `;

  // Injetar indicador de per√≠odo padr√£o (n√£o altera filtragem das notifica√ß√µes, apenas padroniza o cabe√ßalho)
  (async () => {
    try {
  const { createPeriodIndicator } = await import('@ui/PeriodIndicator.js');
      const holder = document.getElementById('notif-period-indicator');
      if (holder) {
        holder.innerHTML = '';
        holder.appendChild(createPeriodIndicator({ onChange: () => renderNotifications() }));
      }
    } catch (e) {
      console.warn('PeriodIndicator (Notifica√ß√µes) indispon√≠vel:', e);
    }
  })();
  
  renderFAB();
}

// ===== Filtros, agrupamento e deep-link de notifica√ß√µes =====
function getNotifFilters() {
  if (!window.__notifFilters) {
    try {
      const saved = localStorage.getItem('notifFilters');
      if (saved) window.__notifFilters = JSON.parse(saved);
    } catch {}
    if (!window.__notifFilters) {
      window.__notifFilters = {
        types: ['new_transaction','updated_transaction','deleted_transaction','category_added','category_updated','category_deleted'],
        period: 'all'
      };
    }
  }
  return window.__notifFilters;
}
window.getNotifFilters = getNotifFilters;

function saveNotifFilters() {
  try { localStorage.setItem('notifFilters', JSON.stringify(window.__notifFilters)); } catch {}
}

function toggleNotificationTypeFilter(type) {
  const f = getNotifFilters();
  if (f.types.includes(type)) {
    f.types = f.types.filter(t => t !== type);
    if (f.types.length === 0) f.types = [type];
  } else {
    f.types.push(type);
  }
  window.__notifFilters = f;
  saveNotifFilters();
  renderNotifications();
}
window.toggleNotificationTypeFilter = toggleNotificationTypeFilter;

function setNotificationPeriod(period) {
  const f = getNotifFilters();
  f.period = period;
  window.__notifFilters = f;
  saveNotifFilters();
  renderNotifications();
}
window.setNotificationPeriod = setNotificationPeriod;

function applyNotificationFilters(list, filters) {
  const now = new Date();
  const dayMs = 24*60*60*1000;
  return list.filter(n => {
    if (n.type && !filters.types.includes(n.type)) return false;
    if (filters.period && filters.period !== 'all') {
      const dt = n.createdAt?.toDate ? n.createdAt.toDate() : new Date(n.createdAt);
      const diffMs = now - dt;
      if (filters.period === 'today') {
        if (dt.toDateString() !== now.toDateString()) return false;
      } else if (filters.period === '7d') {
        if (diffMs > 7*dayMs) return false;
      } else if (filters.period === '30d') {
        if (diffMs > 30*dayMs) return false;
      }
    }
    return true;
  });
}
window.applyNotificationFilters = applyNotificationFilters;

function groupNotificationsByDay(list) {
  const toTime = n => n.createdAt?.seconds ? n.createdAt.seconds*1000 : (new Date(n.createdAt)).getTime();
  const sorted = [...list].sort((a,b) => toTime(b) - toTime(a));
  const map = new Map();
  for (const n of sorted) {
    const d = n.createdAt?.toDate ? n.createdAt.toDate() : new Date(n.createdAt);
    const key = d.toDateString();
    if (!map.has(key)) map.set(key, []);
    map.get(key).push(n);
  }
  const todayStr = new Date().toDateString();
  const y = new Date(); y.setDate(y.getDate()-1);
  const yStr = y.toDateString();
  const sections = [];
  for (const [key, items] of map.entries()) {
    let label;
    if (key === todayStr) label = 'Hoje';
    else if (key === yStr) label = 'Ontem';
    else label = new Date(key).toLocaleDateString('pt-BR');
    sections.push({ label, items });
  }
  return sections;
}
window.groupNotificationsByDay = groupNotificationsByDay;

function openNotificationTarget(id, type) {
  try {
    const n = (window.appState.notifications || []).find(x => x.id === id);
    if (!n) return;
    if (type && type.startsWith('category_')) {
      window.location.hash = '#/categories';
    } else {
      window.location.hash = '#/transactions';
    }
    if (!n.read && typeof window.markNotificationAsRead === 'function') {
      window.markNotificationAsRead(id);
    }
  } catch (e) {
    console.warn('Falha ao abrir alvo da notifica√ß√£o:', e);
  }
}
window.openNotificationTarget = openNotificationTarget;

// Expor fun√ß√µes de notifica√ß√µes globalmente
window.loadNotifications = loadNotifications;
window.markNotificationAsRead = markNotificationAsRead;
window.markAllNotificationsAsRead = markAllNotificationsAsRead;
window.renderNotifications = renderNotifications;
window.listenNotifications = listenNotifications;

// Prefer√™ncia: exibir toasts em tempo real
window.getNotificationsToastsEnabled = function() {
  try {
    const v = localStorage.getItem('notificationsToastsEnabled');
    return v === null ? true : v === 'true';
  } catch { return true; }
};
window.setNotificationsToastsEnabled = function(enabled) {
  try { localStorage.setItem('notificationsToastsEnabled', enabled ? 'true' : 'false'); } catch {}
  if (typeof Snackbar === 'function') {
    Snackbar({ message: enabled ? 'Toasts ativados' : 'Toasts desativados', type: 'info' });
  }
};

// A√ß√£o em massa: apagar todas as notifica√ß√µes lidas
window.deleteAllReadNotifications = async function() {
  try {
    const list = (window.appState.notifications || []).filter(n => n.read);
    if (list.length === 0) {
      return Snackbar && Snackbar({ message: 'Sem notifica√ß√µes lidas para apagar', type: 'info' });
    }
  const { deleteMany } = await import('@data/repositories/notificationsRepo.js');
  await deleteMany(list.map(n => n.id));
    // Atualiza estado local
    window.appState.notifications = (window.appState.notifications || []).filter(n => !n.read);
    updateNotificationBadge();
    renderNotifications();
    Snackbar && Snackbar({ message: 'Notifica√ß√µes lidas apagadas', type: 'success' });
  } catch (e) {
    console.error('Erro ao apagar notifica√ß√µes lidas:', e);
    Snackbar && Snackbar({ message: 'Erro ao apagar notifica√ß√µes lidas', type: 'error' });
  }
};

// Reten√ß√£o de notifica√ß√µes
window.getNotificationRetentionDays = function() {
  try {
    const v = parseInt(localStorage.getItem('notificationRetentionDays') || '0', 10);
    return isNaN(v) ? 0 : v;
  } catch { return 0; }
};
window.setNotificationRetentionDays = function(days) {
  try { localStorage.setItem('notificationRetentionDays', String(days)); } catch {}
  if (typeof Snackbar === 'function') Snackbar({ message: days===0?'Reten√ß√£o desativada':`Reten√ß√£o: ${days} dias`, type: 'info' });
};
window.runNotificationAutoClean = async function() {
  try {
    const days = window.getNotificationRetentionDays();
    if (!days || days <= 0) {
      return Snackbar && Snackbar({ message: 'Reten√ß√£o desativada', type: 'info' });
    }
    const cutoff = Date.now() - days*24*60*60*1000;
    const toDelete = (window.appState.notifications || []).filter(n => {
      const t = n.createdAt?.seconds ? n.createdAt.seconds*1000 : (new Date(n.createdAt)).getTime();
      return t < cutoff;
    });
    if (toDelete.length === 0) {
      return Snackbar && Snackbar({ message: 'Nada para limpar', type: 'info' });
    }
  const { deleteMany } = await import('@data/repositories/notificationsRepo.js');
  await deleteMany(toDelete.map(n => n.id));
    window.appState.notifications = (window.appState.notifications || []).filter(n => !toDelete.some(x => x.id === n.id));
    updateNotificationBadge();
    renderNotifications();
    Snackbar && Snackbar({ message: `Limpeza conclu√≠da (${toDelete.length})`, type: 'success' });
  } catch (e) {
    console.error('Erro na limpeza de notifica√ß√µes:', e);
    Snackbar && Snackbar({ message: 'Erro na limpeza de notifica√ß√µes', type: 'error' });
  }
};

// Fun√ß√µes wrapper com confirma√ß√£o para opera√ß√µes cr√≠ticas
window.addTransactionWithConfirmation = async function(transactionData) {
  return new Promise((resolve, reject) => {
    window.showConfirmationModal({
      title: 'Adicionar Transa√ß√£o',
      message: `Tem certeza que deseja adicionar a transa√ß√£o "${transactionData.descricao}" no valor de R$ ${transactionData.valor.toFixed(2)}?`,
      confirmText: 'Sim, Adicionar',
      confirmColor: 'bg-green-500 hover:bg-green-600',
      onConfirm: async () => {
        try {
          const result = await window.addTransaction(transactionData);
          if (window.Snackbar) {
            window.Snackbar({
              message: '‚úÖ Transa√ß√£o adicionada com sucesso!',
              type: 'success'
            });
          }
          resolve(result);
        } catch (error) {
          console.error('‚ùå Erro ao adicionar transa√ß√£o:', error);
          if (window.Snackbar) {
            window.Snackbar({
              message: 'Erro ao adicionar transa√ß√£o: ' + error.message,
              type: 'error'
            });
          }
          reject(error);
        }
      },
      onCancel: () => {
        console.log('‚ùå Adi√ß√£o de transa√ß√£o cancelada pelo usu√°rio');
        reject(new Error('Opera√ß√£o cancelada pelo usu√°rio'));
      }
    });
  });
};

window.deleteTransactionWithConfirmation = function(transactionId, transactionName = 'transa√ß√£o') {
  window.showConfirmationModal({
    title: 'Excluir Transa√ß√£o',
    message: `Tem certeza que deseja excluir a ${transactionName}? Esta a√ß√£o n√£o pode ser desfeita.`,
    confirmText: 'Sim, Excluir',
    confirmColor: 'bg-red-500 hover:bg-red-600',
    onConfirm: () => {
      if (window.deleteTransaction) {
        window.deleteTransaction(transactionId);
      }
    }
  });
};

window.deleteCategoryWithConfirmation = function(categoryId, categoryName = 'categoria') {
  window.showConfirmationModal({
    title: 'Excluir Categoria',
    message: `Tem certeza que deseja excluir a categoria "${categoryName}"? Todas as transa√ß√µes desta categoria ficar√£o sem categoria.`,
    confirmText: 'Sim, Excluir',
    confirmColor: 'bg-red-500 hover:bg-red-600',
    onConfirm: () => {
      if (window.deleteCategory) {
        window.deleteCategory(categoryId);
      }
    }
  });
};

window.deleteRecorrenteWithConfirmation = function(recorrenteId, recorrenteName = 'despesa recorrente') {
  window.showConfirmationModal({
    title: 'Excluir Despesa Recorrente',
    message: `Tem certeza que deseja excluir a ${recorrenteName}? Esta a√ß√£o n√£o pode ser desfeita.`,
    confirmText: 'Sim, Excluir',
    confirmColor: 'bg-red-500 hover:bg-red-600',
    onConfirm: () => {
      if (window.deleteDespesaRecorrente) {
        window.deleteDespesaRecorrente(recorrenteId);
      }
    }
  });
};

window.leaveBudgetWithConfirmation = function(budgetId, budgetName = 'or√ßamento') {
  window.showConfirmationModal({
    title: 'Sair do Or√ßamento',
    message: `Tem certeza que deseja sair do or√ßamento "${budgetName}"? Voc√™ perder√° acesso a todas as transa√ß√µes.`,
    confirmText: 'Sim, Sair',
    confirmColor: 'bg-orange-500 hover:bg-orange-600',
    onConfirm: () => {
      if (window.leaveSharedBudget) {
        window.leaveSharedBudget(budgetId);
      }
    }
  });
};

// ===== FUN√á√ïES IMPORTANTES RESTAURADAS =====

// Fun√ß√£o para mostrar op√ß√µes de exporta√ß√£o
window.showExportOptions = function () {
  console.log('üîç showExportOptions chamada');
  console.log('üîç window.Modal dispon√≠vel:', !!window.Modal);
  console.log('üîç window.Modal tipo:', typeof window.Modal);

  if (!window.Modal) {
    console.error('‚ùå Modal n√£o est√° dispon√≠vel');
    alert('Erro: Modal n√£o est√° dispon√≠vel');
    return;
  }

  console.log('üîç Tentando abrir modal de exporta√ß√£o...');

  try {
    const modalElement = window.Modal({
      title: 'Exportar Dados',
      content: `
        <div class="space-y-4">
          <button onclick="window.exportToExcel()" class="w-full bg-green-500 text-white py-2 rounded-lg font-semibold hover:bg-green-600 flex items-center justify-center gap-2 text-base">
            <span>üìä</span> Relat√≥rio Excel
          </button>
          <button onclick="window.exportToPDF()" class="w-full bg-red-500 text-white py-2 rounded-lg font-semibold hover:bg-red-600 flex items-center justify-center gap-2 text-base">
            <span>üìÑ</span> Relat√≥rio PDF
          </button>
          <button onclick="window.exportReadmePDF()" class="w-full bg-blue-500 text-white py-2 rounded-lg font-semibold hover:bg-blue-600 flex items-center justify-center gap-2 text-base">
            <span>üìñ</span> Guia de Uso (PDF)
          </button>
          <button onclick="window.downloadBackup()" class="w-full bg-purple-500 text-white py-2 rounded-lg font-semibold hover:bg-purple-600 flex items-center justify-center gap-2 text-base">
            <span>üíæ</span> Backup Completo (JSON)
          </button>
        </div>
      `,
      onClose: () => {
        console.log('üîç Modal fechado');
        document.querySelector('.modal')?.remove();
      }
    });

    console.log('üîç Modal criado com sucesso:', modalElement);
    document.body.appendChild(modalElement);
    console.log('üîç Modal adicionado ao DOM');

  } catch (error) {
    console.error('‚ùå Erro ao criar modal:', error);
    alert('Erro ao abrir modal de exporta√ß√£o: ' + error.message);
  }
};

// Fun√ß√£o para exportar para Excel
window.exportToExcel = function () {
  try {
    // Verificar se a biblioteca XLSX est√° dispon√≠vel
    if (typeof XLSX === 'undefined') {
      console.error('‚ùå Biblioteca XLSX n√£o est√° dispon√≠vel');
      if (window.Snackbar) {
        window.Snackbar({
          message: 'Erro: Biblioteca XLSX n√£o est√° carregada. Tente recarregar a p√°gina.',
          type: 'error'
        });
      } else {
        alert('Erro: Biblioteca XLSX n√£o est√° carregada. Tente recarregar a p√°gina.');
      }
      return;
    }

    // Verificar se h√° dados para exportar
    if (!window.appState || !window.appState.transactions) {
      if (window.Snackbar) {
        window.Snackbar({
          message: 'Nenhum dado dispon√≠vel para exportar.',
          type: 'warning'
        });
      } else {
        alert('Nenhum dado dispon√≠vel para exportar.');
      }
      return;
    }

    // Gera planilha Excel com transa√ß√µes, categorias e or√ßamentos
    const wb = XLSX.utils.book_new();

    // Transa√ß√µes
    const transacoes = window.appState.transactions.map(t => ({
      Descri√ß√£o: t.descricao,
      Valor: t.valor,
      Tipo: t.tipo,
      Categoria:
        window.appState.categories.find(c => c.id === t.categoriaId)?.nome || '',
      Data:
        t.createdAt && t.createdAt.toDate
          ? t.createdAt.toDate().toLocaleDateString()
          : ''
    }));
    XLSX.utils.book_append_sheet(
      wb,
      XLSX.utils.json_to_sheet(transacoes),
      'Transa√ß√µes'
    );

    // Categorias
    const categorias = window.appState.categories.map(c => ({
      Nome: c.nome,
      Tipo: c.tipo,
      Limite: c.limite,
      Cor: c.cor
    }));
    XLSX.utils.book_append_sheet(
      wb,
      XLSX.utils.json_to_sheet(categorias),
      'Categorias'
    );

    // Or√ßamentos
    const orcamentos = window.appState.budgets.map(b => ({
      Nome: b.nome,
      Descri√ß√£o: b.descricao,
      ID: b.id
    }));
    XLSX.utils.book_append_sheet(
      wb,
      XLSX.utils.json_to_sheet(orcamentos),
      'Or√ßamentos'
    );

    XLSX.writeFile(wb, 'financeiro-dados.xlsx');

    if (window.Snackbar) {
      window.Snackbar({
        message: '‚úÖ Arquivo Excel exportado com sucesso!',
        type: 'success'
      });
    }
  } catch (error) {
    console.error('‚ùå Erro ao exportar Excel:', error);
    if (window.Snackbar) {
      window.Snackbar({
        message: 'Erro ao exportar Excel: ' + error.message,
        type: 'error'
      });
    } else {
      alert('Erro ao exportar Excel: ' + error.message);
    }
  }
};

// Fun√ß√£o para exportar para PDF
window.exportToPDF = function () {
  try {
    // Verificar se a biblioteca jsPDF est√° dispon√≠vel
    if (typeof window.jspdf === 'undefined') {
      console.error('‚ùå Biblioteca jsPDF n√£o est√° dispon√≠vel');
      if (window.Snackbar) {
        window.Snackbar({
          message: 'Erro: Biblioteca jsPDF n√£o est√° carregada. Tente recarregar a p√°gina.',
          type: 'error'
        });
      } else {
        alert('Erro: Biblioteca jsPDF n√£o est√° carregada. Tente recarregar a p√°gina.');
      }
      return;
    }

    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();
    let y = 10;

    // Fun√ß√£o para adicionar texto com quebra de linha
    function addText(text, x, y, maxWidth = 170) {
      const lines = doc.splitTextToSize(text, maxWidth);
      lines.forEach(line => {
        if (y > 270) {
          doc.addPage();
          y = 10;
        }
        doc.text(line, x, y);
        y += 6;
      });
      return y;
    }

    // Cabe√ßalho
    doc.setFontSize(24);
    doc.setFont('helvetica', 'bold');
    doc.setFillColor(79, 70, 229);
    doc.rect(0, 0, 210, 40, 'F');
    doc.setTextColor(255, 255, 255);
    doc.text('Controle Financeiro', 20, 25);
    doc.setFontSize(14);
    doc.text('Relat√≥rio Financeiro', 20, 35);

    // Resetar para conte√∫do
    doc.setTextColor(0, 0, 0);
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    y = 50;

    // Resumo
    y = addText('üìä RESUMO FINANCEIRO', 20, y);
    y += 10;

    const totalReceitas = window.appState.transactions
      .filter(t => t.tipo === 'receita')
      .reduce((sum, t) => sum + parseFloat(t.valor), 0);

    const totalDespesas = window.appState.transactions
      .filter(t => t.tipo === 'despesa')
      .reduce((sum, t) => sum + parseFloat(t.valor), 0);

    const saldo = totalReceitas - totalDespesas;

    y = addText(`üí∞ Total de Receitas: R$ ${totalReceitas.toFixed(2)}`, 20, y);
    y = addText(`üí∏ Total de Despesas: R$ ${totalDespesas.toFixed(2)}`, 20, y);
    y = addText(`üí≥ Saldo: R$ ${saldo.toFixed(2)}`, 20, y);
    y += 15;

    // Transa√ß√µes recentes
    y = addText('üìã √öLTIMAS TRANSA√á√ïES', 20, y);
    y += 10;

    const transacoesRecentes = window.appState.transactions
      .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
      .slice(0, 10);

    transacoesRecentes.forEach(t => {
      const categoria = window.appState.categories.find(c => c.id === t.categoriaId);
      const data = t.createdAt && t.createdAt.toDate 
        ? t.createdAt.toDate().toLocaleDateString() 
        : new Date(t.createdAt).toLocaleDateString();
      
      y = addText(`${data} - ${t.descricao} (${categoria?.nome || 'Sem categoria'}) - R$ ${t.valor}`, 25, y);
    });

    // Salvar arquivo
    doc.save('financeiro-relatorio.pdf');

    if (window.Snackbar) {
      window.Snackbar({
        message: '‚úÖ Relat√≥rio PDF exportado com sucesso!',
        type: 'success'
      });
    }
  } catch (error) {
    console.error('‚ùå Erro ao exportar PDF:', error);
    if (window.Snackbar) {
      window.Snackbar({
        message: 'Erro ao exportar PDF: ' + error.message,
        type: 'error'
      });
    } else {
      alert('Erro ao exportar PDF: ' + error.message);
    }
  }
};

// Fun√ß√£o para baixar backup JSON
window.downloadBackup = function () {
  try {
    // Verificar se h√° dados para exportar
    if (!window.appState || !window.appState.transactions) {
      if (window.Snackbar) {
        window.Snackbar({
          message: 'Nenhum dado dispon√≠vel para exportar.',
          type: 'warning'
        });
      } else {
        alert('Nenhum dado dispon√≠vel para exportar.');
      }
      return;
    }

    // Baixa um JSON com todos os dados do usu√°rio
    const data = {
      transactions: window.appState.transactions,
      categories: window.appState.categories,
      budgets: window.appState.budgets,
      recorrentes: window.appState.recorrentes
    };
    const blob = new Blob([JSON.stringify(data, null, 2)], {
      type: 'application/json'
    });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'financeiro-backup.json';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    if (window.Snackbar) {
      window.Snackbar({
        message: '‚úÖ Backup JSON exportado com sucesso!',
        type: 'success'
      });
    }
  } catch (error) {
    console.error('‚ùå Erro ao exportar backup:', error);
    if (window.Snackbar) {
      window.Snackbar({
        message: 'Erro ao exportar backup: ' + error.message,
        type: 'error'
      });
    } else {
      alert('Erro ao exportar backup: ' + error.message);
    }
  }
};

// Fun√ß√£o para exportar README em PDF
window.exportReadmePDF = function () {
  try {
    // Verificar se a biblioteca jsPDF est√° dispon√≠vel
    if (typeof window.jspdf === 'undefined') {
      console.error('‚ùå Biblioteca jsPDF n√£o est√° dispon√≠vel');
      if (window.Snackbar) {
        window.Snackbar({
          message: 'Erro: Biblioteca jsPDF n√£o est√° carregada. Tente recarregar a p√°gina.',
          type: 'error'
        });
      } else {
        alert('Erro: Biblioteca jsPDF n√£o est√° carregada. Tente recarregar a p√°gina.');
      }
      return;
    }

    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();
    let y = 10;

    // Fun√ß√£o para adicionar texto com quebra de linha
    function addText(text, x, y, maxWidth = 170) {
      const lines = doc.splitTextToSize(text, maxWidth);
      lines.forEach(line => {
        if (y > 270) {
          doc.addPage();
          y = 10;
        }
        doc.text(line, x, y);
        y += 6;
      });
      return y;
    }

    // Cabe√ßalho
    doc.setFontSize(24);
    doc.setFont('helvetica', 'bold');
    doc.setFillColor(79, 70, 229);
    doc.rect(0, 0, 210, 40, 'F');
    doc.setTextColor(255, 255, 255);
    doc.text('Controle Financeiro', 20, 25);
    doc.setFontSize(14);
    doc.text('Guia Completo de Uso', 20, 35);

    // Resetar para conte√∫do
    doc.setTextColor(0, 0, 0);
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    y = 50;

    // Conte√∫do do guia
    y = addText('üì± COMO USAR O APLICATIVO', 20, y);
    y += 10;

    y = addText('1. DASHBOARD - Visualize seu resumo financeiro, saldo atual, gastos por categoria e alertas de limite.', 20, y);
    y = addText('2. TRANSA√á√ïES - Adicione, edite ou remova suas receitas e despesas.', 20, y);
    y = addText('3. CATEGORIAS - Organize suas transa√ß√µes em categorias com limites personalizados.', 20, y);
    y = addText('4. RECORRENTES - Configure despesas que se repetem mensalmente.', 20, y);
    y = addText('5. NOTIFICA√á√ïES - Receba alertas sobre limites de categoria e transa√ß√µes.', 20, y);
    y = addText('6. CONFIGURA√á√ïES - Personalize o aplicativo e exporte seus dados.', 20, y);
    y += 15;

    y = addText('üéØ FUNCIONALIDADES PRINCIPAIS', 20, y);
    y += 10;

    y = addText('‚Ä¢ Navega√ß√£o por deslizamento entre abas', 20, y);
    y = addText('‚Ä¢ Reconhecimento de voz para adicionar transa√ß√µes', 20, y);
    y = addText('‚Ä¢ Exporta√ß√£o para Excel e PDF', 20, y);
    y = addText('‚Ä¢ Backup e restaura√ß√£o de dados', 20, y);
    y = addText('‚Ä¢ Notifica√ß√µes push para alertas', 20, y);
    y = addText('‚Ä¢ Tema claro/escuro', 20, y);
    y = addText('‚Ä¢ Instala√ß√£o como PWA', 20, y);
    y += 15;

    y = addText('üîß DICAS DE USO', 20, y);
    y += 10;

    y = addText('‚Ä¢ Use as setas do teclado para navegar entre abas', 20, y);
    y = addText('‚Ä¢ Deslize horizontalmente para trocar de tela no mobile', 20, y);
    y = addText('‚Ä¢ Configure limites nas categorias para receber alertas', 20, y);
    y = addText('‚Ä¢ Use o bot√£o de voz para adicionar transa√ß√µes rapidamente', 20, y);
    y = addText('‚Ä¢ Fa√ßa backup regular dos seus dados', 20, y);

    // Salvar arquivo
    doc.save('servo-tech-financas-guia.pdf');

    if (window.Snackbar) {
      window.Snackbar({
        message: '‚úÖ Guia PDF exportado com sucesso!',
        type: 'success'
      });
    }
  } catch (error) {
    console.error('‚ùå Erro ao exportar guia PDF:', error);
    if (window.Snackbar) {
      window.Snackbar({
        message: 'Erro ao exportar guia PDF: ' + error.message,
        type: 'error'
      });
    } else {
      alert('Erro ao exportar guia PDF: ' + error.message);
    }
  }
};

// Fun√ß√£o para mostrar notifica√ß√µes
function showNotification(title, body, options = {}) {
  console.log('üîî Tentando enviar notifica√ß√£o:', title, body);
  console.log('üîî Permiss√£o:', Notification.permission);
  console.log('üîî Habilitada:', localStorage.getItem('notifications-enabled'));

  if (
    Notification.permission === 'granted' &&
    localStorage.getItem('notifications-enabled') === 'true'
  ) {
    try {
      const notification = new Notification(title, {
        body,
        icon: '/icon-192.png',
        badge: '/icon-192.png',
        tag: 'servo-tech-financas',
        requireInteraction: false,
        ...options
      });

      console.log('‚úÖ Notifica√ß√£o criada com sucesso:', notification);

      notification.onclick = () => {
        console.log('üîî Notifica√ß√£o clicada');
        window.focus();
        notification.close();
      };

      setTimeout(() => {
        notification.close();
        console.log('üîî Notifica√ß√£o fechada automaticamente');
      }, 5000);

      console.log('‚úÖ Notifica√ß√£o enviada com sucesso!');
    } catch (error) {
      console.error('‚ùå Erro ao criar notifica√ß√£o:', error);
    }
  } else {
    console.log('‚ùå Notifica√ß√£o n√£o enviada - permiss√£o ou configura√ß√£o inv√°lida');
    console.log('   Permiss√£o:', Notification.permission);
    console.log('   Habilitada:', localStorage.getItem('notifications-enabled'));
  }
}

// Fun√ß√£o para verificar recorrentes pendentes e notificar
function checkRecorrentesPendentes() {
  if (localStorage.getItem('notifications-enabled') !== 'true') {return;}

  const recorrentes = window.appState.recorrentes || [];
  const pendentes = recorrentes.filter(rec => {
    // L√≥gica para verificar se h√° recorrentes pendentes
    // Esta √© uma implementa√ß√£o b√°sica
    return rec.parcelasRestantes > 0;
  });

  if (pendentes.length > 0) {
    showNotification(
      'Recorrentes Pendentes',
      `Voc√™ tem ${pendentes.length} despesa(s) recorrente(s) para efetivar este m√™s.`
    );
  }
}

// Fun√ß√£o para verificar limites de categoria
function checkLimitesCategoria() {
  console.log('üîç Iniciando verifica√ß√£o de limites de categoria...');
  console.log('üîç Notifica√ß√µes habilitadas:', localStorage.getItem('notifications-enabled') === 'true');

  if (localStorage.getItem('notifications-enabled') !== 'true') {
    console.log('‚ùå Notifica√ß√µes desabilitadas, pulando verifica√ß√£o');
    return;
  }

  const categories = window.appState.categories || [];
  const transactions = window.appState.transactions || [];

  console.log('üîç Categorias encontradas:', categories.length);
  console.log('üîç Transa√ß√µes encontradas:', transactions.length);

  categories.forEach(cat => {
    if (cat.limite) {
      const gasto = transactions
        .filter(t => t.categoriaId === cat.id && t.tipo === cat.tipo)
        .reduce((sum, t) => sum + parseFloat(t.valor), 0);

      const limite = parseFloat(cat.limite);
      const percentual = (gasto / limite) * 100;

      console.log(`üîç ${cat.nome}: R$ ${gasto.toFixed(2)} / R$ ${limite.toFixed(2)} (${percentual.toFixed(1)}%)`);

      if (percentual >= 80) {
        console.log(`‚ö†Ô∏è ${cat.nome} atingiu ${percentual.toFixed(1)}% do limite!`);
        showNotification(
          '‚ö†Ô∏è Limite de Categoria',
          `${cat.nome} est√° com ${percentual.toFixed(1)}% do limite usado (R$ ${gasto.toFixed(2)} / R$ ${limite.toFixed(2)}).`
        );
      }

      // Notifica√ß√£o espec√≠fica quando ultrapassa 100%
      if (percentual > 100) {
        console.log(`üö® ${cat.nome} ULTRAPASSOU o limite em ${(percentual - 100).toFixed(1)}%!`);
        showNotification(
          'üö® LIMITE ULTRAPASSADO!',
          `${cat.nome} ultrapassou o limite em ${(percentual - 100).toFixed(1)}%! (R$ ${gasto.toFixed(2)} / R$ ${limite.toFixed(2)})`
        );
      }
    }
  });
}

// Fun√ß√£o global para for√ßar atualiza√ß√£o da interface
window.forceUIUpdate = function () {
  console.log('üîÑ For√ßando atualiza√ß√£o da UI...');
  const currentTab = document
    .querySelector('.nav-btn.active')
    ?.getAttribute('data-route');
  console.log('üìç Aba atual:', currentTab);

  // Usar requestAnimationFrame para otimizar a renderiza√ß√£o
  requestAnimationFrame(() => {
    if (currentTab && window.router) {
      console.log('üîÑ Recarregando aba:', currentTab);
      window.router(currentTab);
    }
  });
};

// Fun√ß√£o otimizada para sincroniza√ß√£o de tema
window.syncThemeAcrossTabs = function() {
  const root = document.documentElement;
  const isDark = root.classList.contains('dark');
  
  // Aplicar tema consistentemente em todos os elementos
  document.querySelectorAll('[class*="dark:"]').forEach(element => {
    // For√ßar reflow para garantir aplica√ß√£o das classes
    element.offsetHeight;
  });
  
  // Atualizar √≠cones de tema
  const themeIcons = document.querySelectorAll('#theme-icon');
  themeIcons.forEach(icon => {
    icon.textContent = isDark ? 'üåô' : '‚òÄÔ∏è';
  });
  
  console.log('üé® Tema sincronizado em todas as abas');
};

// Fun√ß√£o para testar notifica√ß√µes
window.testNotification = function () {
  console.log('üîî Testando notifica√ß√µes...');
  console.log('üì± Permiss√£o do navegador:', Notification.permission);
  console.log('üíæ localStorage:', localStorage.getItem('notifications-enabled'));

  const permission = Notification.permission;
  const enabled = localStorage.getItem('notifications-enabled') === 'true';

  if (permission === 'granted' && enabled) {
    console.log('‚úÖ Notifica√ß√µes ativadas - enviando teste...');
    showNotification(
      'üîî Teste de Notifica√ß√£o',
      'As notifica√ß√µes est√£o funcionando perfeitamente!'
    );

    if (window.Snackbar) {
      window.Snackbar({
        message: '‚úÖ Notifica√ß√£o de teste enviada!',
        type: 'success'
      });
    }
  } else {
    let message = '';
    if (permission === 'denied') {
      message = '‚ùå Permiss√£o negada pelo navegador. V√° em Configura√ß√µes > Notifica√ß√µes e permita.';
    } else if (permission === 'default') {
      message = '‚ùå Permiss√£o n√£o solicitada. Clique em "Ativar Notifica√ß√µes" primeiro.';
    } else if (!enabled) {
      message = '‚ùå Notifica√ß√µes desativadas. Clique em "Ativar Notifica√ß√µes" primeiro.';
    } else {
      message = '‚ùå Erro desconhecido com notifica√ß√µes.';
    }

    console.log('‚ùå Erro:', message);

    if (window.Snackbar) {
      window.Snackbar({
        message: message,
        type: 'error'
      });
    } else {
      alert(message);
    }
  }
};

// Expor fun√ß√µes importantes globalmente
window.showNotification = showNotification;
window.checkRecorrentesPendentes = checkRecorrentesPendentes;
window.checkLimitesCategoria = checkLimitesCategoria;
window.updatePageTitle = updatePageTitle;

// Fun√ß√£o de teste para for√ßar renderiza√ß√£o da navega√ß√£o
window.testBottomNav = function() {
  console.log('üß™ Teste: For√ßando renderiza√ß√£o da navega√ß√£o...');
  renderBottomNav('/dashboard');
  
  // Verificar se foi renderizada
  setTimeout(() => {
    const bottomNav = document.getElementById('bottom-nav');
    if (bottomNav) {
      console.log('‚úÖ Navega√ß√£o renderizada com sucesso');
      console.log('üìã Conte√∫do:', bottomNav.innerHTML);
    } else {
      console.error('‚ùå Navega√ß√£o n√£o foi renderizada');
    }
  }, 100);
};

// ===== SISTEMA DE LISTENERS EM TEMPO REAL =====

// Vari√°veis para unsubscribe dos listeners
let unsubscribeBudget = null;
let unsubscribeTransactions = null;
let unsubscribeCategories = null;
let unsubscribeRecorrentes = null;

// Fun√ß√£o para escutar mudan√ßas no or√ßamento atual
async function listenCurrentBudget(budgetId) {
  if (unsubscribeBudget) {unsubscribeBudget();}
  if (!budgetId) {return;}
  
  const { doc, onSnapshot } = await import('firebase/firestore');
  const ref = doc(db, 'budgets', budgetId);
  unsubscribeBudget = onSnapshot(ref, snap => {
    if (snap.exists()) {
      window.appState.currentBudget = { id: snap.id, ...snap.data() };
      console.log('üîÑ Or√ßamento atualizado:', snap.data().nome);

      // For√ßar atualiza√ß√£o imediata
      setTimeout(async () => {
        if (window.renderSettings) {
          await window.renderSettings();
          console.log('‚úÖ renderSettings executado');
        }
        if (window.renderDashboard) {
          window.renderDashboard();
          console.log('‚úÖ renderDashboard executado');
        }
      }, 100);
    }
  });
}

// Fun√ß√£o para escutar mudan√ßas nas transa√ß√µes
async function listenTransactions(budgetId) {
  if (unsubscribeTransactions) {unsubscribeTransactions();}
  if (!budgetId) {return;}
  console.log('üéß Iniciando listener de transa√ß√µes para budgetId:', budgetId);

  const { query, collection, where, onSnapshot } = await import('firebase/firestore');
  const q = query(
    collection(db, 'transactions'),
    where('budgetId', '==', budgetId)
  );
  unsubscribeTransactions = onSnapshot(
    q,
    snapshot => {
      console.log('üéß Listener de transa√ß√µes executado!');
      const transactions = [];
      snapshot.forEach(doc => {
        transactions.push({ id: doc.id, ...doc.data() });
      });

      // Verificar se houve mudan√ßa real (IDs ou conte√∫do)
      const currentIds = window.appState.transactions.map(t => t.id).sort();
      const newIds = transactions.map(t => t.id).sort();
      const idsChanged = JSON.stringify(currentIds) !== JSON.stringify(newIds);

      // Verificar se o conte√∫do mudou (para edi√ß√µes)
      const currentContent = window.appState.transactions
        .map(t => ({
          id: t.id,
          descricao: t.descricao,
          valor: t.valor,
          categoriaId: t.categoriaId
        }))
        .sort((a, b) => a.id.localeCompare(b.id));
      const newContent = transactions
        .map(t => ({
          id: t.id,
          descricao: t.descricao,
          valor: t.valor,
          categoriaId: t.categoriaId
        }))
        .sort((a, b) => a.id.localeCompare(b.id));
      const contentChanged =
        JSON.stringify(currentContent) !== JSON.stringify(newContent);

      const hasChanged = idsChanged || contentChanged;

      // Ordenar transa√ß√µes por data (mais recentes primeiro)
      transactions.sort((a, b) => {
        let dateA, dateB;
        
        // Tratar Firestore Timestamp
        if (a.createdAt && typeof a.createdAt === 'object' && a.createdAt.seconds) {
          dateA = new Date(a.createdAt.seconds * 1000);
        } else {
          dateA = new Date(a.createdAt);
        }
        
        if (b.createdAt && typeof b.createdAt === 'object' && b.createdAt.seconds) {
          dateB = new Date(b.createdAt.seconds * 1000);
        } else {
          dateB = new Date(b.createdAt);
        }
        
        return dateB - dateA; // Ordem decrescente (mais recente primeiro)
      });
      
      window.appState.transactions = transactions;
      console.log('üîÑ Transa√ß√µes atualizadas:', transactions.length, 'itens');
      console.log('üîÑ Houve mudan√ßa?', hasChanged);

      if (hasChanged) {
        console.log('üéØ Atualizando UI ap√≥s mudan√ßa nas transa√ß√µes...');
        if (window.renderDashboard) {
          console.log('üìä Executando renderDashboard...');
          window.renderDashboard();
        }
        if (window.renderTransactions) {
          console.log('üìã Executando renderTransactions...');
          window.renderTransactions();
        }

        // Tamb√©m usar a fun√ß√£o global como backup
        if (window.forceUIUpdate) {
          setTimeout(() => window.forceUIUpdate(), 50);
          setTimeout(() => window.forceUIUpdate(), 200);
        }
      } else {
        console.log('üìä Nenhuma mudan√ßa detectada, pulando atualiza√ß√£o');
      }
    },
    error => {
      console.error('‚ùå Erro no listener de transa√ß√µes:', error);
    }
  );
}

// Fun√ß√£o para escutar mudan√ßas nas categorias
async function listenCategories(budgetId) {
  if (unsubscribeCategories) {unsubscribeCategories();}
  if (!budgetId) {return;}
  console.log('üéß Iniciando listener de categorias para budgetId:', budgetId);

  const { query, collection, where, onSnapshot } = await import('firebase/firestore');
  const q = query(
    collection(db, 'categories'),
    where('budgetId', '==', budgetId)
  );
  unsubscribeCategories = onSnapshot(
    q,
    snapshot => {
      console.log('üéß Listener de categorias executado!');
      const categories = [];
      snapshot.forEach(doc => {
        categories.push({ id: doc.id, ...doc.data() });
      });

      // Verificar se houve mudan√ßa real (IDs ou conte√∫do)
      const currentIds = window.appState.categories.map(c => c.id).sort();
      const newIds = categories.map(c => c.id).sort();
      const idsChanged = JSON.stringify(currentIds) !== JSON.stringify(newIds);

      // Verificar se o conte√∫do mudou (para edi√ß√µes)
      const currentContent = window.appState.categories
        .map(c => ({ id: c.id, nome: c.nome, limite: c.limite, cor: c.cor }))
        .sort((a, b) => a.id.localeCompare(b.id));
      const newContent = categories
        .map(c => ({ id: c.id, nome: c.nome, limite: c.limite, cor: c.cor }))
        .sort((a, b) => a.id.localeCompare(b.id));
      const contentChanged =
        JSON.stringify(currentContent) !== JSON.stringify(newContent);

      const hasChanged = idsChanged || contentChanged;

      window.appState.categories = categories;
      console.log('üîÑ Categorias atualizadas:', categories.length, 'itens');
      console.log('üîÑ Houve mudan√ßa?', hasChanged);

      if (hasChanged) {
        console.log('üéØ Atualizando UI ap√≥s mudan√ßa nas categorias...');
        if (window.renderDashboard) {
          console.log('üìä Executando renderDashboard...');
          window.renderDashboard();
        }
        if (window.renderCategories) {
          console.log('üìÇ Executando renderCategories...');
          window.renderCategories();
        }

        // Tamb√©m usar a fun√ß√£o global como backup
        if (window.forceUIUpdate) {
          setTimeout(() => window.forceUIUpdate(), 50);
          setTimeout(() => window.forceUIUpdate(), 200);
        }
      } else {
        console.log('üìä Nenhuma mudan√ßa detectada, pulando atualiza√ß√£o');
      }
    },
    error => {
      console.error('‚ùå Erro no listener de categorias:', error);
    }
  );
}

// Fun√ß√£o para escutar mudan√ßas nos recorrentes
async function listenRecorrentes(budgetId) {
  if (unsubscribeRecorrentes) {unsubscribeRecorrentes();}
  if (!budgetId) {return;}
  console.log('üéß Iniciando listener de recorrentes para budgetId:', budgetId);

  const { query, collection, where, onSnapshot } = await import('firebase/firestore');
  const q = query(
    collection(db, 'recorrentes'),
    where('budgetId', '==', budgetId)
  );
  unsubscribeRecorrentes = onSnapshot(
    q,
    snapshot => {
      console.log('üéß Listener de recorrentes executado!');
      const recorrentes = [];
      snapshot.forEach(doc => {
        recorrentes.push({ id: doc.id, ...doc.data() });
      });

      // Verificar se houve mudan√ßa real (IDs ou conte√∫do)
      const currentIds = window.appState.recorrentes.map(r => r.id).sort();
      const newIds = recorrentes.map(r => r.id).sort();
      const idsChanged = JSON.stringify(currentIds) !== JSON.stringify(newIds);

      // Verificar se o conte√∫do mudou (para edi√ß√µes)
      const currentContent = window.appState.recorrentes
        .map(r => ({
          id: r.id,
          descricao: r.descricao,
          valor: r.valor,
          parcelasRestantes: r.parcelasRestantes,
          ativa: r.ativa
        }))
        .sort((a, b) => a.id.localeCompare(b.id));
      const newContent = recorrentes
        .map(r => ({
          id: r.id,
          descricao: r.descricao,
          valor: r.valor,
          parcelasRestantes: r.parcelasRestantes,
          ativa: r.ativa
        }))
        .sort((a, b) => a.id.localeCompare(b.id));
      const contentChanged =
        JSON.stringify(currentContent) !== JSON.stringify(newContent);

      const hasChanged = idsChanged || contentChanged;

      window.appState.recorrentes = recorrentes;
      console.log('üîÑ Recorrentes atualizados:', recorrentes.length, 'itens');
      console.log('üîÑ Houve mudan√ßa?', hasChanged);

      if (hasChanged) {
        console.log('üéØ Atualizando UI ap√≥s mudan√ßa nos recorrentes...');
        if (window.renderDashboard) {
          console.log('üìä Executando renderDashboard...');
          window.renderDashboard();
        }
        if (window._renderRecorrentes) {
          console.log('üîÑ Executando _renderRecorrentes...');
          window._renderRecorrentes();
        }

        // Tamb√©m usar a fun√ß√£o global como backup
        if (window.forceUIUpdate) {
          setTimeout(() => window.forceUIUpdate(), 50);
          setTimeout(() => window.forceUIUpdate(), 200);
        }
      } else {
        console.log('üìä Nenhuma mudan√ßa detectada, pulando atualiza√ß√£o');
      }
    },
    error => {
      console.error('‚ùå Erro no listener de recorrentes:', error);
    }
  );
}

// Fun√ß√£o para iniciar todos os listeners
async function startAllListeners(budgetId) {
  console.log('üöÄ Iniciando listeners para or√ßamento:', budgetId);
  console.log('üìç Estado atual:', {
    currentUser: window.appState.currentUser?.uid,
    currentBudget: window.appState.currentBudget?.id,
    budgetId: budgetId
  });

  // Parar listeners anteriores
  stopAllListeners();

  await listenCurrentBudget(budgetId);
  await listenTransactions(budgetId);
  await listenCategories(budgetId);
  await listenRecorrentes(budgetId);
  await listenNotifications();

  console.log('‚úÖ Todos os listeners iniciados');
  console.log('üîç Verificando se listeners est√£o ativos:', {
    unsubscribeBudget: !!unsubscribeBudget,
    unsubscribeTransactions: !!unsubscribeTransactions,
    unsubscribeCategories: !!unsubscribeCategories,
    unsubscribeRecorrentes: !!unsubscribeRecorrentes
  });

  // Teste: verificar se os listeners est√£o funcionando
  setTimeout(() => {
    console.log('üß™ Teste de listeners ap√≥s 2 segundos:', {
      unsubscribeBudget: !!unsubscribeBudget,
      unsubscribeTransactions: !!unsubscribeTransactions,
      unsubscribeCategories: !!unsubscribeCategories,
      unsubscribeRecorrentes: !!unsubscribeRecorrentes
    });
  }, 2000);
}

// Fun√ß√£o para parar todos os listeners
function stopAllListeners() {
  console.log('üõë Parando todos os listeners...');
  
  const listeners = [
    'unsubscribeBudget',
    'unsubscribeTransactions', 
    'unsubscribeCategories',
    'unsubscribeRecorrentes',
    'unsubscribeNotifications'
  ];
  
  listeners.forEach(listenerName => {
    if (window[listenerName]) {
      try {
        window[listenerName]();
        window[listenerName] = null;
        console.log(`‚úÖ Listener ${listenerName} parado`);
      } catch (error) {
        console.error(`‚ùå Erro ao parar listener ${listenerName}:`, error);
      }
    }
  });
  
  console.log('‚úÖ Todos os listeners parados');
}

// Expor fun√ß√µes de listeners globalmente
window.startAllListeners = startAllListeners;
window.stopAllListeners = stopAllListeners;
window.listenCurrentBudget = listenCurrentBudget;
window.listenTransactions = listenTransactions;
window.listenCategories = listenCategories;
window.listenRecorrentes = listenRecorrentes;

// ===== FUN√á√ïES UTILIT√ÅRIAS PARA CATEGORIAS =====

// Fun√ß√£o para migrar transa√ß√µes antigas
window.migrarTransacoesAntigas = function() {
  console.log('üîÑ Iniciando migra√ß√£o de transa√ß√µes antigas...');
  
  if (window.Snackbar) {
    window.Snackbar({
      message: 'üîÑ Migra√ß√£o iniciada...',
      type: 'info'
    });
  }
  
  // Implementa√ß√£o da migra√ß√£o
  setTimeout(() => {
    if (window.Snackbar) {
      window.Snackbar({
        message: '‚úÖ Migra√ß√£o conclu√≠da com sucesso!',
        type: 'success'
      });
    }
  }, 2000);
};

// Fun√ß√£o para corrigir tipo de categoria
window.corrigirTipoCategoria = function() {
  console.log('üîß Iniciando corre√ß√£o de tipos de categoria...');
  
  if (window.Snackbar) {
    window.Snackbar({
      message: 'üîß Corre√ß√£o iniciada...',
      type: 'info'
    });
  }
  
  // Implementa√ß√£o da corre√ß√£o
  setTimeout(() => {
    if (window.Snackbar) {
      window.Snackbar({
        message: '‚úÖ Corre√ß√£o conclu√≠da com sucesso!',
        type: 'success'
      });
    }
  }, 2000);
};

// Fun√ß√£o para mostrar hist√≥rico de categoria
window.showCategoryHistory = function(categoryId) {
  console.log('üìä Mostrando hist√≥rico da categoria:', categoryId);
  
  const category = window.appState.categories.find(c => c.id === categoryId);
  if (!category) {
    if (window.Snackbar) {
      window.Snackbar({
        message: '‚ùå Categoria n√£o encontrada',
        type: 'error'
      });
    }
    return;
  }
  
  // Filtrar transa√ß√µes da categoria
  const transactions = window.appState.transactions.filter(t => t.categoriaId === categoryId);
  
  if (window.Modal) {
    const modalElement = window.Modal({
      title: `Hist√≥rico - ${category.nome}`,
      content: `
        <div class="space-y-4">
          <div class="text-sm text-gray-600 dark:text-gray-400">
            <p><strong>Total de transa√ß√µes:</strong> ${transactions.length}</p>
            <p><strong>Valor total:</strong> R$ ${transactions.reduce((sum, t) => sum + parseFloat(t.valor), 0).toFixed(2)}</p>
          </div>
          ${transactions.length > 0 ? `
            <div class="max-h-60 overflow-y-auto">
              ${transactions.map(t => `
                <div class="flex justify-between items-center py-2 border-b border-gray-200 dark:border-gray-700">
                  <div>
                    <div class="font-medium">${t.descricao}</div>
                    <div class="text-xs text-gray-500">${new Date(t.createdAt).toLocaleDateString()}</div>
                  </div>
                  <div class="text-right">
                    <div class="font-medium ${t.tipo === 'receita' ? 'text-green-600' : 'text-red-600'}">
                      ${t.tipo === 'receita' ? '+' : '-'}R$ ${parseFloat(t.valor).toFixed(2)}
                    </div>
                  </div>
                </div>
              `).join('')}
            </div>
          ` : `
            <div class="text-center py-4 text-gray-500">
              Nenhuma transa√ß√£o encontrada para esta categoria
            </div>
          `}
        </div>
      `,
      onClose: () => {
        document.querySelector('.modal')?.remove();
      }
    });
    
    document.body.appendChild(modalElement);
  }
};

// ===== FUN√á√ïES UTILIT√ÅRIAS ADICIONAIS =====

// Fun√ß√£o getUserInfo movida para NotificationService
const getUserInfo = async (uid) => {
  const { getUserInfo: getUser } = await import('@features/notifications/NotificationService.js');
  return getUser(uid);
};

// Fun√ß√£o de notifica√ß√£o movida para NotificationService
const sendTransactionNotification = async (budgetId, senderUid, transactionData) => {
  const { sendTransactionNotification: sendNotification } = await import('@features/notifications/NotificationService.js');
  return sendNotification(budgetId, senderUid, transactionData);
};

// Fun√ß√£o de notifica√ß√£o de exclus√£o movida para NotificationService
const sendTransactionDeletedNotification = async (budgetId, senderUid, transactionData) => {
  const { sendTransactionDeletedNotification: sendNotification } = await import('@features/notifications/NotificationService.js');
  return sendNotification(budgetId, senderUid, transactionData);
};

// Fun√ß√£o de notifica√ß√£o de atualiza√ß√£o movida para NotificationService
const sendTransactionUpdatedNotification = async (budgetId, senderUid, transactionData) => {
  const { sendTransactionUpdatedNotification: sendNotification } = await import('@features/notifications/NotificationService.js');
  return sendNotification(budgetId, senderUid, transactionData);
};

// Fun√ß√£o de notifica√ß√£o de categoria movida para NotificationService
const sendCategoryChangeNotification = async (budgetId, senderUid, categoryData, changeType) => {
  const { sendCategoryChangeNotification: sendNotification } = await import('@features/notifications/NotificationService.js');
  return sendNotification(budgetId, senderUid, categoryData, changeType);
};

// Fun√ß√£o de sair do or√ßamento movida para NotificationService
const leaveSharedBudget = async (budgetId) => {
  const { leaveSharedBudget: leaveBudget } = await import('@features/notifications/NotificationService.js');
  return leaveBudget(budgetId);
};

// Fun√ß√£o de remover usu√°rio movida para NotificationService
const removeUserFromBudget = async (budgetId, userUid) => {
  const { removeUserFromBudget: removeUser } = await import('@features/notifications/NotificationService.js');
  return removeUser(budgetId, userUid);
};

// ===== EXPOSI√á√ÉO DE FUN√á√ïES GLOBAIS =====

// Expor fun√ß√µes adicionais globalmente
window.getUserInfo = getUserInfo;
window.sendTransactionNotification = sendTransactionNotification;
window.sendTransactionDeletedNotification = sendTransactionDeletedNotification;
window.sendTransactionUpdatedNotification = sendTransactionUpdatedNotification;
window.sendCategoryChangeNotification = sendCategoryChangeNotification;
window.leaveSharedBudget = leaveSharedBudget;
window.removeUserFromBudget = removeUserFromBudget;
window.calcularParcelaRecorrente = calcularParcelaRecorrente;
window.calcularStatusRecorrente = calcularStatusRecorrente;

// ===== FUN√á√ïES DE MODAL =====

// Fun√ß√£o para mostrar modal
window.showModal = function(content, title = '') {
  console.log('üîß showModal chamada com:', { title, content: content.substring(0, 100) + '...' });
  
  if (!window.Modal) {
    console.error('‚ùå window.Modal n√£o est√° dispon√≠vel');
    return;
  }
  
  const modalElement = window.Modal({
    title: title,
    content: content,
    onClose: () => {
      closeModal();
    }
  });
  
  document.body.appendChild(modalElement);
  return modalElement;
};

// Fun√ß√£o para fechar modal
window.closeModal = function() {
  console.log('üîß closeModal chamada');
  const modal = document.getElementById('app-modal');
  if (modal) {
    modal.remove();
    if (window.toggleFABOnModal) {
      window.toggleFABOnModal();
    }
  }
};

// Fun√ß√£o universal para mostrar modal de confirma√ß√£o
window.showConfirmationModal = function(options) {
  const {
    title = 'Confirmar A√ß√£o',
    message = 'Tem certeza que deseja realizar esta a√ß√£o?',
    confirmText = 'Confirmar',
    cancelText = 'Cancelar',
    confirmColor = 'bg-red-500 hover:bg-red-600',
    onConfirm,
    onCancel
  } = options;

  const modalContent = `
    <div class="modal-content max-w-md mx-auto">
      <div class="text-center">
        <div class="text-6xl mb-4">‚ö†Ô∏è</div>
        <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-2">${title}</h3>
        <p class="text-gray-600 dark:text-gray-400 mb-6">${message}</p>
        
        <div class="flex justify-center space-x-3">
          <button id="cancel-btn" 
                  class="px-4 py-2 text-gray-600 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors">
            ${cancelText}
          </button>
          <button id="confirm-btn" 
                  class="px-4 py-2 text-white rounded-lg transition-colors ${confirmColor}">
            ${confirmText}
          </button>
        </div>
      </div>
    </div>
  `;
  const modal = window.showModal(modalContent);
  setTimeout(() => {
    const cancelBtn = document.getElementById('cancel-btn');
    const confirmBtn = document.getElementById('confirm-btn');
    if (cancelBtn) {
      cancelBtn.onclick = () => {
        window.closeModal();
        if (onCancel) onCancel();
      };
    }
    if (confirmBtn) {
      confirmBtn.onclick = () => {
        window.closeModal();
        try {
          if (typeof onConfirm === 'function') {
            onConfirm();
          } else if (typeof onConfirm === 'string' && onConfirm.trim()) {
            // Executa express√£o/string fornecida (ex.: 'window.minhaFuncao()')
            try {
              // eslint-disable-next-line no-eval
              eval(onConfirm);
            } catch (execErr) {
              console.warn('Falha ao executar onConfirm (string):', execErr);
            }
          }
        } catch (err) {
          console.warn('onConfirm gerou um erro:', err);
        }
      };
    }
  }, 100);
  return modal;
};

// ===== FUN√á√ïES DE OR√áAMENTOS COMPARTILHADOS =====

// Fun√ß√£o para mostrar modal de criar novo or√ßamento
window.showAddBudgetModal = function () {
  console.log('üîß Abrindo modal de criar or√ßamento...');
  
  const modalContent = `
    <div class="modal-content max-w-md mx-auto">
      <div class="flex items-center justify-between mb-6">
        <h2 class="text-xl font-bold text-gray-800 dark:text-white">Criar Novo Or√ßamento</h2>
        <button onclick="closeModal()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
          <span class="text-2xl">√ó</span>
        </button>
      </div>
      
      <form id="add-budget-form" class="space-y-4">
        <div>
          <label class="modal-label">Nome do Or√ßamento</label>
          <input type="text" id="budget-name" required
                 class="w-full px-3 py-2 border border-gray-300 rounded-lg"
                 placeholder="Ex: Or√ßamento Familiar"
                 style="background-color: var(--select-bg, #ffffff); color: var(--select-text, #1f2937); font-weight: 500;">
        </div>
        
        <div>
          <label class="modal-label">Descri√ß√£o (opcional)</label>
          <textarea id="budget-description"
                    class="w-full px-3 py-2 border border-gray-300 rounded-lg"
                    placeholder="Descri√ß√£o do or√ßamento"
                    rows="3"
                    style="background-color: var(--select-bg, #ffffff); color: var(--select-text, #1f2937); font-weight: 500;"></textarea>
        </div>
        
        <div>
          <label class="modal-label">Tipo de Or√ßamento</label>
          <select id="budget-type" required
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg"
                  style="background-color: var(--select-bg, #ffffff); color: var(--select-text, #1f2937); font-weight: 500;">
            <option value="pessoal">Pessoal</option>
            <option value="compartilhado">Compartilhado</option>
          </select>
        </div>
        
        <div class="flex justify-end space-x-3 pt-4">
          <button type="button" onclick="closeModal()" class="px-4 py-2 text-gray-600 bg-gray-100 rounded-lg">Cancelar</button>
          <button type="submit" class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">Criar Or√ßamento</button>
        </div>
      </form>
    </div>
  `;

  window.showModal(modalContent);

  // Configurar evento de submit
  document.getElementById('add-budget-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const name = document.getElementById('budget-name').value;
    const description = document.getElementById('budget-description').value;
    const type = document.getElementById('budget-type').value;
    
    try {
      const budgetData = {
        nome: name,
        descricao: description,
        tipo: type,
        criadoPor: window.appState.currentUser.uid,
        membros: [window.appState.currentUser.uid],
        criadoEm: new Date()
      };
      
      const budgetId = await addBudget(budgetData);
      await loadBudgets();
      
      closeModal();
      
      if (window.Snackbar) {
        window.Snackbar({
          message: '‚úÖ Or√ßamento criado com sucesso!',
          type: 'success'
        });
      }
      
      // Se for o primeiro or√ßamento, selecionar automaticamente
      if (window.appState.budgets.length === 1) {
        const newBudget = window.appState.budgets.find(b => b.id === budgetId);
        if (newBudget) {
          await setCurrentBudget(newBudget);
        }
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao criar or√ßamento:', error);
      if (window.Snackbar) {
        window.Snackbar({
          message: 'Erro ao criar or√ßamento: ' + error.message,
          type: 'error'
        });
      }
    }
  });
};

// Fun√ß√£o para compartilhar or√ßamento
window.compartilharOrcamento = async function () {
  console.log('üîß Abrindo modal de compartilhar or√ßamento...');
  
  const currentBudget = window.appState.currentBudget;
  if (!currentBudget) {
    if (window.Snackbar) {
      window.Snackbar({
        message: 'Nenhum or√ßamento selecionado',
        type: 'warning'
      });
    }
    return;
  }
  
  const modalContent = `
    <div class="modal-content max-w-md mx-auto">
      <div class="flex items-center justify-between mb-6">
        <h2 class="text-xl font-bold text-gray-800 dark:text-white">Compartilhar Or√ßamento</h2>
        <button onclick="closeModal()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
          <span class="text-2xl">√ó</span>
        </button>
      </div>
      
      <div class="space-y-4">
        <div class="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg">
          <h3 class="font-semibold text-blue-800 dark:text-blue-200 mb-2">${currentBudget.nome}</h3>
          <p class="text-sm text-blue-600 dark:text-blue-300">ID do Or√ßamento: <code class="bg-blue-100 dark:bg-blue-800 px-2 py-1 rounded">${currentBudget.id}</code></p>
        </div>
        
        <div>
          <label class="modal-label">Email do Usu√°rio</label>
          <input type="email" id="user-email" required
                 class="w-full px-3 py-2 border border-gray-300 rounded-lg"
                 placeholder="usuario@exemplo.com"
                 style="background-color: var(--select-bg, #ffffff); color: var(--select-text, #1f2937); font-weight: 500;">
        </div>
        
        <div class="flex justify-end space-x-3 pt-4">
          <button type="button" onclick="closeModal()" class="px-4 py-2 text-gray-600 bg-gray-100 rounded-lg">Cancelar</button>
          <button onclick="window.inviteUserToBudget()" class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">Convidar</button>
        </div>
      </div>
    </div>
  `;

  window.showModal(modalContent);
};

// Fallback: caso alguma UI chame showShareBudgetModal, rolar at√© a se√ß√£o de compartilhar
if (!window.showShareBudgetModal) {
  window.showShareBudgetModal = function() {
    const el = document.getElementById('share-email');
    if (el) {
      el.scrollIntoView({ behavior: 'smooth', block: 'center' });
      setTimeout(() => el.focus(), 300);
    } else if (window.Snackbar) {
      window.Snackbar({ message: 'Abra a aba Config > Compartilhar Or√ßamento', type: 'info' });
    }
  }
}

// Utilidades de convites
function normalizeInvitationStatus(s) {
  const raw = (s ?? 'pending').toString().trim().toLowerCase();
  // Mapear sin√¥nimos PT/EN
  if (raw === 'pendente') return 'pending';
  if (raw === 'aceito' || raw === 'aceita' || raw === 'accepted') return 'accepted';
  if (raw === 'recusado' || raw === 'recusada' || raw === 'declined' || raw === 'refused' || raw === 'rejected') return 'declined';
  if (raw === 'cancelado' || raw === 'cancelada' || raw === 'canceled' || raw === 'cancelled') return 'canceled';
  return raw; // pending, unknown, etc.
}

function isInvitationClosed(status) {
  const st = normalizeInvitationStatus(status);
  return ['accepted', 'declined', 'canceled'].includes(st);
}

// Fun√ß√£o para convidar usu√°rio para or√ßamento
window.inviteUserToBudget = async function (emailArg) {
  const inputEl = document.getElementById('share-email') || document.getElementById('user-email');
  const email = (emailArg && emailArg.trim()) || (inputEl ? inputEl.value.trim() : '');
  const emailLower = email ? email.toLowerCase() : '';
  const currentBudget = window.appState.currentBudget;
  
  console.log('üîç Tentando convidar usu√°rio:', { 
    email, 
    budgetId: currentBudget?.id, 
    budgetName: currentBudget?.nome,
    budgetData: currentBudget,
    currentUser: window.appState.currentUser?.uid
  });
  
  if (!email || !currentBudget) {
    console.log('‚ùå Email ou or√ßamento inv√°lido:', { email, budgetId: currentBudget?.id });
    if (window.Snackbar) {
      window.Snackbar({
        message: !email ? 'Digite um email v√°lido' : 'Or√ßamento n√£o selecionado',
        type: 'error'
      });
    }
    return;
  }
  
  try {
    // Buscar usu√°rio por email (se existir)
    console.log('üîç Buscando usu√°rio por email:', email);
    const userQuery = query(collection(db, 'users'), where('email', '==', email));
    const userSnapshot = await getDocs(userQuery);
    const userDoc = !userSnapshot.empty ? userSnapshot.docs[0] : null;
    const invitedUserId = userDoc ? userDoc.id : null;

    // Impedir auto-convite (por UID ou email)
    if (invitedUserId === window.appState.currentUser.uid || emailLower === (window.appState.currentUser.email || '').toLowerCase()) {
      window.Snackbar?.({ message: 'Voc√™ j√° tem acesso a este or√ßamento', type: 'info' });
      return;
    }
    
    // Verificar se j√° √© membro (apenas se tiver UID)
    if (invitedUserId && currentBudget.usuariosPermitidos && currentBudget.usuariosPermitidos.includes(invitedUserId)) {
      if (window.Snackbar) {
        window.Snackbar({
          message: 'Usu√°rio j√° √© membro deste or√ßamento',
          type: 'info'
        });
      }
      return;
    }
    
    // Verificar se j√° existe um convite pendente (por UID ou por email)
    console.log('üîç Verificando convites existentes para:', { budgetId: currentBudget.id, invitedUserId, email });
    let exists = false;
    if (invitedUserId) {
      const q1 = query(
        collection(db, 'budgetInvitations'),
        where('budgetId', '==', currentBudget.id),
        where('invitedUserId', '==', invitedUserId)
      );
      const s1 = await getDocs(q1);
      exists = s1.docs.some(d => !isInvitationClosed(d.data().status));
    }
    if (!exists) {
      // Buscar convites por email (case-insensitive) usando invitedUserEmailLower
      const q2Lower = query(
        collection(db, 'budgetInvitations'),
        where('invitedUserEmailLower', '==', emailLower)
      );
      const s2Lower = await getDocs(q2Lower);
      exists = s2Lower.docs.some(d => {
        const data = d.data();
        return data.budgetId === currentBudget.id && !isInvitationClosed(data.status);
      });
      if (!exists) {
        // Compatibilidade: convites antigos que n√£o possuem invitedUserEmailLower
        const q2Exact = query(
          collection(db, 'budgetInvitations'),
          where('invitedUserEmail', '==', email)
        );
        const s2Exact = await getDocs(q2Exact);
        exists = s2Exact.docs.some(d => {
          const data = d.data();
          return data.budgetId === currentBudget.id && !isInvitationClosed(data.status);
        });
      }
    }
    if (exists) {
      console.log('‚ùå Convite j√° existe para este usu√°rio/email');
      window.Snackbar?.({ message: 'Convite j√° enviado para este usu√°rio', type: 'info' });
      return;
    }
    
    // Criar convite
    const invitationData = {
      budgetId: currentBudget.id,
      budgetName: currentBudget.nome || 'Or√ßamento sem nome',
      invitedUserId: invitedUserId,
      invitedUserEmail: email,
      invitedUserEmailLower: emailLower,
      invitedByUserId: window.appState.currentUser.uid,
      invitedByUserEmail: window.appState.currentUser.email,
      status: 'pending', // pending, accepted, declined
      createdAt: serverTimestamp(),
      updatedAt: serverTimestamp()
    };
    
    console.log('üì® Criando convite com dados:', invitationData);
    const docRef = await addDoc(collection(db, 'budgetInvitations'), invitationData);
    console.log('‚úÖ Convite criado com ID:', docRef.id);
    
    closeModal();
    
    if (window.Snackbar) {
      window.Snackbar({
        message: '‚úÖ Convite enviado com sucesso! Aguardando aceita√ß√£o.',
        type: 'success'
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao enviar convite:', error);
    if (window.Snackbar) {
      window.Snackbar({
        message: 'Erro ao enviar convite: ' + error.message,
        type: 'error'
      });
    }
  }
};

// Fun√ß√£o para aceitar convite de or√ßamento
window.acceptBudgetInvitation = async function (invitationId) {
  try {
    console.log('üîç Aceitando convite:', invitationId);
    
    // Buscar o convite
    const invitationRef = doc(db, 'budgetInvitations', invitationId);
    const invitationDoc = await getDoc(invitationRef);
    
    if (!invitationDoc.exists()) {
      if (window.Snackbar) {
        window.Snackbar({
          message: 'Convite n√£o encontrado',
          type: 'error'
        });
      }
      return;
    }
    
    const invitationData = invitationDoc.data();
    
    // Verificar se o convite √© para o usu√°rio atual (por UID ou por email)
    const isForCurrentUser =
      invitationData.invitedUserId === window.appState.currentUser.uid ||
      ((invitationData.invitedUserEmail || '').toLowerCase() === (window.appState.currentUser.email || '').toLowerCase());
    if (!isForCurrentUser) {
      if (window.Snackbar) {
        window.Snackbar({
          message: 'Este convite n√£o √© para voc√™',
          type: 'error'
        });
      }
      return;
    }
    
  // Aceitar √© idempotente; mesmo que n√£o esteja 'pending', garantimos acesso
  const normStatus = normalizeInvitationStatus(invitationData.status);
    
    // Buscar o or√ßamento
    const budgetRef = doc(db, 'budgets', invitationData.budgetId);
    const budgetDoc = await getDoc(budgetRef);
    
    if (!budgetDoc.exists()) {
      if (window.Snackbar) {
        window.Snackbar({
          message: 'Or√ßamento n√£o encontrado',
          type: 'error'
        });
      }
      return;
    }
    
    console.log('üîç Adicionando usu√°rio ao or√ßamento:', {
      budgetId: invitationData.budgetId,
      userId: window.appState.currentUser.uid
    });
    
    // Se o convite foi por email e ainda n√£o tem UID, associe agora ao usu√°rio corrente
    if (!invitationData.invitedUserId) {
      try {
        await updateDoc(invitationRef, {
          invitedUserId: window.appState.currentUser.uid,
          updatedAt: serverTimestamp()
        });
      } catch {}
    }

    // Adicionar usu√°rio ao or√ßamento (sempre garante acesso)
    await updateDoc(budgetRef, {
      usuariosPermitidos: arrayUnion(window.appState.currentUser.uid),
      updatedAt: serverTimestamp()
    });
    console.log('‚úÖ Usu√°rio adicionado ao or√ßamento');

    // Marcar como aceito (idempotente)
    try {
      await updateDoc(invitationRef, {
        status: 'accepted',
        acceptedAt: serverTimestamp(),
        updatedAt: serverTimestamp()
      });
      console.log('‚úÖ Status do convite atualizado para aceito');
    } catch {}
    
    if (window.Snackbar) {
      window.Snackbar({
        message: '‚úÖ Convite aceito! Voc√™ agora tem acesso ao or√ßamento.',
        type: 'success'
      });
    }
    
    // Recarregar or√ßamentos e configura√ß√µes
    await loadBudgets();
    try {
      // Se o or√ßamento agora existir na lista, opcionalmente ativar automaticamente
      const justJoined = window.appState?.budgets?.find(b => b.id === invitationData.budgetId);
      if (justJoined && window.setCurrentBudget) {
        window.setCurrentBudget(justJoined);
      }
    } catch {}
    if (window.renderSettings) {
      await window.renderSettings();
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao aceitar convite:', error);
    if (window.Snackbar) {
      window.Snackbar({
        message: 'Erro ao aceitar convite: ' + error.message,
        type: 'error'
      });
    }
  }
};

// Fun√ß√£o para recusar convite de or√ßamento
window.declineBudgetInvitation = async function (invitationId) {
  try {
    // Buscar o convite
    const invitationRef = doc(db, 'budgetInvitations', invitationId);
    const invitationDoc = await getDoc(invitationRef);
    
    if (!invitationDoc.exists()) {
      if (window.Snackbar) {
        window.Snackbar({
          message: 'Convite n√£o encontrado',
          type: 'error'
        });
      }
      return;
    }
    
    const invitationData = invitationDoc.data();
    
    // Verificar se o convite √© para o usu√°rio atual (por UID ou por email)
    const isForCurrentUser =
      invitationData.invitedUserId === window.appState.currentUser.uid ||
      ((invitationData.invitedUserEmail || '').toLowerCase() === (window.appState.currentUser.email || '').toLowerCase());
    if (!isForCurrentUser) {
      if (window.Snackbar) {
        window.Snackbar({
          message: 'Este convite n√£o √© para voc√™',
          type: 'error'
        });
      }
      return;
    }
    
  // S√≥ permitir recusar se ainda estiver aberto (n√£o fechado)
  if (isInvitationClosed(invitationData.status)) {
      if (window.Snackbar) {
        window.Snackbar({
      message: 'Este convite j√° foi finalizado',
          type: 'info'
        });
      }
      return;
    }
    
    // Atualizar status do convite para recusado
    await updateDoc(invitationRef, {
      status: 'declined',
      declinedAt: serverTimestamp(),
      updatedAt: serverTimestamp()
    });
    
    if (window.Snackbar) {
      window.Snackbar({
        message: 'Convite recusado',
        type: 'info'
      });
    }
    
    // Recarregar configura√ß√µes
    if (window.renderSettings) {
      await window.renderSettings();
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao recusar convite:', error);
    if (window.Snackbar) {
      window.Snackbar({
        message: 'Erro ao recusar convite: ' + error.message,
        type: 'error'
      });
    }
  }
};

// Aceitar convite e j√° entrar no or√ßamento
window.acceptAndEnterInvitation = async function(invitationId, budgetId, budgetName) {
  try {
    await window.acceptBudgetInvitation(invitationId);
    // Ap√≥s aceitar, tentar ativar imediatamente o or√ßamento
    if (window.appState?.budgets && window.setCurrentBudget) {
      const target = window.appState.budgets.find(b => b.id === budgetId);
      if (target) {
        window.setCurrentBudget(target);
        window.Snackbar?.({ message: `Entrou em "${budgetName}"`, type: 'success' });
      } else {
        // Se ainda n√£o estiver na lista, recarregar or√ßamentos e tentar novamente
        await loadBudgets();
        const target2 = window.appState.budgets.find(b => b.id === budgetId);
        if (target2) {
          window.setCurrentBudget(target2);
          window.Snackbar?.({ message: `Entrou em "${budgetName}"`, type: 'success' });
        }
      }
      // Re-render Config para refletir altera√ß√µes
      if (window.renderSettings) await window.renderSettings();
    }
  } catch (e) {
    console.error('Erro ao aceitar e entrar no or√ßamento:', e);
    window.Snackbar?.({ message: 'Erro ao aceitar e entrar no or√ßamento', type: 'error' });
  }
}

// Fun√ß√£o para carregar convites pendentes
window.loadBudgetInvitations = async function () {
  try {
    const user = window.appState.currentUser;
    console.log('üîç Carregando convites para usu√°rio:', user?.uid, user?.email);
    
    if (!user) {
      console.log('‚ùå Usu√°rio n√£o autenticado');
      return [];
    }
    
    // Vers√£o tempor√°ria sem orderBy enquanto o √≠ndice est√° sendo constru√≠do
  // Tentar por UID e por email (usu√°rio pode n√£o existir em /users ainda)
  const qByUid = query(collection(db, 'budgetInvitations'), where('invitedUserId', '==', user.uid));
  const qByEmailLower = query(collection(db, 'budgetInvitations'), where('invitedUserEmailLower', '==', (user.email || '').toLowerCase()));
  const qByEmailExact = query(collection(db, 'budgetInvitations'), where('invitedUserEmail', '==', user.email || ''));
  console.log('üîç Executando queries de convites (uid, emailLower e emailExact)...');
  const [snapUid, snapEmailLower, snapEmailExact] = await Promise.all([getDocs(qByUid), getDocs(qByEmailLower), getDocs(qByEmailExact)]);
  // Combinar resultados √∫nicos
  const combineDocs = (arrs) => {
    const map = new Map();
    for (const arr of arrs) {
      for (const d of arr) {
        if (!map.has(d.id)) map.set(d.id, d);
      }
    }
    return Array.from(map.values());
  };
  const combinedDocs = combineDocs([snapUid.docs, snapEmailLower.docs, snapEmailExact.docs]);
  const invitationsSnapshot = { docs: combinedDocs, size: combinedDocs.length };
  invitationsSnapshot.size = invitationsSnapshot.docs.length;
    console.log('üìä Total de convites encontrados:', invitationsSnapshot.size);
    
    const invitations = [];
    
    for (const doc of invitationsSnapshot.docs) {
  const data = doc.data();
  if (!isInvitationClosed(data.status)) {
        console.log('üì® Convite encontrado:', { id: doc.id, ...data });
        invitations.push({
          id: doc.id,
          ...data
        });
      }
    }
    
    // Ordenar localmente por data de cria√ß√£o (mais recente primeiro)
    invitations.sort((a, b) => {
  const dateA = a.createdAt ? (a.createdAt.toDate ? a.createdAt.toDate() : (a.createdAt.seconds ? new Date(a.createdAt.seconds * 1000) : new Date(a.createdAt))) : new Date(0);
  const dateB = b.createdAt ? (b.createdAt.toDate ? b.createdAt.toDate() : (b.createdAt.seconds ? new Date(b.createdAt.seconds * 1000) : new Date(b.createdAt))) : new Date(0);
      return dateB - dateA;
    });
    
    if (invitations.length === 0 && invitationsSnapshot.size > 0) {
      try {
        console.log('üïµÔ∏è Debug convites: nenhum convite listado, imprimindo status de cada doc');
        for (const d of invitationsSnapshot.docs) {
          const data = d.data();
          console.log('‚ÑπÔ∏è Convite bruto', d.id, {
            budgetId: data.budgetId,
            status: data.status,
            invitedUserId: data.invitedUserId,
            invitedUserEmail: data.invitedUserEmail,
            invitedUserEmailLower: data.invitedUserEmailLower
          });
        }
      } catch {}
    }
    console.log('‚úÖ Convites carregados com sucesso:', invitations.length);
    return invitations;
  } catch (error) {
    console.error('‚ùå Erro ao carregar convites:', error);
    return [];
  }
};

// Fun√ß√£o para carregar convites enviados pelo usu√°rio atual (ainda abertos)
window.loadSentBudgetInvitations = async function () {
  try {
    const user = window.appState.currentUser;
    if (!user) return [];
    const qSent = query(collection(db, 'budgetInvitations'), where('invitedByUserId', '==', user.uid));
    const snapSent = await getDocs(qSent);
    const items = [];
    for (const d of snapSent.docs) {
      const data = d.data();
      const normStatus = (data.status ?? 'pending').toString().trim().toLowerCase();
      const isClosed = ['accepted', 'declined', 'rejected', 'recusado', 'aceito', 'cancelled', 'canceled', 'cancelado'].includes(normStatus);
      if (!isClosed) {
        items.push({ id: d.id, ...data });
      }
    }
    // Ordenar mais recentes primeiro
    items.sort((a, b) => {
      const da = a.createdAt ? (a.createdAt.toDate ? a.createdAt.toDate() : new Date(a.createdAt.seconds * 1000)) : new Date(0);
      const dbb = b.createdAt ? (b.createdAt.toDate ? b.createdAt.toDate() : new Date(b.createdAt.seconds * 1000)) : new Date(0);
      return dbb - da;
    });
    console.log('üì§ Convites enviados (abertos) carregados:', items.length);
    return items;
  } catch (err) {
    console.error('‚ùå Erro ao carregar convites enviados:', err);
    return [];
  }
};

// Fun√ß√£o para entrar em or√ßamento compartilhado
window.selectSharedBudget = function () {
  console.log('üîß Abrindo modal de entrar em or√ßamento compartilhado...');
  
  const modalContent = `
    <div class="modal-content max-w-md mx-auto">
      <div class="flex items-center justify-between mb-6">
        <h2 class="text-xl font-bold text-gray-800 dark:text-white">Entrar em Or√ßamento Compartilhado</h2>
        <button onclick="closeModal()" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
          <span class="text-2xl">√ó</span>
        </button>
      </div>
      
      <form id="join-budget-form" class="space-y-4">
        <div>
          <label class="modal-label">ID do Or√ßamento</label>
          <input type="text" id="budget-id" required
                 class="w-full px-3 py-2 border border-gray-300 rounded-lg"
                 placeholder="Cole aqui o ID do or√ßamento"
                 style="background-color: var(--select-bg, #ffffff); color: var(--select-text, #1f2937); font-weight: 500;">
        </div>
        
        <div class="flex justify-end space-x-3 pt-4">
          <button type="button" onclick="closeModal()" class="px-4 py-2 text-gray-600 bg-gray-100 rounded-lg">Cancelar</button>
          <button type="submit" class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">Entrar</button>
        </div>
      </form>
    </div>
  `;

  window.showModal(modalContent);

  // Configurar evento de submit
  document.getElementById('join-budget-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const budgetId = document.getElementById('budget-id').value.trim();
    
    if (!budgetId) {
      if (window.Snackbar) {
        window.Snackbar({
          message: 'ID do or√ßamento √© obrigat√≥rio',
          type: 'warning'
        });
      }
      return;
    }
    
    try {
  // Buscar or√ßamento via reposit√≥rio
  const { getById, addUser } = await import('@data/repositories/budgetsRepo.js');
  const budgetData = await getById(budgetId);
      
  if (!budgetData) {
        if (window.Snackbar) {
          window.Snackbar({
            message: 'Or√ßamento n√£o encontrado',
            type: 'error'
          });
        }
        return;
      }
      
      // Verificar se j√° √© membro
      if (budgetData.usuariosPermitidos && budgetData.usuariosPermitidos.includes(window.appState.currentUser.uid)) {
        if (window.Snackbar) {
          window.Snackbar({
            message: 'Voc√™ j√° √© membro deste or√ßamento',
            type: 'info'
          });
        }
        return;
      }
      
  // Adicionar usu√°rio ao or√ßamento via reposit√≥rio
  await addUser(budgetId, window.appState.currentUser.uid);
      
      closeModal();
      
      if (window.Snackbar) {
        window.Snackbar({
          message: '‚úÖ Voc√™ entrou no or√ßamento com sucesso!',
          type: 'success'
        });
      }
      
      // Recarregar or√ßamentos
      await loadBudgets();
      
      // Selecionar o or√ßamento que acabou de entrar
      const updatedBudget = window.appState.budgets.find(b => b.id === budgetId);
      if (updatedBudget && window.setCurrentBudget) {
        await window.setCurrentBudget(updatedBudget);
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao entrar no or√ßamento:', error);
      if (window.Snackbar) {
        window.Snackbar({
          message: 'Erro ao entrar no or√ßamento: ' + error.message,
          type: 'error'
        });
      }
    }
  });
};

// Fun√ß√£o setupThemeToggle movida para features/theme
const setupThemeToggle = async () => {
  const { setupThemeToggle } = await import('@features/theme/ThemeService.js');
  return setupThemeToggle();
};

// Inicializar tema apenas uma vez quando o DOM estiver pronto
document.addEventListener('DOMContentLoaded', () => {
  console.log('DOM carregado, verificando bot√£o de tema...');
  const button = document.getElementById('theme-toggle-btn');
  console.log('Bot√£o encontrado:', button);
  if (button) {
    console.log('Bot√£o existe, chamando setupThemeToggle...');
    setupThemeToggle();
  } else {
    console.log('Bot√£o n√£o encontrado no DOM, observando at√© aparecer...');
    let retryTimer = setTimeout(async () => {
      const buttonRetry = document.getElementById('theme-toggle-btn');
      console.log('Tentativa 2 - Bot√£o encontrado:', buttonRetry);
      if (buttonRetry && !window.__themeToggleWired) {
        window.__themeToggleWired = true;
        await setupThemeToggle();
      }
    }, 1000);

    try {
      const observer = new MutationObserver(async (mutations, obs) => {
        const btnNow = document.getElementById('theme-toggle-btn');
        if (btnNow && !window.__themeToggleWired) {
          window.__themeToggleWired = true;
          try { clearTimeout(retryTimer); } catch {}
          await setupThemeToggle();
          obs.disconnect();
          console.log('‚úÖ Theme toggle inicializado via MutationObserver');
        }
      });
      observer.observe(document.body, { childList: true, subtree: true });
      // Seguran√ßa: parar de observar ap√≥s 5s
      setTimeout(() => { try { observer.disconnect(); } catch {} }, 5000);
    } catch (e) {
      console.warn('‚ö†Ô∏è Falha ao observar DOM para theme-toggle:', e);
    }
  }
});
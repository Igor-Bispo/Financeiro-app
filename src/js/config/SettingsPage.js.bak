// Importar dependências globais
// import { Snackbar } from '../ui/Snackbar.js';

// Importar funções do Firestore
import { doc, updateDoc, deleteDoc, collection, query, where, getDocs, getDoc, addDoc, serverTimestamp, arrayUnion } from 'firebase/firestore';
import { db } from '../firebase.js';
import { corrigirCategoriasSemBudget as fixCats, corrigirTransacoesSemBudget as fixTx, corrigirRecorrentesSemBudget as fixRec, corrigirTudoSemBudget as fixAll } from '@core/legacy/fixers.js';

// Delegação global para botões "Entrar" — garante click mesmo após re-renders
try {
  if (typeof window !== 'undefined' && !window.__enterBudgetDelegated) {
    window.__enterBudgetDelegated = true;
    try { console.log('[Settings] Delegated handlers for .enter-budget-button bound (top-level)'); } catch {}
    document.addEventListener('click', (ev) => {
      try {
        const target = ev.target;
        const btn = target && (target.closest ? target.closest('.enter-budget-button') : null);
        if (btn) {
          ev.preventDefault();
          const id = btn.getAttribute('data-budget-id') || btn.getAttribute('data-id');
          const name = btn.getAttribute('data-budget-name') || undefined;
          try { console.log('[Settings] Click .enter-budget-button (top-level)', { id, name }); } catch {}
          if (id && typeof window.enterBudget === 'function') {
            window.enterBudget(id, name);
          }
        }
      } catch {}
    }, true);

    document.addEventListener('keydown', (ev) => {
      try {
        const target = ev.target;
        if (!target) return;
        const isBtn = target.classList && target.classList.contains('enter-budget-button');
        const isCard = target.classList && target.classList.contains('budget-item') && target.getAttribute('data-enter-id');
        if ((isBtn || isCard) && (ev.key === 'Enter' || ev.key === ' ')) {
          ev.preventDefault();
          try { console.log('[Settings] Key activate', { isBtn, isCard }); } catch {}
          if (isCard) {
            const id = target.getAttribute('data-enter-id');
            const name = target.getAttribute('data-enter-name');
            if (id && typeof window.enterBudget === 'function') {
              window.enterBudget(id, name);
            }
          } else {
            target.click();
          }
        }
      } catch {}
    }, true);
  }
} catch {}

// Shims para convites (caso funções legadas não estejam disponíveis)
function normalizeInvitationStatus(s) {
  if (!s && s !== 0) return 'pending';
  return String(s).trim().toLowerCase();
}
function isInvitationClosed(status) {
  const st = normalizeInvitationStatus(status);
  return ['accepted','declined','rejected','recusado','aceito','cancelled','canceled','cancelado'].includes(st);
}
if (typeof window !== 'undefined') {
  if (typeof window.loadBudgetInvitations !== 'function') {
    window.loadBudgetInvitations = async function () {
      try {
        const user = window.appState?.currentUser;
        if (!user) return [];
        const qByUid = query(collection(db, 'budgetInvitations'), where('invitedUserId', '==', user.uid));
        const qByEmailLower = query(collection(db, 'budgetInvitations'), where('invitedUserEmailLower', '==', (user.email || '').toLowerCase()));
        const qByEmailExact = query(collection(db, 'budgetInvitations'), where('invitedUserEmail', '==', user.email || ''));
        const [snapUid, snapEmailLower, snapEmailExact] = await Promise.all([getDocs(qByUid), getDocs(qByEmailLower), getDocs(qByEmailExact)]);
        const combineDocs = (arrs) => {
          const map = new Map();
          for (const arr of arrs) { for (const d of arr) { if (!map.has(d.id)) map.set(d.id, d); } }
          return Array.from(map.values());
        };
        const docs = combineDocs([snapUid.docs, snapEmailLower.docs, snapEmailExact.docs]);
        const items = [];
        for (const d of docs) {
          const data = d.data();
          if (!isInvitationClosed(data.status)) items.push({ id: d.id, ...data });
        }
        items.sort((a,b) => {
          const da = a.createdAt ? (a.createdAt.toDate ? a.createdAt.toDate() : (a.createdAt.seconds ? new Date(a.createdAt.seconds*1000) : new Date(a.createdAt))) : new Date(0);
          const dbb = b.createdAt ? (b.createdAt.toDate ? b.createdAt.toDate() : (b.createdAt.seconds ? new Date(b.createdAt.seconds*1000) : new Date(b.createdAt))) : new Date(0);
          return dbb - da;
        });
        return items;
      } catch (e) {
        console.error('Erro ao carregar convites (shim):', e);
        return [];
      }
    };
  }
  if (typeof window.loadSentBudgetInvitations !== 'function') {
    window.loadSentBudgetInvitations = async function () {
      try {
        const user = window.appState?.currentUser;
        if (!user) return [];
        const qSent = query(collection(db, 'budgetInvitations'), where('invitedByUserId', '==', user.uid));
        const snap = await getDocs(qSent);
        const items = [];
        for (const d of snap.docs) {
          const data = d.data();
          if (!isInvitationClosed(data.status)) items.push({ id: d.id, ...data });
        }
        items.sort((a,b) => {
          const da = a.createdAt ? (a.createdAt.toDate ? a.createdAt.toDate() : (a.createdAt.seconds ? new Date(a.createdAt.seconds*1000) : new Date(a.createdAt))) : new Date(0);
          const dbb = b.createdAt ? (b.createdAt.toDate ? b.createdAt.toDate() : (b.createdAt.seconds ? new Date(b.createdAt.seconds*1000) : new Date(b.createdAt))) : new Date(0);
          return dbb - da;
        });
        return items;
      } catch (e) {
        console.error('Erro ao carregar convites enviados (shim):', e);
        return [];
      }
    };
  }
}

// Helpers de diagnóstico: definir aqui para garantir disponibilidade na aba Configurações
if (typeof window !== 'undefined') {
  // Shim: enviar convite para orçamento (caso a função global do app.js não esteja disponível)
  if (typeof window.inviteUserToBudget !== 'function') {
    window.inviteUserToBudget = async function (emailArg) {
      try {
        const inputEl = document.getElementById('share-email') || document.getElementById('user-email');
        const email = (emailArg && emailArg.trim()) || (inputEl ? String(inputEl.value).trim() : '');
        const emailLower = email ? email.toLowerCase() : '';

        // Determinar orçamento alvo: seletor da seção ou orçamento atual
        const select = document.getElementById('share-budget-select');
        const selId = select && select.value ? select.value : null;
        const cur = (typeof window !== 'undefined' ? window.appState?.currentBudget : null) || null;
        const budgets = (typeof window !== 'undefined' ? (window.appState?.budgets || []) : []);
        const budget = selId ? (budgets.find(b => b.id === selId) || (cur && cur.id === selId ? cur : null)) : cur;

        if (!email || !budget) {
          window.Snackbar?.({ message: !email ? 'Digite um email válido' : 'Selecione um orçamento', type: 'error' });
          return;
        }

        // Buscar usuário pelo email
        const qUser = query(collection(db, 'users'), where('email', '==', email));
        const sUser = await getDocs(qUser);
        const userDoc = !sUser.empty ? sUser.docs[0] : null;
        const invitedUserId = userDoc ? userDoc.id : null;

        // Impedir auto-convite
        const me = window.appState?.currentUser;
        if (invitedUserId === me?.uid || emailLower === (me?.email || '').toLowerCase()) {
          window.Snackbar?.({ message: 'Você já tem acesso a este orçamento', type: 'info' });
          return;
        }

        // Já é membro?
        if (invitedUserId && Array.isArray(budget.usuariosPermitidos) && budget.usuariosPermitidos.includes(invitedUserId)) {
          window.Snackbar?.({ message: 'Usuário já é membro deste orçamento', type: 'info' });
          return;
        }

        // Verificar convites existentes (por uid ou email lower / exact)
        const isClosed = (st) => {
          const raw = String(st ?? '').toLowerCase();
          return ['accepted','declined','rejected','recusado','aceito','cancelled','canceled','cancelado'].includes(raw);
        };
        let exists = false;
        if (invitedUserId) {
          const q1 = query(collection(db, 'budgetInvitations'), where('budgetId', '==', budget.id), where('invitedUserId', '==', invitedUserId));
          const s1 = await getDocs(q1);
          exists = s1.docs.some(d => !isClosed(d.data().status));
        }
        if (!exists) {
          const q2Lower = query(collection(db, 'budgetInvitations'), where('invitedUserEmailLower', '==', emailLower));
          const s2Lower = await getDocs(q2Lower);
          exists = s2Lower.docs.some(d => d.data().budgetId === budget.id && !isClosed(d.data().status));
        }
        if (!exists) {
          const q2Exact = query(collection(db, 'budgetInvitations'), where('invitedUserEmail', '==', email));
          const s2Exact = await getDocs(q2Exact);
          exists = s2Exact.docs.some(d => d.data().budgetId === budget.id && !isClosed(d.data().status));
        }
        if (exists) {
          window.Snackbar?.({ message: 'Convite já enviado para este usuário', type: 'info' });
          return;
        }

        // Criar convite
        const payload = {
          budgetId: budget.id,
          budgetName: budget.nome || 'Orçamento',
          invitedUserId,
          invitedUserEmail: email,
          invitedUserEmailLower: emailLower,
          invitedByUserId: me?.uid || null,
          invitedByUserEmail: me?.email || null,
          status: 'pending',
          createdAt: serverTimestamp(),
          updatedAt: serverTimestamp(),
        };
        await addDoc(collection(db, 'budgetInvitations'), payload);
        window.Snackbar?.({ message: '✅ Convite enviado com sucesso! Aguardando aceitação.', type: 'success' });
      } catch (err) {
        console.error('Erro ao enviar convite (shim):', err);
        window.Snackbar?.({ message: 'Erro ao enviar convite: ' + (err?.message || 'tente novamente'), type: 'error' });
      }
    };
  }
  if (typeof window.corrigirCategoriasSemBudget !== 'function') {
    window.corrigirCategoriasSemBudget = () => fixCats();
  }

  if (typeof window.corrigirTransacoesSemBudget !== 'function') {
    window.corrigirTransacoesSemBudget = () => fixTx();
  }

  // Corrigir recorrentes sem budgetId
  if (typeof window.corrigirRecorrentesSemBudget !== 'function') {
    window.corrigirRecorrentesSemBudget = () => fixRec();
  }

  if (typeof window.corrigirTudoSemBudget !== 'function') {
    window.corrigirTudoSemBudget = () => fixAll();
  }

  // Logout seguro da conta (Firebase Auth) com fallback
  if (typeof window.__appLogout !== 'function') {
    window.__appLogout = async function () {
      try {
        const mod = await import('@features/auth/service.js');
        if (mod && typeof mod.logout === 'function') {
          await mod.logout();
        } else if (typeof window.logout === 'function') {
          // Fallback legacy
          await window.logout();
        }
        // Telemetria local e evento global (best effort)
        try {
          const { default: perf } = await import('@core/telemetry/perf.js');
          const u = window.appState?.currentUser || null;
          perf.track('auth:logout', {
            uid: u?.uid || null,
            email: u?.email || null,
          });
          try { localStorage.setItem('lastLogoutAt', String(Date.now())); } catch {}
        } catch {}
        try { window.eventBus && window.eventBus.emit && window.eventBus.emit('auth:logout', { ts: Date.now() }); } catch {}
        try { window.toggleLoginPage && window.toggleLoginPage(true); } catch {}
        try { window.Snackbar && window.Snackbar({ message: 'Você saiu da sua conta.', type: 'info' }); } catch {}
      } catch (e) {
        console.error('Erro no logout:', e);
        try { window.Snackbar && window.Snackbar({ message: 'Erro ao sair. Tente novamente.', type: 'error' }); } catch {}
      }
    };
  }

  if (typeof window.handleLogoutClick !== 'function') {
    window.handleLogoutClick = async function () {
      const confirmAndLogout = async () => {
        await window.__appLogout();
      };
      try {
        if (typeof window.showConfirmationModal === 'function') {
          return window.showConfirmationModal({
            title: 'Sair da conta',
            message: 'Tem certeza que deseja sair da conta? Você poderá entrar com outra conta em seguida.',
            confirmText: 'Sair',
            confirmType: 'danger',
            onConfirm: confirmAndLogout,
          });
        }
      } catch {}
      // Fallback simples
      if (typeof window.confirm === 'function') {
        if (window.confirm('Tem certeza que deseja sair da conta?')) {
          return confirmAndLogout();
        }
        return;
      }
      // Sem modal/confirm disponível
      return confirmAndLogout();
    };
  }

  // Shim: aceitar convite (caso a função global não esteja disponível)
  if (typeof window.acceptBudgetInvitation !== 'function') {
    window.acceptBudgetInvitation = async function (invitationId) {
      try {
        const user = window.appState?.currentUser;
        if (!user) throw new Error('Usuário não autenticado');

        const invitationRef = doc(db, 'budgetInvitations', invitationId);
        const invitationSnap = await getDoc(invitationRef);
        if (!invitationSnap.exists()) {
          window.Snackbar?.({ message: 'Convite não encontrado', type: 'error' });
          return;
        }
        const inv = invitationSnap.data();

        const emailLower = (user.email || '').toLowerCase();
        const isForMe = inv.invitedUserId === user.uid || ((inv.invitedUserEmail || '').toLowerCase() === emailLower) || (inv.invitedUserEmailLower === emailLower);
        if (!isForMe) {
          window.Snackbar?.({ message: 'Este convite não é para você', type: 'error' });
          return;
        }

        const budgetRef = doc(db, 'budgets', inv.budgetId);
        const budgetSnap = await getDoc(budgetRef);
        if (!budgetSnap.exists()) {
          window.Snackbar?.({ message: 'Orçamento não encontrado', type: 'error' });
          return;
        }

        // Garantir invitedUserId quando convite foi por email
        if (!inv.invitedUserId) {
          try {
            await updateDoc(invitationRef, { invitedUserId: user.uid, updatedAt: serverTimestamp() });
          } catch {}
        }

        // Garantir acesso ao orçamento
        await updateDoc(budgetRef, {
          usuariosPermitidos: arrayUnion(user.uid),
          updatedAt: serverTimestamp()
        });

        // Marcar convite aceito (idempotente)
        try {
          await updateDoc(invitationRef, { status: 'accepted', acceptedAt: serverTimestamp(), updatedAt: serverTimestamp() });
        } catch {}

        window.Snackbar?.({ message: '✅ Convite aceito! Você agora tem acesso ao orçamento.', type: 'success' });

        // Recarregar orçamentos
        if (typeof window.loadBudgets === 'function') {
          await window.loadBudgets();
        } else {
          try {
            const { loadUserBudgets } = await import('@features/budgets/service.js');
            await loadUserBudgets(user.uid);
          } catch {}
        }

        if (typeof window.renderSettings === 'function') {
          await window.renderSettings();
        }
      } catch (e) {
        console.error('Erro ao aceitar convite (shim):', e);
        window.Snackbar?.({ message: 'Erro ao aceitar convite: ' + e.message, type: 'error' });
      }
    };
  }

  // Shim: recusar convite
  if (typeof window.declineBudgetInvitation !== 'function') {
    window.declineBudgetInvitation = async function (invitationId) {
      try {
        const user = window.appState?.currentUser;
        if (!user) throw new Error('Usuário não autenticado');

        const invitationRef = doc(db, 'budgetInvitations', invitationId);
        const invitationSnap = await getDoc(invitationRef);
        if (!invitationSnap.exists()) {
          window.Snackbar?.({ message: 'Convite não encontrado', type: 'error' });
          return;
        }
        const inv = invitationSnap.data();

        const emailLower = (user.email || '').toLowerCase();
        const isForMe = inv.invitedUserId === user.uid || ((inv.invitedUserEmail || '').toLowerCase() === emailLower) || (inv.invitedUserEmailLower === emailLower);
        if (!isForMe) {
          window.Snackbar?.({ message: 'Este convite não é para você', type: 'error' });
          return;
        }

        if (isInvitationClosed(inv.status)) {
          window.Snackbar?.({ message: 'Este convite já foi finalizado', type: 'info' });
          return;
        }

        await updateDoc(invitationRef, { status: 'declined', declinedAt: serverTimestamp(), updatedAt: serverTimestamp() });
        window.Snackbar?.({ message: 'Convite recusado', type: 'info' });
        if (typeof window.renderSettings === 'function') await window.renderSettings();
      } catch (e) {
        console.error('Erro ao recusar convite (shim):', e);
        window.Snackbar?.({ message: 'Erro ao recusar convite: ' + e.message, type: 'error' });
      }
    };
  }

  // Shim: aceitar e entrar no orçamento
  if (typeof window.acceptAndEnterInvitation !== 'function') {
    window.acceptAndEnterInvitation = async function (invitationId, budgetId, budgetName) {
      try {
        await window.acceptBudgetInvitation(invitationId);

        const user = window.appState?.currentUser;
        if (!user) return;

        // Tentar ativar o orçamento imediatamente
        const tryEnter = async () => {
          const list = window.appState?.budgets || [];
          const target = list.find(b => b.id === budgetId);
          if (target && typeof window.setCurrentBudget === 'function') {
            await window.setCurrentBudget(target);
            window.Snackbar?.({ message: `Entrou em "${budgetName || target.nome || 'Orçamento'}"`, type: 'success' });
            if (typeof window.renderSettings === 'function') await window.renderSettings();
            return true;
          }
          return false;
        };

        if (!(await tryEnter())) {
          try {
            const { loadUserBudgets } = await import('@features/budgets/service.js');
            await loadUserBudgets(user.uid);
          } catch {}
          await tryEnter();
        }
      } catch (e) {
        console.error('Erro ao aceitar e entrar (shim):', e);
        window.Snackbar?.({ message: 'Erro ao aceitar e entrar no orçamento', type: 'error' });
      }
    };
  }
}

// Handlers globais: atualização PWA, limpeza de cache e testes de notificação
try {
  if (typeof window !== 'undefined') {
    if (typeof window.checkForUpdates !== 'function') {
      window.checkForUpdates = async function () {
        try {
          const notify = (msg, type = 'info') => { try { window.Snackbar?.({ message: msg, type }); } catch {} };
          notify('Procurando atualizações…', 'info');
          if (!('serviceWorker' in navigator)) { notify('Service Worker indisponível', 'warning'); return; }
          const reg = await navigator.serviceWorker.getRegistration();
          if (!reg) { notify('Registro do Service Worker não encontrado', 'warning'); return; }

          // Sempre ouvir uma eventual troca de controlador para recarregar com segurança
          let reloaded = false;
          const safeReload = () => { if (!reloaded) { reloaded = true; try { window.location.reload(); } catch {} } };
          navigator.serviceWorker.addEventListener('controllerchange', safeReload, { once: true });

          // Tentar forçar busca do SW mais recente
          try { await reg.update(); } catch {}

          // Helper: aguarda installing -> installed e aplica
          const tryApplyInstalling = (inst) => new Promise(resolve => {
            if (!inst) return resolve(false);
            const onState = () => {
              if (inst.state === 'installed') {
                try { reg.waiting?.postMessage({ type: 'SKIP_WAITING' }); } catch {}
                notify('Atualização encontrada. Aplicando…', 'info');
                // safety fallback
                setTimeout(safeReload, 4000);
                resolve(true);
              }
            };
            inst.addEventListener('statechange', onState);
            // Caso já esteja instalado
            if (inst.state === 'installed') { onState(); }
            // Timeout: não ficou waiting — seguir adiante
            setTimeout(() => resolve(false), 5000);
          });

          // 1) Se já há waiting, aplicar imediatamente
          if (reg.waiting) {
            try { reg.waiting.postMessage({ type: 'SKIP_WAITING' }); } catch {}
            notify('Atualização encontrada. Aplicando…', 'info');
            setTimeout(safeReload, 4000);
          } else {
            // 2) Se há installing, aguardar
            const installedApplied = await tryApplyInstalling(reg.installing);
            if (!installedApplied) {
              // 3) Aguardar novo updatefound por curto período
              const waitUpdate = new Promise(resolve => {
                let called = false;
                const onUpdateFound = async () => {
                  if (called) return; called = true;
                  reg.removeEventListener('updatefound', onUpdateFound);
                  await tryApplyInstalling(reg.installing);
                  resolve(true);
                };
                reg.addEventListener('updatefound', onUpdateFound);
                setTimeout(() => { if (!called) { reg.removeEventListener('updatefound', onUpdateFound); resolve(false); } }, 3000);
              });
              const gotUpdate = await waitUpdate;
              if (!gotUpdate) {
                // 4) Sem novo SW — realizar um reload suave para pegar HTML/assets atualizados
                try { reg.active?.postMessage?.({ type: 'UPDATE_CONTENT' }); } catch {}
                notify('Atualizando conteúdo…', 'info');
                setTimeout(safeReload, 500);
              }
            }
          }

          // Registrar horário da última verificação e atualizar UI
          try {
            const ts = Date.now();
            localStorage?.setItem?.('sw_last_check', String(ts));
            const el = document.getElementById('sw-last-check');
            if (el) el.textContent = new Date(ts).toLocaleString();
            setTimeout(() => { window.updateSwStatus && window.updateSwStatus(); }, 10);
          } catch {}
        } catch (e) {
          console.warn('checkForUpdates error:', e);
          try { window.Snackbar?.({ message: 'Falha ao verificar atualizações', type: 'error' }); } catch {}
        }
      };
    }

    if (typeof window.clearAppCaches !== 'function') {
      window.clearAppCaches = async function () {
        try {
          // Limpa todos os caches visíveis à página
          if (typeof caches !== 'undefined' && caches.keys) {
            const keys = await caches.keys();
            await Promise.all(keys.map(k => caches.delete(k)));
          }
          // Solicita ao SW para limpar cache dinâmico
          try { navigator.serviceWorker?.controller?.postMessage?.({ action: 'clearCache' }); } catch {}
          window.Snackbar?.({ message: 'Cache offline limpo. Recarregue se necessário.', type: 'success' });
        } catch (e) {
          console.warn('clearAppCaches error:', e);
          window.Snackbar?.({ message: 'Falha ao limpar cache', type: 'error' });
        }
      };
    }

    if (typeof window.sendTestNotificationOwner !== 'function') {
      window.sendTestNotificationOwner = async function () {
        try {
          const budgetId = window.appState?.currentBudget?.id;
          const senderUid = window.appState?.currentUser?.uid;
          if (!budgetId || !senderUid) {
            window.Snackbar?.({ message: 'Selecione um orçamento e faça login', type: 'warning' });
            return;
          }
          const mod = await import('@features/notifications/NotificationService.js');
          await (mod.sendTestNotificationToOwner || mod.default?.sendTestNotificationToOwner)?.(budgetId, senderUid);
        } catch (e) {
          console.warn('sendTestNotificationOwner error:', e);
          window.Snackbar?.({ message: 'Falha ao enviar teste (dono)', type: 'error' });
        }
      };
    }

    if (typeof window.sendTestNotificationShared !== 'function') {
      window.sendTestNotificationShared = async function () {
        try {
          const budgetId = window.appState?.currentBudget?.id;
          const senderUid = window.appState?.currentUser?.uid;
          if (!budgetId || !senderUid) {
            window.Snackbar?.({ message: 'Selecione um orçamento e faça login', type: 'warning' });
            return;
          }
          const mod = await import('@features/notifications/NotificationService.js');
          await (mod.sendTestNotificationToShared || mod.default?.sendTestNotificationToShared)?.(budgetId, senderUid);
        } catch (e) {
          console.warn('sendTestNotificationShared error:', e);
          window.Snackbar?.({ message: 'Falha ao enviar teste (compartilhados)', type: 'error' });
        }
      };
    }

    if (typeof window.openHelp !== 'function') {
      window.openHelp = function () {
        const html = `
          <div class="text-sm space-y-3">
            <p>Precisa de ajuda? Aqui estão alguns atalhos úteis:</p>
            <ul class="list-disc pl-5 space-y-1">
              <li>Sincronize período via hash: <code>#/dashboard?ym=2025-08</code></li>
              <li>Abra as Notificações: <code>#/notifications</code></li>
              <li>Vá direto para Config > Notificações: <code>#/settings?section=notifications</code></li>
            </ul>
            <p>Se o app parecer desatualizado, use “Verificar Atualizações” ou “Limpar Cache Offline”.</p>
          </div>`;
        if (window.showModal) {
          window.showModal(html, { title: 'Ajuda e Suporte' });
        } else if (window.eventBus) {
          window.eventBus.emit('modal:show', { content: html, title: 'Ajuda e Suporte' });
        } else {
          alert('Ajuda e Suporte:\n- #/dashboard?ym=2025-08\n- #/notifications\n- #/settings?section=notifications');
        }
      };
    }

    if (typeof window.rateApp !== 'function') {
      window.rateApp = function () {
        const html = `
          <div class="text-sm">
            <p class="mb-3">Como está sua experiência com o app?</p>
            <div class="flex gap-2 mb-4" id="rating-stars">
              ${[1,2,3,4,5].map(n => `<button data-rate="${n}" class="px-2 py-1 rounded bg-gray-100 dark:bg-gray-800 hover:bg-gray-200">${'★'.repeat(n)}</button>`).join('')}
            </div>
            <button id="submit-rating" class="px-3 py-2 rounded bg-blue-600 text-white">Enviar avaliação</button>
          </div>`;
        const wire = () => {
          const holder = document.getElementById('rating-stars');
          let value = 5;
          holder?.querySelectorAll('button[data-rate]')?.forEach(btn => {
            btn.addEventListener('click', () => { value = parseInt(btn.dataset.rate || '5', 10); });
          });
          document.getElementById('submit-rating')?.addEventListener('click', () => {
            window.Snackbar?.({ message: `Obrigado pela avaliação de ${value}★`, type: 'success' });
            if (window.closeModal) window.closeModal();
          });
        };
        if (window.showModal) {
          window.showModal(html, { title: 'Avaliar App', onShow: wire });
          setTimeout(wire, 0);
        } else if (window.eventBus) {
          window.eventBus.emit('modal:show', { content: html, title: 'Avaliar App' });
          setTimeout(wire, 0);
        } else {
          alert('Obrigado por usar o app!');
        }
      };
    }

    if (typeof window.updateSwStatus !== 'function') {
      window.updateSwStatus = async function () {
        try {
          if (!navigator.serviceWorker?.controller) return;
          const channel = new MessageChannel();
          const wait = new Promise((resolve) => {
            channel.port1.onmessage = (ev) => resolve(ev.data);
          });
          navigator.serviceWorker.controller.postMessage({ action: 'getCacheStatus' }, [channel.port2]);
          const data = await wait;
          if (data) {
            const v = document.getElementById('sw-version-dyn');
            const cs = document.getElementById('sw-cache-static');
            const cd = document.getElementById('sw-cache-dynamic');
            if (v) v.textContent = String(data.version || '—');
            if (cs) cs.textContent = String(data.static || '—');
            if (cd) cd.textContent = String(data.dynamic || '—');
          }
        } catch {}
      };
    }

    // Listener único de mensagens do SW para UPDATE_AVAILABLE
    if (!window.__swMsgBound) {
      window.__swMsgBound = true;
      try {
        navigator.serviceWorker?.addEventListener?.('message', (e) => {
          const t = e?.data?.type;
          if (t === 'UPDATE_AVAILABLE') {
            // Mostrar Snackbar com ação de recarregar
            try {
              if (window.Snackbar) {
                window.Snackbar({
                  message: 'Nova versão disponível. Atualizar agora?',
                  type: 'info',
                  actionText: 'Atualizar',
                  onAction: () => { try { window.checkForUpdates && window.checkForUpdates(); } catch {} },
                });
              }
            } catch {}
          }
        });
      } catch {}
    }

    // Indicador de conectividade
    if (typeof window.updateNetworkStatus !== 'function') {
      window.updateNetworkStatus = function () {
        try {
          const el = document.getElementById('net-status');
          if (!el) return;
          const online = navigator.onLine;
          el.textContent = online ? 'Online' : 'Offline';
          el.style.color = online ? 'var(--green, #16a34a)' : 'var(--red, #dc2626)';
        } catch {}
      };
      try {
        window.addEventListener('online', () => window.updateNetworkStatus());
        window.addEventListener('offline', () => window.updateNetworkStatus());
      } catch {}
    }
  }
} catch {}

export async function renderSettings() {
  const content = document.getElementById('app-content');
  // Throttle chamadas muito próximas no tempo para evitar renders duplicados em sequência
  try {
    const now = Date.now();
    if (typeof window !== 'undefined') {
      if (window.__lastSettingsRender && (now - window.__lastSettingsRender) < 500) {
        console.log('⏱️ renderSettings: chamada muito próxima, pulando...');
        return;
      }
      window.__lastSettingsRender = now;
    }
  } catch {}
  if (!content) {
    console.warn('⚠️ SettingsPage: elemento #app-content não encontrado');
    return;
  }

  // Garante delegação de eventos para botões "Entrar" mesmo após re-render
  try {
    if (typeof window !== 'undefined' && !window.__enterBudgetDelegated) {
      window.__enterBudgetDelegated = true;
      try { console.log('[Settings] Delegated handlers for .enter-budget-button bound'); } catch {}
      document.addEventListener('click', (ev) => {
        try {
          const target = ev.target;
          // Procura o botão ou um ancestral com a classe
          const btn = target && (target.closest ? target.closest('.enter-budget-button') : null);
          if (btn) {
            ev.preventDefault();
            const id = btn.getAttribute('data-budget-id') || btn.getAttribute('data-id');
            const name = btn.getAttribute('data-budget-name') || undefined;
            try { console.log('[Settings] Click .enter-budget-button', { id, name }); } catch {}
            if (id && typeof window.enterBudget === 'function') {
              window.enterBudget(id, name);
            }
            return;
          }

          // Clique no cartão inteiro (fallback): se tiver data-enter-id, e não for em botões secundários
          const card = target && (target.closest ? target.closest('.budget-item') : null);
          if (card && !card.classList.contains('active')) {
            const isSecondary = target.closest && target.closest('.copy-id-button, .delete-button, .leave-button, .current-budget-badge');
            if (!isSecondary) {
              const id = card.getAttribute('data-enter-id');
              const name = card.getAttribute('data-enter-name');
              if (id && typeof window.enterBudget === 'function') {
                ev.preventDefault();
                try { console.log('[Settings] Click card .budget-item -> enter', { id, name }); } catch {}
                window.enterBudget(id, name);
              }
            }
          }
        } catch {}
      }, true);

      // Acessibilidade: Enter/Espaço ativa o clique
      document.addEventListener('keydown', (ev) => {
        try {
          const target = ev.target;
          if (!target) return;
          const isBtn = target.classList && target.classList.contains('enter-budget-button');
          if (isBtn && (ev.key === 'Enter' || ev.key === ' ')) {
            ev.preventDefault();
            try { console.log('[Settings] Key activate .enter-budget-button'); } catch {}
            target.click();
          }
        } catch {}
      }, true);
    }
  } catch {}
  // Obter informações do orçamento atual
  const currentBudget = window.appState?.currentBudget;
  const currentUser = window.appState?.currentUser;
  const budgets = window.appState?.budgets || [];

  // Rótulo dinâmico para "Última Atualização" (mês e ano atuais em pt-BR)
  const __now = new Date();
  const __mesesPtBr = ['Janeiro','Fevereiro','Março','Abril','Maio','Junho','Julho','Agosto','Setembro','Outubro','Novembro','Dezembro'];
  const __lastUpdateLabel = `${__mesesPtBr[__now.getMonth()]} ${__now.getFullYear()}`;
  // Versão do app (manter em um único local nesta página)
  const __appVersion = '4.2.8';
  // Changelog: verificar se há novidades não lidas para esta versão
  const __hasNewChangelog = (() => {
    try {
      const seen = localStorage.getItem('lastSeenChangelogVersion');
      return seen !== __appVersion;
    } catch {}
    return true;
  })();

  // Leitura do override (se existir) para o tamanho do chunk de grupos de dia nas Transações
  const txChunkOverride = (() => {
    try {
      if (typeof localStorage !== 'undefined') {
        const v = localStorage.getItem('txChunkSize');
        const n = parseInt(v, 10);
        if (!Number.isNaN(n)) return n;
      }
    } catch {}
    return '';
  })();

  // Telemetria leve de performance — estado atual
  let perfEnabled = false;
  try {
    const mod = await import('@core/telemetry/perf.js');
    perfEnabled = mod.isEnabled();
    // preparar handlers globais se ainda não existirem
    if (typeof window !== 'undefined') {
      if (typeof window.togglePerfTelemetry !== 'function') {
        window.togglePerfTelemetry = () => {
          const chk = document.getElementById('perf-telemetry');
          if (!chk) return;
          mod.setEnabled(!!chk.checked);
          window.Snackbar?.({ message: chk.checked ? 'Telemetria ativada (local, sem envio)' : 'Telemetria desativada', type: 'info' });
        };
      }
      if (typeof window.showPerfLog !== 'function') {
        window.showPerfLog = () => {
          try {
            const log = mod.getLog();
            const html = `
              <div class="text-sm">
                <div class="mb-2 text-gray-600 dark:text-gray-300">Últimos ${Math.min(log.length, 50)} eventos</div>
                <pre class="max-h-[60vh] overflow-auto p-3 bg-gray-100 dark:bg-gray-800 rounded">${log.slice(0,50).map(e => JSON.stringify(e)).join('\n')}</pre>
                <div class="flex gap-2 mt-3">
                  <button class="u-btn u-btn--danger" onclick="(function(){import('@core/telemetry/perf.js').then(m=>{m.clear(); window.Snackbar?.({message:'Log limpo',type:'success'});});})()">Limpar</button>
                  <button class="u-btn u-btn--ghost" onclick="window.closeModal && window.closeModal()">Fechar</button>
                </div>
              </div>`;
            if (window.showModal) {
              window.showModal(html, { title: 'Telemetria de Performance (local)' });
            } else if (window.eventBus) {
              window.eventBus.emit('modal:show', { content: html, title: 'Telemetria de Performance (local)' });
            } else {
              alert('Eventos de performance:\n' + log.map(e => JSON.stringify(e)).join('\n'));
            }
          } catch (e) {
            console.warn('showPerfLog error:', e);
          }
        };
      }
    }
  } catch {}

  // Encontrar o orçamento atual na lista para obter informações completas
  const budgetInfo = budgets.find(b => b.id === currentBudget?.id);

  // Preparar informações dos usuários com acesso
  let usersWithAccess = [];
  // Fallback seguro para obter informações de usuário caso window.getUserInfo ainda não esteja definido
  async function safeGetUserInfo(idOrEmail) {
    try {
      // Se veio e-mail, tentar resolver para UID
      let uid = idOrEmail;
      if (uid && typeof uid === 'string' && uid.includes('@')) {
        try {
          const { buscarUidPorEmail } = await import('../../js/firestore.js');
          const resolved = await buscarUidPorEmail(uid);
          if (resolved) uid = resolved;
        } catch (e) {
          console.warn('safeGetUserInfo: falha ao resolver email para UID:', e?.message || e);
        }
      }

      if (typeof window !== 'undefined' && typeof window.getUserInfo === 'function') {
        return await window.getUserInfo(uid);
      }
      const mod = await import('@features/notifications/NotificationService.js');
      const fn = mod.getUserInfo || (mod.default && mod.default.getUserInfo);
      if (typeof fn === 'function') {
        // Cachear globalmente para próximas chamadas
        if (typeof window !== 'undefined') window.getUserInfo = fn;
        return await fn(uid);
      }
      throw new Error('getUserInfo não disponível');
    } catch (e) {
      console.warn('safeGetUserInfo: fallback acionado/erro:', e?.message || e);
      return { displayName: 'Usuário', email: 'email@desconhecido.com' };
    }
  }
  if (budgetInfo?.usuariosPermitidos && budgetInfo.usuariosPermitidos.length > 0) {
    // Buscar informações dos usuários compartilhados
    const allowed = Array.from(new Set((budgetInfo.usuariosPermitidos || []).filter(Boolean)));
    usersWithAccess = await Promise.all(
      allowed.map(async (uidOrEmail) => {
        try {
          const userInfo = await safeGetUserInfo(uidOrEmail);
          return {
            uid: userInfo.uid || uidOrEmail,
            email: userInfo.email || String(uidOrEmail),
            role: 'Usuário Compartilhado'
          };
        } catch (error) {
          console.error('Erro ao buscar informações do usuário:', uidOrEmail, error);
          return {
            uid: String(uidOrEmail),
            email: 'Usuário não encontrado',
            role: 'Usuário Compartilhado'
          };
        }
      })
    );
  }

  // Carregar convites pendentes
  let pendingInvitations = [];
  if (window.loadBudgetInvitations) {
    try {
      console.log('🔍 SettingsPage: Carregando convites pendentes...');
      pendingInvitations = await window.loadBudgetInvitations();
      console.log('📊 SettingsPage: Convites carregados:', pendingInvitations.length);
    } catch (error) {
      console.error('❌ SettingsPage: Erro ao carregar convites pendentes:', error);
    }
  } else {
    console.log('❌ SettingsPage: Função loadBudgetInvitations não encontrada');
  }

  // Resolver proprietário do orçamento (userId ou criadoPor)
  let ownerUid = budgetInfo?.userId || budgetInfo?.criadoPor || null;
  let ownerDisplay = 'Não disponível';
  try {
    if (ownerUid) {
      const info = await safeGetUserInfo(ownerUid);
      const isYou = currentUser && currentUser.uid && ownerUid === currentUser.uid;
      const label = info?.email || info?.displayName || String(ownerUid);
      ownerDisplay = isYou ? `Você (${label})` : label;
    }
  } catch {}
  // Carregar convites enviados por mim (ainda abertos)
  let sentInvitations = [];
  if (window.loadSentBudgetInvitations) {
    try {
      console.log('🔍 SettingsPage: Carregando convites enviados...');
      sentInvitations = await window.loadSentBudgetInvitations();
      console.log('📊 SettingsPage: Convites enviados carregados:', sentInvitations.length);
    } catch (error) {
      console.error('❌ SettingsPage: Erro ao carregar convites enviados:', error);
    }
  }

  // Inicializar ícone do tema após renderização
  setTimeout(() => {
    if (window.initializeThemeIcon) {
      window.initializeThemeIcon();
    }
    if (window.initializeColorTheme) {
      window.initializeColorTheme();
    }
    if (window.initializeCompactMode) {
      window.initializeCompactMode();
    }

    // Adicionar listener de resize para auto-compacto
    if (window.handleResize) {
      try {
        if (!window.__settingsResizeBound) {
          window.addEventListener('resize', window.handleResize);
          window.__settingsResizeBound = true;
        }
        // Executar uma vez para verificar tamanho atual
        window.handleResize();
      } catch (e) {
        console.warn('⚠️ SettingsPage: erro ao vincular handleResize:', e);
      }
    }
  }, 100);

  content.innerHTML = `
    <div class="tab-container">
      <div class="tab-header">
  <h2 class="tab-title-highlight">⚙️ Configurações</h2>
  <div id="settings-period-indicator"></div>
      </div>
      <div class="tab-content">
        <div class="settings-container">
<<<<<<< HEAD
          <style>
            /* Final guardrail: normalize all text to base size inside settings (titles excluded) */
            .settings-container { font-size: var(--font-size-base); font-family: var(--font-family); }
            .settings-container p,
            .settings-container li,
            .settings-container span,
            .settings-container label,
            .settings-container small,
            .settings-container input,
            .settings-container select,
            .settings-container textarea,
            .settings-container button,
            .settings-container .text-xs,
            .settings-container .text-sm,
            .settings-container .text-base { font-size: var(--font-size-base) !important; }
            .settings-container .section-title,
            .settings-container h3 { font-size: var(--font-size-lg) !important; }
          </style>
          <div class="content-spacing">

          <!-- ========== CONTA: SAIR DA CONTA (LOGOUT) ========== -->
          ${currentUser ? `
          <div class="mb-6">
            <h2 class="section-title red-border">🔐 Conta</h2>
            <div class="bg-white dark:bg-gray-900 rounded-2xl border border-gray-200 dark:border-gray-700 p-4 flex items-center justify-between">
              <div class="min-w-0 mr-4">
                <div class="text-sm text-gray-600 dark:text-gray-400">Conectado como</div>
                <div class="font-medium text-gray-900 dark:text-gray-100 truncate" title="${(currentUser.email || currentUser.displayName || 'Usuário').replace(/"/g, '&quot;')}">
                  ${currentUser.email || currentUser.displayName || 'Usuário'}
                </div>
              </div>
              <button id="btn-logout" class="u-btn u-btn--danger">
                Sair da conta
              </button>
=======
          <div class="content-spacing">

          ${pendingInvitations && pendingInvitations.length > 0 ? `
          <!-- Resumo rápido de Convites Recebidos -->
          <div class="mb-6">
            <div class="flex items-center justify-between mb-2">
              <h2 class="section-title purple-border">📬 Convites Recebidos <span class="ml-2 inline-flex items-center justify-center text-xs font-semibold bg-purple-100 text-purple-700 rounded-full px-2 py-0.5">${pendingInvitations.length}</span></h2>
            </div>
            <div class="bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-700 p-3">
              ${pendingInvitations.slice(0,3).map(invite => `
                <div class="flex items-center justify-between p-3 rounded-lg ${invite._rowAlt?'bg-gray-50 dark:bg-gray-800':''}">
                  <div class="min-w-0">
                    <div class="font-medium text-gray-900 dark:text-gray-100 truncate">${invite.budgetName || 'Orçamento'}</div>
                    <div class="text-xs text-gray-500 dark:text-gray-400 truncate">Convidado por ${invite.invitedByUserEmail || invite.invitedByUserId || 'usuário'}</div>
                  </div>
                  <div class="flex items-center gap-2 flex-shrink-0">
                    <button onclick="acceptBudgetInvitation('${invite.id}')" class="px-2 py-1 text-xs rounded bg-green-500 hover:bg-green-600 text-white">Aceitar</button>
                    <button onclick="acceptAndEnterInvitation('${invite.id}','${invite.budgetId}','${(invite.budgetName || 'Orçamento').replace(/'/g, "\\'")}')" class="px-2 py-1 text-xs rounded bg-blue-500 hover:bg-blue-600 text-white">Aceitar e entrar</button>
                  </div>
                </div>
              `).join('')}
              ${pendingInvitations.length > 3 ? `<div class="text-xs text-gray-500 mt-2">+${pendingInvitations.length - 3} convid${pendingInvitations.length - 3 === 1 ? 'o' : 'os'} adicionais</div>` : ''}
            </div>
          </div>
          ` : ''}
          
          
          <!-- ========== SEÇÃO 1: RESUMO DO ORÇAMENTO ========== -->
          ${currentBudget ? `
          <div class="mb-8">
            <h2 class="section-title green-border">📋 Orçamento Atual</h2>
            
            <div class="bg-gradient-to-br from-green-500 via-emerald-500 to-teal-600 rounded-2xl shadow-xl p-6 md:p-8 text-white">
              <!-- Header do Card -->
              <div class="flex items-center justify-between mb-6">
                <div class="flex items-center gap-4">
                  <div class="w-16 h-16 rounded-full bg-white bg-opacity-20 flex items-center justify-center text-3xl">
                    📋
                  </div>
                  <div>
                    <h3 class="text-xl md:text-2xl font-bold">${currentBudget.nome || 'Orçamento sem nome'}</h3>
                    <p class="text-sm opacity-90">Orçamento Ativo</p>
                  </div>
                </div>
                <button onclick="editBudgetName()" class="bg-white bg-opacity-20 hover:bg-opacity-30 text-white p-3 rounded-xl transition-all duration-200">
                  ✏️
                </button>
              </div>
              
              <!-- Grid de Métricas -->
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div class="bg-white bg-opacity-15 backdrop-blur-sm rounded-xl p-4">
                  <div class="text-2xl mb-2">📅</div>
                  <div class="text-lg font-bold">${currentBudget.createdAt ? new Date(currentBudget.createdAt.seconds * 1000).toLocaleDateString('pt-BR') : 'Data não disponível'}</div>
                  <div class="text-sm opacity-90">Data de Criação</div>
                </div>
                
                <div class="bg-white bg-opacity-15 backdrop-blur-sm rounded-xl p-4">
                  <div class="text-2xl mb-2">👥</div>
                  <div class="text-lg font-bold">${usersWithAccess.length + 1}</div>
                  <div class="text-sm opacity-90">Usuários com Acesso</div>
                </div>
              </div>
>>>>>>> origin/master
            </div>
          </div>
          ` : ''}

<<<<<<< HEAD
          ${pendingInvitations && pendingInvitations.length > 0 ? `
          <!-- Resumo rápido de Convites Recebidos -->
          <div class="mb-6">
            <div class="flex items-center justify-between mb-2">
              <h2 class="section-title purple-border">📬 Convites Recebidos <span class="ml-2 inline-flex items-center justify-center text-xs font-semibold bg-purple-100 text-purple-700 rounded-full px-2 py-0.5">${pendingInvitations.length}</span></h2>
            </div>
            <div class="bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-700 p-3">
              ${pendingInvitations.slice(0,3).map(invite => `
                <div class="flex items-center justify-between p-3 rounded-lg ${invite._rowAlt?'bg-gray-50 dark:bg-gray-800':''}">
                  <div class="min-w-0">
                    <div class="font-medium text-gray-900 dark:text-gray-100 truncate">${invite.budgetName || 'Orçamento'}</div>
                    <div class="text-xs text-gray-500 dark:text-gray-400 truncate">Convidado por ${invite.invitedByUserEmail || invite.invitedByUserId || 'usuário'}</div>
                  </div>
                  <div class="flex items-center gap-2 flex-shrink-0">
                    <button onclick="acceptBudgetInvitation('${invite.id}')" class="u-btn u-btn--primary text-xs">Aceitar</button>
                    <button onclick="(function(id,bid,name){acceptAndEnterInvitation(id,bid,decodeURIComponent(name));})('${invite.id}','${invite.budgetId}','${encodeURIComponent(invite.budgetName || 'Orçamento')}')" class="u-btn u-btn--primary text-xs">Aceitar e entrar</button>
                  </div>
                </div>
              `).join('')}
              ${pendingInvitations.length > 3 ? `<div class="text-xs text-gray-500 mt-2">+${pendingInvitations.length - 3} convid${pendingInvitations.length - 3 === 1 ? 'o' : 'os'} adicionais</div>` : ''}
            </div>
          </div>
          ` : ''}
          
          
          <!-- ========== SEÇÃO 1: RESUMO DO ORÇAMENTO ========== -->
          ${currentBudget ? `
          <div class="mb-8">
            <h2 class="section-title green-border">📋 Orçamento Atual</h2>
            
            <div class="bg-gradient-to-br from-green-500 via-emerald-500 to-teal-600 rounded-2xl shadow-xl p-6 md:p-8 text-white">
              <!-- Header do Card -->
              <div class="flex items-center justify-between mb-6">
                <div class="flex items-center gap-4">
                  <div class="w-16 h-16 rounded-full bg-white bg-opacity-20 flex items-center justify-center text-3xl">
                    📋
                  </div>
                  <div>
                    <h3 class="text-xl md:text-2xl font-bold">${currentBudget.nome || 'Orçamento sem nome'}</h3>
                    <p class="text-sm opacity-90">Orçamento Ativo</p>
                  </div>
                </div>
                <button onclick="editBudgetName()" class="bg-white bg-opacity-20 hover:bg-opacity-30 text-white p-3 rounded-xl transition-all duration-200">
                  ✏️
                </button>
              </div>
              
              <!-- Grid de Métricas -->
              <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div class="bg-white bg-opacity-15 backdrop-blur-sm rounded-xl p-4">
                  <div class="text-2xl mb-2">📅</div>
                  <div class="text-lg font-bold">${currentBudget.createdAt ? new Date(currentBudget.createdAt.seconds * 1000).toLocaleDateString('pt-BR') : 'Data não disponível'}</div>
                  <div class="text-sm opacity-90">Data de Criação</div>
                </div>
                
                <div class="bg-white bg-opacity-15 backdrop-blur-sm rounded-xl p-4">
                  <div class="text-2xl mb-2">👥</div>
                  <div class="text-lg font-bold">${usersWithAccess.length + 1}</div>
                  <div class="text-sm opacity-90">Usuários com Acesso</div>
                </div>

                <div class="bg-white bg-opacity-15 backdrop-blur-sm rounded-xl p-4">
                  <div class="text-2xl mb-2">👑</div>
                  <div class="text-lg font-bold truncate" title="${ownerDisplay}">${ownerDisplay}</div>
                  <div class="text-sm opacity-90">Proprietário</div>
                </div>
              </div>
            </div>
          </div>
          ` : ''}

          <!-- ========== SEÇÃO 2: USUÁRIOS E COMPARTILHAMENTO ========== -->
          <div class="mb-8">
            <h2 class="section-title blue-border">👥 Usuários & Compartilhamento</h2>
            
            <div class="bg-white dark:bg-gray-900 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden">
              <!-- Header -->
              <div class="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-gray-800 dark:to-gray-800 p-4 border-b border-gray-200 dark:border-gray-700">
                <div class="flex flex-wrap justify-between items-center gap-2">
                  <h3 class="text-lg font-bold text-gray-900 dark:text-gray-100">Gerenciar Acesso</h3>
                  <button onclick="document.getElementById('share-email')?.focus()" class="u-btn u-btn--primary">
                    📤 Compartilhar
                  </button>
                </div>
              </div>
              
              <!-- Conteúdo -->
              <div class="p-4">
                ${ownerUid ? `
                  <div class="mb-4">
                    <div class="flex items-center justify-between p-4 bg-blue-50 dark:bg-blue-900 dark:bg-opacity-20 border border-blue-200 dark:border-blue-800 rounded-xl">
                      <div class="font-medium text-gray-900 dark:text-gray-100 truncate" title="${ownerDisplay}">${ownerDisplay}</div>
                      <div class="text-sm text-blue-700 dark:text-blue-300 font-semibold">Proprietário</div>
                    </div>
                  </div>
                ` : ''}

                ${usersWithAccess.length > 0 ? `
                  <div class="space-y-3">
                    ${usersWithAccess.map(user => `
                      <div class="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-xl hover:bg-gray-100 dark:hover:bg-gray-700 transition-all duration-200">
                        <div class="flex items-center gap-3">
                          <div class="w-12 h-12 rounded-full bg-blue-100 dark:bg-blue-900 flex items-center justify-center text-xl">
                            👤
                          </div>
                          <div>
                            <div class="font-medium text-gray-900 dark:text-gray-100">${user.email}</div>
                            <div class="text-sm text-gray-500 dark:text-gray-400">${user.role} • Adicionado em ${new Date().toLocaleDateString('pt-BR')}</div>
                          </div>
                        </div>
                        <button onclick="removeUserFromBudget('${user.uid}', '${user.email}')" class="u-btn u-btn--danger">
                          🚫 Remover
                        </button>
                      </div>
                    `).join('')}
                  </div>
                ` : `
                  <div class="text-center py-8">
                    <div class="text-4xl mb-4">👥</div>
                    <div class="text-lg font-semibold text-gray-800 dark:text-white mb-2">Nenhum usuário compartilhado</div>
                    <div class="text-gray-600 dark:text-gray-400 mb-4">Compartilhe seu orçamento para ver usuários aqui</div>
                    <button onclick="document.getElementById('share-email')?.focus()" class="u-btn u-btn--primary">
                      📤 Compartilhar Orçamento
                    </button>
                  </div>
                `}
              </div>
            </div>
          </div>
=======
          <!-- ========== SEÇÃO 2: USUÁRIOS E COMPARTILHAMENTO ========== -->
          <div class="mb-8">
            <h2 class="section-title blue-border">👥 Usuários & Compartilhamento</h2>
            
            <div class="bg-white dark:bg-gray-900 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden">
              <!-- Header -->
              <div class="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-gray-800 dark:to-gray-800 p-4 border-b border-gray-200 dark:border-gray-700">
                <div class="flex flex-wrap justify-between items-center gap-2">
                  <h3 class="text-lg font-bold text-gray-900 dark:text-gray-100">Gerenciar Acesso</h3>
                  <button onclick="document.getElementById('share-email')?.focus()" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-xl text-sm font-medium transition-all duration-200 shadow-md hover:shadow-lg">
                    📤 Compartilhar
                  </button>
                </div>
              </div>
              
              <!-- Conteúdo -->
              <div class="p-4">
                ${usersWithAccess.length > 0 ? `
                  <div class="space-y-3">
                    ${usersWithAccess.map(user => `
                      <div class="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-xl hover:bg-gray-100 dark:hover:bg-gray-700 transition-all duration-200">
                        <div class="flex items-center gap-3">
                          <div class="w-12 h-12 rounded-full bg-blue-100 dark:bg-blue-900 flex items-center justify-center text-xl">
                            👤
                          </div>
                          <div>
                            <div class="font-medium text-gray-900 dark:text-gray-100">${user.email}</div>
                            <div class="text-sm text-gray-500 dark:text-gray-400">${user.role} • Adicionado em ${new Date().toLocaleDateString('pt-BR')}</div>
                          </div>
                        </div>
                        <button onclick="removeUserFromBudget('${user.uid}', '${user.email}')" class="bg-red-500 hover:bg-red-600 text-white px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200">
                          🚫 Remover
                        </button>
                      </div>
                    `).join('')}
                  </div>
                ` : `
                  <div class="text-center py-8">
                    <div class="text-4xl mb-4">👥</div>
                    <div class="text-lg font-semibold text-gray-800 dark:text-white mb-2">Nenhum usuário compartilhado</div>
                    <div class="text-gray-600 dark:text-gray-400 mb-4">Compartilhe seu orçamento para ver usuários aqui</div>
                    <button onclick="document.getElementById('share-email')?.focus()" class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-xl font-medium transition-all duration-200 shadow-lg">
                      📤 Compartilhar Orçamento
                    </button>
                  </div>
                `}
              </div>
            </div>
          </div>
>>>>>>> origin/master

          <!-- ========== SEÇÃO 3: CONVITES PENDENTES (ENVIADOS POR MIM) ========== -->
          ${sentInvitations.length > 0 ? `
          <div class="mb-8">
            <h2 class="section-title orange-border">📤 Convites Pendentes</h2>
            
            <div class="bg-white dark:bg-gray-900 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden">
              <!-- Header -->
              <div class="bg-gradient-to-r from-orange-50 to-yellow-50 dark:from-gray-800 dark:to-gray-800 p-4 border-b border-gray-200 dark:border-gray-700">
                <h3 class="text-lg font-bold text-gray-900 dark:text-gray-100">Convites Aguardando Resposta</h3>
              </div>
              
              <!-- Lista de Convites -->
              <div class="p-4">
                <div class="space-y-3">
                  ${sentInvitations.map(invite => {
                    const email = invite.invitedUserEmail || invite.email || invite.invitedUserId || 'Destinatário';
                    const created = invite.createdAt ? (invite.createdAt.toDate ? invite.createdAt.toDate() : (invite.createdAt.seconds ? new Date(invite.createdAt.seconds * 1000) : new Date(invite.createdAt))) : null;
                    const createdStr = created ? created.toLocaleDateString('pt-BR') : 'Data não disponível';
                    return `
                    <div class="flex items-center justify-between p-4 bg-orange-50 dark:bg-orange-900 dark:bg-opacity-20 border border-orange-200 dark:border-orange-800 rounded-xl">
                      <div class="flex items-center gap-3">
                        <div class="w-12 h-12 rounded-full bg-orange-100 dark:bg-orange-900 flex items-center justify-center text-xl">
                          📤
                        </div>
                        <div>
                          <div class="font-medium text-gray-900 dark:text-gray-100">${email}</div>
                          <div class="text-sm text-gray-500 dark:text-gray-400">
                            Enviado em ${createdStr} • Aguardando resposta
                          </div>
                        </div>
                      </div>
                          <div class="flex gap-2">
                            <button onclick="resendInvitation('${invite.id}', '${email}')" class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200">
                              📤 Reenviar
                            </button>
                            <button onclick="cancelInvitation('${invite.id}', '${email}')" class="bg-red-500 hover:bg-red-600 text-white px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200">
                              ❌ Cancelar
                            </button>
                          </div>
                        </div>
                  `}).join('')}
                </div>
              </div>
            </div>
          </div>
          ` : ''}

      <!-- Seção: Convites Recebidos -->
      <section class="content-section">
        <h2 class="section-title purple-border">Convites Recebidos</h2>
        <p class="section-description">Convites de outros usuários para acessar orçamentos compartilhados com você</p>

        ${pendingInvitations && pendingInvitations.length > 0 ? `
          <div class="invitations-list space-y-3">
            ${pendingInvitations.map(invite => `
              <div class="invitation-item flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700">
                <div>
                  <div class="invitation-email font-medium text-gray-900 dark:text-gray-100">
                    📋 ${invite.budgetName || 'Orçamento'}
                  </div>
                  <div class="invitation-date text-sm text-gray-500 dark:text-gray-400">
                    Convidado por ${invite.invitedByUserEmail || invite.invitedByUserId || 'usuário'} • ${invite.createdAt ? (invite.createdAt.toDate ? invite.createdAt.toDate() : new Date(invite.createdAt.seconds * 1000)).toLocaleDateString('pt-BR') : 'data desconhecida'}
                  </div>
                </div>
                <div class="flex items-center gap-2">
<<<<<<< HEAD
                  <button onclick="acceptBudgetInvitation('${invite.id}')" class="u-btn u-btn-primary bg-green-500 hover:bg-green-600 text-white px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200">✅ Aceitar</button>
                  <button onclick="declineBudgetInvitation('${invite.id}')" class="u-btn u-btn-danger bg-gray-500 hover:bg-gray-600 text-white px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200">❌ Recusar</button>
                  <button onclick="(function(id,bid,name){acceptAndEnterInvitation(id,bid,decodeURIComponent(name));})('${invite.id}','${invite.budgetId}','${encodeURIComponent(invite.budgetName || 'Orçamento')}')" class="u-btn u-btn-primary bg-blue-500 hover:bg-blue-600 text-white px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200">🚪 Aceitar e entrar</button>
=======
                  <button onclick="acceptBudgetInvitation('${invite.id}')" class="bg-green-500 hover:bg-green-600 text-white px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200">✅ Aceitar</button>
                  <button onclick="declineBudgetInvitation('${invite.id}')" class="bg-gray-500 hover:bg-gray-600 text-white px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200">❌ Recusar</button>
                  <button onclick="acceptAndEnterInvitation('${invite.id}','${invite.budgetId}','${(invite.budgetName || 'Orçamento').replace(/'/g, "\'")}')" class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200">🚪 Aceitar e entrar</button>
>>>>>>> origin/master
                </div>
              </div>
            `).join('')}
          </div>
        ` : `
          <div class="empty-state">
            <div class="empty-icon">📬</div>
            <div class="empty-text">Nenhum convite recebido</div>
            <div class="empty-description">Você não tem convites pendentes de outros usuários</div>
          </div>
        `}
      </section>

      <!-- Seção: Orçamentos Compartilhados com Você -->
      <section class="content-section">
        <h2 class="section-title blue-border">Orçamentos Compartilhados com Você</h2>
        <p class="section-description">Orçamentos onde você tem acesso, mas não é o proprietário</p>

        ${(() => {
<<<<<<< HEAD
    const me = currentUser?.uid;
    const shared = (budgets || []).filter(b => b && (b.isOwner === false || (me && b.userId && b.userId !== me)));
    if (!shared || shared.length === 0) {
      return `
=======
          const me = currentUser?.uid;
          const shared = (budgets || []).filter(b => b && (b.isOwner === false || (me && b.userId && b.userId !== me)));
          if (!shared || shared.length === 0) {
            return `
>>>>>>> origin/master
              <div class="empty-state">
                <div class="empty-icon">🤝</div>
                <div class="empty-text">Nenhum orçamento compartilhado</div>
                <div class="empty-description">Convites aceitos aparecerão aqui para você entrar</div>
              </div>
            `;
<<<<<<< HEAD
    }
    return `
            <div class="budgets-list">
              ${shared.map(budget => `
                <div class="budget-item ${budget.id === currentBudget?.id ? 'active' : ''}" ${budget.id !== currentBudget?.id ? `data-enter-id="${budget.id}" data-enter-name="${(budget.nome || 'Orçamento').replace(/\"/g, '&quot;')}" role="button" tabindex="0"` : ''}>
=======
          }
          return `
            <div class="budgets-list">
              ${shared.map(budget => `
                <div class="budget-item ${budget.id === currentBudget?.id ? 'active' : ''}">
>>>>>>> origin/master
                  <div class="budget-item-info">
                    <div class="budget-item-name">${budget.nome || 'Orçamento'}</div>
                    <div class="budget-item-date">ID: ${budget.id}</div>
                    <div class="budget-item-status">Compartilhado</div>
                  </div>
                  <div class="budget-item-actions">
<<<<<<< HEAD
                    <div class="actions-row primary">
                      ${budget.id !== currentBudget?.id ? `
                        <button type="button" class="enter-budget-button u-btn u-btn--primary" tabindex="0" onclick="enterBudget('${budget.id}')" data-budget-id="${budget.id}" data-budget-name="${(budget.nome || 'Orçamento').replace(/\"/g, '&quot;')}" title="Entrar neste orçamento">
                          <span class="enter-icon">🚪</span>
                          <span class="enter-text">Entrar</span>
                        </button>
                      ` : `
                        <div class="current-budget-badge">
                          <span class="current-icon">✅</span>
                          <span class="current-text">Ativo</span>
                        </div>
                      `}
                    </div>
                    <div class="actions-row secondary">
                      <button class="copy-id-button u-btn u-btn--ghost" onclick="copyBudgetId('${budget.id}', this)" title="Copiar ID do orçamento">Copiar ID</button>
                      <button class="leave-button u-btn u-btn--danger" onclick="leaveBudgetWithConfirmation && leaveBudgetWithConfirmation('${budget.id}', '${(budget.nome || 'Orçamento').replace(/'/g, '\'')}')" title="Sair deste orçamento">
                        <span class="leave-icon">🚪</span>
                        <span class="leave-text">Sair</span>
                      </button>
                    </div>
=======
                    ${budget.id !== currentBudget?.id ? `
                      <button class="enter-budget-button" onclick="enterBudget('${budget.id}', '${(budget.nome || 'Orçamento').replace(/'/g, "\'")}')" title="Entrar neste orçamento">
                        <span class="enter-icon">🚪</span>
                        <span class="enter-text">Entrar</span>
                      </button>
                    ` : `
                      <div class="current-budget-badge">
                        <span class="current-icon">✅</span>
                        <span class="current-text">Ativo</span>
                      </div>
                    `}
>>>>>>> origin/master
                  </div>
                </div>
              `).join('')}
            </div>
          `;
<<<<<<< HEAD
  })()}
=======
        })()}
>>>>>>> origin/master
      </section>

      <!-- Seção: Compartilhar Orçamento -->
      ${currentBudget ? `
      <section class="content-section">
        <h2 class="section-title green-border">Compartilhar Orçamento</h2>
        <p class="section-description">Compartilhe seu orçamento atual com outros usuários</p>
        
        <div class="share-form">
          <div class="input-group">
            <label class="input-label">Email do usuário:</label>
            <input type="email" id="share-email" class="form-input u-input" placeholder="usuario@exemplo.com">
          </div>
          <div class="input-group">
            <label class="input-label">Selecionar orçamento para compartilhar:</label>
<<<<<<< HEAD
            <select id="share-budget-select" class="form-input u-input">
              ${budgets.map(b => `<option value="${b.id}" ${b.id === currentBudget.id ? 'selected' : ''}>${b.nome || 'Sem nome'}</option>`).join('')}
            </select>
          </div>
          <button onclick="inviteUserToBudget()" class="share-button u-btn u-btn--primary">
=======
            <select id="share-budget-select" class="form-input">
              ${budgets.map(b => `<option value="${b.id}" ${b.id === currentBudget.id ? 'selected' : ''}>${b.nome || 'Sem nome'}</option>`).join('')}
            </select>
          </div>
          <button onclick="inviteUserToBudget()" class="share-button">
>>>>>>> origin/master
            <span class="share-icon">📤</span>
            <span class="share-text">Enviar Convite</span>
          </button>
        </div>
        
        <div class="share-info">
          <div class="info-item">
            <span class="info-icon">ℹ️</span>
            <span class="info-text">O usuário receberá um convite por email para acessar este orçamento</span>
          </div>
        </div>
      </section>
      ` : `
      <section class="content-section">
        <h2 class="section-title green-border">Compartilhar Orçamento</h2>
        <p class="section-description">Compartilhe seu orçamento com outros usuários</p>
        
        <div class="empty-state">
          <div class="empty-icon">📋</div>
          <div class="empty-text">Nenhum orçamento selecionado</div>
          <div class="empty-description">Selecione um orçamento para poder compartilhá-lo</div>
        </div>
      </section>
      `}

      <!-- Seção: Gerenciar Orçamentos (somente meus) -->
      <section class="content-section">
        <h2 class="section-title blue-border">Gerenciar Orçamentos</h2>
        
        <div class="budgets-list">
          ${(() => {
    const me = currentUser?.uid;
    const owned = (budgets || []).filter(b => b && (b.isOwner !== false) && (!me || b.userId === me));
    return owned.map(budget => `
            <div class="budget-item ${budget.id === currentBudget?.id ? 'active' : ''}" ${budget.id !== currentBudget?.id ? `data-enter-id="${budget.id}" data-enter-name="${(budget.nome || 'Orçamento').replace(/\"/g, '&quot;')}" role="button" tabindex="0"` : ''}>
              <div class="budget-item-info">
                <div class="budget-item-name">${budget.nome}</div>
                <div class="budget-item-date">Criado em ${budget.createdAt ? new Date(budget.createdAt.seconds * 1000).toLocaleDateString('pt-BR') : 'Data não disponível'}</div>
                ${budget.id === currentBudget?.id ? '<div class="budget-item-status">Ativo</div>' : ''}
              </div>
              <div class="budget-item-actions">
                <div class="actions-row primary">
                  ${budget.id !== currentBudget?.id ? `
                    <button type="button" class="enter-budget-button u-btn u-btn--primary" tabindex="0" onclick="enterBudget('${budget.id}')" data-budget-id="${budget.id}" data-budget-name="${(budget.nome || 'Orçamento').replace(/\"/g, '&quot;')}" title="Entrar neste orçamento">
                      <span class="enter-icon">🚪</span>
                      <span class="enter-text">Entrar</span>
                    </button>
                  ` : `
                    <div class="current-budget-badge">
                      <span class="current-icon">✅</span>
                      <span class="current-text">Ativo</span>
                    </div>
                  `}
                </div>
                <div class="actions-row secondary">
                  <button class="copy-id-button u-btn u-btn--ghost" onclick="copyBudgetId('${budget.id}', this)" title="Copiar ID do orçamento">Copiar ID</button>
                  <button class="delete-button u-btn u-btn--danger" onclick="deleteBudgetFromSettings('${budget.id}')" title="Excluir orçamento">
                    <span class="delete-icon">🗑️</span>
                    <span class="delete-text">Excluir</span>
                  </button>
                </div>
              </div>
            </div>
          `).join('');
  })()}
        </div>
        
  <button onclick="createNewBudget()" class="create-button u-btn u-btn--primary">
          <span class="create-icon">➕</span>
          <span class="create-text">Criar Novo Orçamento</span>
        </button>
      </section>

  <!-- Seção: Dados e Privacidade -->
  <section class="content-section" id="section-data-privacy">
        <h2 class="section-title purple-border">Dados e Privacidade</h2>
        
        <div class="privacy-actions">
          <button onclick="exportData()" class="privacy-button">
            <span class="privacy-icon">📤</span>
            <span class="privacy-text">Exportar Meus Dados</span>
          </button>
          
          <button onclick="importData()" class="privacy-button">
            <span class="privacy-icon">📥</span>
            <span class="privacy-text">Importar Dados</span>
          </button>
          
          <button onclick="clearData()" class="privacy-button danger">
            <span class="privacy-icon">🗑️</span>
            <span class="privacy-text">Limpar Todos os Dados</span>
          </button>
        </div>

        <!-- Diagnóstico e Correções (avançado) -->
        <div class="bg-white dark:bg-gray-900 rounded-2xl border border-gray-200 dark:border-gray-700 p-4 mt-4">
          <div class="flex items-center justify-between mb-3">
            <h3 class="text-base font-semibold text-gray-900 dark:text-gray-100">🛠️ Diagnóstico e Correções</h3>
            <span class="text-xs text-gray-500 dark:text-gray-400">Avançado</span>
          </div>
          <p class="text-sm text-gray-600 dark:text-gray-300 mb-3">Se algumas listas estiverem vazias após entrar no orçamento, use estas ações para corrigir dados antigos sem <code>budgetId</code>.</p>
          <div class="flex flex-col sm:flex-row gap-2">
            <button onclick="window.corrigirCategoriasSemBudget()" class="px-3 py-2 rounded-lg text-sm font-medium bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-200 hover:bg-blue-100 dark:hover:bg-blue-900/50 border border-blue-200 dark:border-blue-800">
              Corrigir categorias antigas
            </button>
            <button onclick="window.corrigirTransacoesSemBudget()" class="px-3 py-2 rounded-lg text-sm font-medium bg-indigo-50 dark:bg-indigo-900/30 text-indigo-700 dark:text-indigo-200 hover:bg-indigo-100 dark:hover:bg-indigo-900/50 border border-indigo-200 dark:border-indigo-800">
              Corrigir transações antigas
            </button>
            <button onclick="window.corrigirRecorrentesSemBudget()" class="px-3 py-2 rounded-lg text-sm font-medium bg-teal-50 dark:bg-teal-900/30 text-teal-700 dark:text-teal-200 hover:bg-teal-100 dark:hover:bg-teal-900/50 border border-teal-200 dark:border-teal-800">
              Corrigir recorrentes antigas
            </button>
            <!-- Em ambientes com múltiplos orçamentos, use a migração por categoria para atribuir budgetId com segurança -->
            <button onclick="window.migrarOrfaosPorCategoria && window.migrarOrfaosPorCategoria()" class="px-3 py-2 rounded-lg text-sm font-medium bg-amber-50 dark:bg-amber-900/30 text-amber-700 dark:text-amber-200 hover:bg-amber-100 dark:hover:bg-amber-900/50 border border-amber-200 dark:border-amber-800">
              Migrar órfãos por categoria
            </button>
            <!-- Correção escopada ao orçamento atual (somente categorias do orçamento vigente) -->
            <button onclick="window.corrigirOrfaosDoOrcamento && window.corrigirOrfaosDoOrcamento()" class="px-3 py-2 rounded-lg text-sm font-medium bg-yellow-50 dark:bg-yellow-900/30 text-yellow-700 dark:text-yellow-200 hover:bg-yellow-100 dark:hover:bg-yellow-900/50 border border-yellow-200 dark:border-yellow-800">
              Corrigir órfãos deste orçamento
            </button>
              <button onclick="window.corrigirTudoSemBudget()" class="px-3 py-2 rounded-lg text-sm font-medium bg-green-50 dark:bg-green-900/30 text-green-700 dark:text-green-200 hover:bg-green-100 dark:hover:bg-green-900/50 border border-green-200 dark:border-green-800">
                Corrigir tudo
              </button>
          </div>
        </div>
      </section>

  <!-- Seção: Configurações de Notificações -->
  <section class="content-section" id="section-notifications">
        <h2 class="section-title orange-border">Notificações</h2>
        
        <div class="notifications-settings">
          <div class="setting-item">
            <div class="setting-info">
              <div class="setting-label">Alertas de Limite</div>
              <div class="setting-description">Notificar quando categoria exceder 70% do limite</div>
            </div>
            <label class="toggle-switch">
              <input type="checkbox" id="limit-alerts" checked>
              <span class="toggle-slider"></span>
            </label>
          </div>
          
          <div class="setting-item">
            <div class="setting-info">
              <div class="setting-label">Lembretes de Recorrentes</div>
              <div class="setting-description">Lembrar de aplicar despesas recorrentes</div>
            </div>
            <label class="toggle-switch">
              <input type="checkbox" id="recurring-reminders" checked>
              <span class="toggle-slider"></span>
            </label>
          </div>
          
          <div class="setting-item">
            <div class="setting-info">
              <div class="setting-label">Resumo Semanal</div>
              <div class="setting-description">Receber resumo semanal das finanças</div>
            </div>
            <label class="toggle-switch">
              <input type="checkbox" id="weekly-summary">
              <span class="toggle-slider"></span>
            </label>
          </div>

          <div class="setting-item">
            <div class="setting-info">
              <div class="setting-label">Notificações do Sistema</div>
              <div class="setting-description">Mostrar notificações do sistema (desktop / mobile) quando houver novas notificações</div>
            </div>
            <label class="toggle-switch">
              <input type="checkbox" id="notif-toasts-enabled">
              <span class="toggle-slider"></span>
            </label>
          </div>
        </div>

<<<<<<< HEAD
        <div class="mt-3 flex flex-wrap gap-2">
          <button aria-label="Enviar notificação de teste para o dono" onclick="sendTestNotificationOwner()" class="px-3 py-2 rounded-lg text-sm font-medium bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-200 hover:bg-blue-100 dark:hover:bg-blue-900/50 border border-blue-200 dark:border-blue-800">
            Enviar teste (Dono)
          </button>
          <button aria-label="Enviar notificações de teste para usuários compartilhados" onclick="sendTestNotificationShared()" class="px-3 py-2 rounded-lg text-sm font-medium bg-indigo-50 dark:bg-indigo-900/30 text-indigo-700 dark:text-indigo-200 hover:bg-indigo-100 dark:hover:bg-indigo-900/50 border border-indigo-200 dark:border-indigo-800">
            Enviar teste (Compartilhados)
          </button>
          <button aria-label="Abrir feed de notificações" onclick="(function(){ try { window.location.hash = '#/notifications'; } catch {} localStorage?.setItem?.('settings_last_section','section-notifications'); })()" class="px-3 py-2 rounded-lg text-sm font-medium bg-gray-50 dark:bg-gray-800 text-gray-800 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 border border-gray-200 dark:border-gray-700">
            Abrir feed de Notificações
          </button>
        </div>
      </section>
=======
          <!-- ========== SEÇÃO 4: CONFIGURAÇÕES DE INTERFACE ========== -->
          <div class="mb-8">
            <h2 class="section-title purple-border">🎨 Interface & Aparência</h2>
            
            <div class="bg-white dark:bg-gray-900 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden">
              <!-- Header -->
              <div class="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-gray-800 dark:to-gray-800 p-4 border-b border-gray-200 dark:border-gray-700">
                <h3 class="text-lg font-bold text-gray-900 dark:text-gray-100">Personalizar Aparência</h3>
              </div>
              
              <!-- Configurações -->
              <div class="p-4 space-y-4">
                <!-- Modo Escuro -->
                <div class="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-xl">
                  <div class="flex items-center gap-3">
                    <div class="w-12 h-12 rounded-full bg-gray-100 dark:bg-gray-700 flex items-center justify-center text-xl">
                      🌙
                    </div>
                    <div>
                      <div class="font-medium text-gray-900 dark:text-gray-100">Modo Escuro</div>
                      <div class="text-sm text-gray-500 dark:text-gray-400">Alternar entre tema claro e escuro</div>
                    </div>
                  </div>
                  <button onclick="toggleTheme()" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200">
                    Alternar
                  </button>
                </div>
                
                <!-- Tema de Cores -->
                <div class="p-4 bg-gray-50 dark:bg-gray-800 rounded-xl">
                  <div class="flex items-center gap-3 mb-3">
                    <div class="w-12 h-12 rounded-full bg-purple-100 dark:bg-purple-900 flex items-center justify-center text-xl">
                      🎨
                    </div>
                    <div>
                      <div class="font-medium text-gray-900 dark:text-gray-100">Tema de Cores</div>
                      <div class="text-sm text-gray-500 dark:text-gray-400">Escolher cores preferidas para o app</div>
                    </div>
                  </div>
                  <div class="flex gap-2">
                    <button onclick="setColorTheme('blue')" class="w-10 h-10 rounded-full bg-blue-500 hover:bg-blue-600 transition-all duration-200" title="Azul"></button>
                    <button onclick="setColorTheme('green')" class="w-10 h-10 rounded-full bg-green-500 hover:bg-green-600 transition-all duration-200" title="Verde"></button>
                    <button onclick="setColorTheme('purple')" class="w-10 h-10 rounded-full bg-purple-500 hover:bg-purple-600 transition-all duration-200" title="Roxo"></button>
                    <button onclick="setColorTheme('orange')" class="w-10 h-10 rounded-full bg-orange-500 hover:bg-orange-600 transition-all duration-200" title="Laranja"></button>
                  </div>
                </div>
                
                <!-- Compactar Interface -->
                <div class="p-4 bg-gray-50 dark:bg-gray-800 rounded-xl">
                  <div class="flex items-center gap-3 mb-3">
                    <div class="w-12 h-12 rounded-full bg-yellow-100 dark:bg-yellow-900 flex items-center justify-center text-xl">
                      📏
                    </div>
                    <div>
                      <div class="font-medium text-gray-900 dark:text-gray-100">Compactar Interface</div>
                      <div class="text-sm text-gray-500 dark:text-gray-400">Mostrar mais informações em menos espaço</div>
                    </div>
                  </div>
                  <div class="flex items-center gap-3">
                    <label class="relative inline-flex items-center cursor-pointer">
                      <input type="checkbox" id="compact-interface" onchange="toggleCompactMode(this.checked)" class="sr-only peer">
                      <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                    </label>
                    <button onclick="toggleMicroMode()" class="bg-gray-500 hover:bg-gray-600 text-white px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200" title="Modo micro-compacto">
                      📏 Micro
                    </button>
                    <button onclick="toggleNanoMode()" class="bg-gray-500 hover:bg-gray-600 text-white px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200" title="Modo nano-compacto">
                      🔬 Nano
                    </button>
                  </div>
                </div>
                
                <!-- Animações -->
                <div class="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-xl">
                  <div class="flex items-center gap-3">
                    <div class="w-12 h-12 rounded-full bg-green-100 dark:bg-green-900 flex items-center justify-center text-xl">
                      ✨
                    </div>
                    <div>
                      <div class="font-medium text-gray-900 dark:text-gray-100">Animações</div>
                      <div class="text-sm text-gray-500 dark:text-gray-400">Mostrar animações e transições</div>
                    </div>
                  </div>
                  <label class="relative inline-flex items-center cursor-pointer">
                    <input type="checkbox" id="animations" checked class="sr-only peer">
                    <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                  </label>
                </div>
              </div>
            </div>
          </div>
>>>>>>> origin/master

          <!-- ========== SEÇÃO 4: CONFIGURAÇÕES DE INTERFACE ========== -->
          <div class="mb-8">
            <h2 class="section-title purple-border">🎨 Interface & Aparência</h2>
            
            <div class="bg-white dark:bg-gray-900 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-700 overflow-hidden">
              <!-- Header -->
              <div class="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-gray-800 dark:to-gray-800 p-4 border-b border-gray-200 dark:border-gray-700">
                <h3 class="text-lg font-bold text-gray-900 dark:text-gray-100">Personalizar Aparência</h3>
              </div>
              
              <!-- Configurações -->
              <div class="p-4 space-y-4">
                <!-- Toasts / Snackbar -->
                <div class="p-4 bg-gray-50 dark:bg-gray-800 rounded-xl">
                  <div class="flex items-center gap-3 mb-3">
                    <div class="w-12 h-12 rounded-full bg-blue-100 dark:bg-blue-900 flex items-center justify-center text-xl">🔔</div>
                    <div>
                      <div class="font-medium text-gray-900 dark:text-gray-100">Toasts (Snackbar)</div>
                      <div class="text-sm text-gray-500 dark:text-gray-400">Ajuste posição, duração, fila e anti-spam</div>
                    </div>
                  </div>
                  <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                    <label class="flex items-center gap-2">
                      <span class="w-40 text-gray-700 dark:text-gray-300">Duração padrão (ms)</span>
                      <input id="snk-duration" type="number" min="500" step="100" class="u-input flex-1" placeholder="3000" />
                    </label>
                    <label class="flex items-center gap-2">
                      <span class="w-40 text-gray-700 dark:text-gray-300">Distância da borda (px)</span>
                      <input id="snk-bottom" type="number" min="0" step="4" class="u-input flex-1" placeholder="80" />
                    </label>
                    <label class="flex items-center gap-2">
                      <span class="w-40 text-gray-700 dark:text-gray-300">Posição</span>
                      <select id="snk-position" class="u-input flex-1">
                        <option value="bottom">Inferior</option>
                        <option value="top">Superior</option>
                      </select>
                    </label>
                    <label class="flex items-center gap-2">
                      <span class="w-40 text-gray-700 dark:text-gray-300">Alinhamento</span>
                      <select id="snk-align" class="u-input flex-1">
                        <option value="center">Centro</option>
                        <option value="left">Esquerda</option>
                        <option value="right">Direita</option>
                      </select>
                    </label>
                    <label class="flex items-center gap-2">
                      <span class="w-40 text-gray-700 dark:text-gray-300">Max. fila</span>
                      <input id="snk-maxQueue" type="number" min="1" max="20" step="1" class="u-input flex-1" placeholder="5" />
                    </label>
                    <label class="flex items-center gap-2">
                      <span class="w-40 text-gray-700 dark:text-gray-300">Anti-spam (ms)</span>
                      <input id="snk-cooldown" type="number" min="0" step="100" class="u-input flex-1" placeholder="500" />
                    </label>
                    <label class="flex items-center gap-2">
                      <span class="w-40 text-gray-700 dark:text-gray-300">Pausar no hover</span>
                      <input id="snk-hoverPause" type="checkbox" class="h-5 w-5" />
                    </label>
                  </div>
                  <div class="flex gap-2 mt-3">
                    <button onclick="window.saveSnackbarPrefs && window.saveSnackbarPrefs()" class="u-btn u-btn--primary">Aplicar</button>
                    <button onclick="window.resetSnackbarPrefs && window.resetSnackbarPrefs()" class="u-btn u-btn--outline">Restaurar padrão</button>
                    <button onclick="window.Snackbar && window.Snackbar.info('Exemplo de toast', 1500)" class="u-btn u-btn--primary">Testar</button>
                  </div>
                </div>
                <!-- Modo Escuro -->
                <div class="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-xl">
                  <div class="flex items-center gap-3">
                    <div class="w-12 h-12 rounded-full bg-gray-100 dark:bg-gray-700 flex items-center justify-center text-xl">
                      🌙
                    </div>
                    <div>
                      <div class="font-medium text-gray-900 dark:text-gray-100">Modo Escuro</div>
                      <div class="text-sm text-gray-500 dark:text-gray-400">Alternar entre tema claro e escuro</div>
                    </div>
                  </div>
                  <button onclick="toggleTheme()" class="u-btn u-btn--primary">
                    Alternar
                  </button>
                </div>
                
                <!-- Tema de Cores -->
                <div class="p-4 bg-gray-50 dark:bg-gray-800 rounded-xl">
                  <div class="flex items-center gap-3 mb-3">
                    <div class="w-12 h-12 rounded-full bg-purple-100 dark:bg-purple-900 flex items-center justify-center text-xl">
                      🎨
                    </div>
                    <div>
                      <div class="font-medium text-gray-900 dark:text-gray-100">Tema de Cores</div>
                      <div class="text-sm text-gray-500 dark:text-gray-400">Escolher cores preferidas para o app</div>
                    </div>
                  </div>
                  <div class="flex gap-2">
                    <button onclick="setColorTheme('blue')" class="w-10 h-10 rounded-full bg-blue-500 hover:bg-blue-600 transition-all duration-200" title="Azul"></button>
                    <button onclick="setColorTheme('green')" class="w-10 h-10 rounded-full bg-green-500 hover:bg-green-600 transition-all duration-200" title="Verde"></button>
                    <button onclick="setColorTheme('purple')" class="w-10 h-10 rounded-full bg-purple-500 hover:bg-purple-600 transition-all duration-200" title="Roxo"></button>
                    <button onclick="setColorTheme('orange')" class="w-10 h-10 rounded-full bg-orange-500 hover:bg-orange-600 transition-all duration-200" title="Laranja"></button>
                  </div>
                </div>
                
                <!-- Compactar Interface -->
                <div class="p-4 bg-gray-50 dark:bg-gray-800 rounded-xl">
                  <div class="flex items-center gap-3 mb-3">
                    <div class="w-12 h-12 rounded-full bg-yellow-100 dark:bg-yellow-900 flex items-center justify-center text-xl">
                      📏
                    </div>
                    <div>
                      <div class="font-medium text-gray-900 dark:text-gray-100">Compactar Interface</div>
                      <div class="text-sm text-gray-500 dark:text-gray-400">Mostrar mais informações em menos espaço</div>
                    </div>
                  </div>
                  <div class="flex items-center gap-3">
                    <label class="relative inline-flex items-center cursor-pointer">
                      <input type="checkbox" id="compact-interface" onchange="toggleCompactMode(this.checked)" class="sr-only peer">
                      <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                    </label>
                    <button onclick="toggleMicroMode()" class="u-btn u-btn--outline" title="Modo micro-compacto">
                      📏 Micro
                    </button>
                    <button onclick="toggleNanoMode()" class="u-btn u-btn--outline" title="Modo nano-compacto">
                      🔬 Nano
                    </button>
                  </div>
                </div>
                
                  <!-- Desempenho das Transações (virtualização) -->
                  <div class="p-4 bg-gray-50 dark:bg-gray-800 rounded-xl">
                    <div class="flex items-center gap-3 mb-3">
                      <div class="w-12 h-12 rounded-full bg-indigo-100 dark:bg-indigo-900 flex items-center justify-center text-xl">⚡</div>
                      <div>
                        <div class="font-medium text-gray-900 dark:text-gray-100">Tamanho do bloco de dias</div>
                        <div class="text-sm text-gray-500 dark:text-gray-400">Ajusta quantos grupos de dias são carregados por vez na aba Transações (recomendado 10–16)</div>
                      </div>
                    </div>
                    <div class="flex items-center gap-3 flex-wrap">
                      <input id="tx-chunk-size" type="number" min="6" max="40" value="${txChunkOverride}" placeholder="Automático" class="u-input w-28"/>
                      <button onclick="saveTxChunkSize()" class="u-btn u-btn--primary">Salvar</button>
                      <button onclick="resetTxChunkSize()" class="u-btn u-btn--outline">Restaurar padrão</button>
                    </div>
                    <div class="text-xs text-gray-500 dark:text-gray-400 mt-2">Deixe em branco para usar ajuste automático baseado no seu dispositivo. Aplica-se na próxima abertura da aba Transações.</div>
                  </div>

                <!-- Animações -->
                <div class="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-xl">
                  <div class="flex items-center gap-3">
                    <div class="w-12 h-12 rounded-full bg-green-100 dark:bg-green-900 flex items-center justify-center text-xl">
                      ✨
                    </div>
                    <div>
                      <div class="font-medium text-gray-900 dark:text-gray-100">Animações</div>
                      <div class="text-sm text-gray-500 dark:text-gray-400">Mostrar animações e transições</div>
                    </div>
                  </div>
                  <label class="relative inline-flex items-center cursor-pointer">
                    <input type="checkbox" id="animations" checked class="sr-only peer">
                    <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                  </label>
                </div>

                <!-- Telemetria de Performance (local) -->
                <div class="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-xl">
                  <div class="flex items-center gap-3">
                    <div class="w-12 h-12 rounded-full bg-indigo-100 dark:bg-indigo-900 flex items-center justify-center text-xl">📈</div>
                    <div>
                      <div class="font-medium text-gray-900 dark:text-gray-100">Telemetria de Performance</div>
                      <div class="text-sm text-gray-500 dark:text-gray-400">Coleta local de tempos de render e carregamentos (sem envio)</div>
                    </div>
                  </div>
                  <div class="flex items-center gap-3">
                    <label class="relative inline-flex items-center cursor-pointer">
                      <input type="checkbox" id="perf-telemetry" ${perfEnabled ? 'checked' : ''} onchange="togglePerfTelemetry()" class="sr-only peer">
                      <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                    </label>
                    <button onclick="showPerfLog()" class="u-btn u-btn--outline">Ver eventos</button>
                  </div>
                </div>
              </div>
            </div>
          </div>

  <!-- Seção: Configurações de Privacidade -->
  <section class="content-section" id="section-privacy-security">
        <h2 class="section-title purple-border">Privacidade e Segurança</h2>
        
        <div class="privacy-settings">
          <div class="setting-item">
            <div class="setting-info">
              <div class="setting-label">Autenticação Biométrica</div>
              <div class="setting-description">Usar impressão digital ou face ID</div>
            </div>
            <label class="toggle-switch">
              <input type="checkbox" id="biometric-auth">
              <span class="toggle-slider"></span>
            </label>
          </div>
          
          <div class="setting-item">
            <div class="setting-info">
              <div class="setting-label">Sincronização Automática</div>
              <div class="setting-description">Sincronizar dados automaticamente</div>
            </div>
            <label class="toggle-switch">
              <input type="checkbox" id="auto-sync" checked>
              <span class="toggle-slider"></span>
            </label>
          </div>
          
          <div class="setting-item">
            <div class="setting-info">
              <div class="setting-label">Analytics</div>
              <div class="setting-description">Compartilhar dados de uso para melhorias</div>
            </div>
            <label class="toggle-switch">
              <input type="checkbox" id="analytics" checked>
              <span class="toggle-slider"></span>
            </label>
          </div>
        </div>
      </section>

  <!-- Seção: Sobre o App -->
  <section class="content-section" id="section-about">
        <h2 class="section-title">ℹ️ Sobre o App</h2>
        
        <div class="about-info">
          <div class="about-item">
      <span class="about-label">Versão:</span>
    <span class="about-value">${__appVersion}</span>
          </div>
          <div class="about-item">
            <span class="about-label">SW Versão:</span>
            <span class="about-value" id="sw-version-dyn">—</span>
          </div>
          <div class="about-item">
            <span class="about-label">Cache Estático:</span>
            <span class="about-value" id="sw-cache-static">—</span>
          </div>
          <div class="about-item">
            <span class="about-label">Cache Dinâmico:</span>
            <span class="about-value" id="sw-cache-dynamic">—</span>
          </div>
          <div class="about-item">
            <span class="about-label">Desenvolvedor:</span>
            <span class="about-value">Igor Bispo</span>
          </div>
          <div class="about-item">
            <span class="about-label">Tecnologias:</span>
            <span class="about-value">Firebase, JavaScript, PWA</span>
          </div>
          <div class="about-item">
            <span class="about-label">Última Atualização:</span>
            <span class="about-value">${__lastUpdateLabel}</span>
          </div>
          <div class="about-item">
            <span class="about-label">Conectividade:</span>
            <span class="about-value" id="net-status">—</span>
          </div>
          <div class="about-item">
            <span class="about-label">Última verificação de update:</span>
            <span class="about-value" id="sw-last-check">—</span>
          </div>
        </div>
        
        <div class="app-actions">
          <button aria-label="Verificar atualizações do aplicativo" onclick="checkForUpdates()" class="app-button">
            <span class="app-icon">🔄</span>
            <span class="app-text">Verificar Atualizações</span>
          </button>

          <button aria-label="Limpar cache offline do aplicativo" onclick="clearAppCaches()" class="app-button">
            <span class="app-icon">🧹</span>
            <span class="app-text">Limpar Cache Offline</span>
          </button>
          
          <button aria-label="Abrir ajuda e suporte" onclick="openHelp()" class="app-button">
            <span class="app-icon">❓</span>
            <span class="app-text">Ajuda e Suporte</span>
          </button>
          
          <button aria-label="Ver o que mudou nesta versão" onclick="openChangelogModal()" class="app-button">
            <span class="app-icon">📝</span>
            <span class="app-text">O que mudou ${__hasNewChangelog ? '<span class="ml-2 px-2 py-0.5 text-[10px] rounded-full bg-red-100 text-red-700 align-middle">Novo</span>' : ''}</span>
          </button>
          
          <button aria-label="Avaliar o aplicativo" onclick="rateApp()" class="app-button">
            <span class="app-icon">⭐</span>
            <span class="app-text">Avaliar App</span>
          </button>

          <button id="install-app-btn" aria-label="Instalar o aplicativo na tela inicial" onclick="(window.installApp && window.installApp())" class="app-button">
            <span class="app-icon">⬇️</span>
            <span class="app-text">Instalar App</span>
          </button>

          <button aria-label="Copiar informações de diagnóstico" onclick="(function(){ try { const info = {
            appVersion: __appVersion,
            swVersion: document.getElementById('sw-version-dyn')?.textContent || '',
            cacheStatic: document.getElementById('sw-cache-static')?.textContent || '',
            cacheDynamic: document.getElementById('sw-cache-dynamic')?.textContent || '',
            connectivity: document.getElementById('net-status')?.textContent || '',
            lastCheck: document.getElementById('sw-last-check')?.textContent || ''
          }; navigator.clipboard?.writeText?.(JSON.stringify(info, null, 2)); window.Snackbar?.({ message: 'Informações copiadas', type: 'success' }); } catch (e) { console.warn(e); window.Snackbar?.({ message: 'Não foi possível copiar', type: 'error' }); } })()" class="app-button">
            <span class="app-icon">📋</span>
            <span class="app-text">Copiar Informações</span>
          </button>
        </div>
      </section>
          </div>
        </div>
      </div>
    </div>

    <style>
      /* Estilos da Abordagem Híbrida para Configurações */
      
      .settings-container {
        /* Ocupa toda a largura disponível */
        max-width: none;
        width: 100%;
        margin: 0;
        padding: 0.5rem 1rem;
      }

            /* Mobile-first: Design ultra-compacto */
      @media (max-width: 768px) {
        .settings-container {
          padding: 0.125rem;
          margin: 0;
        }
        
        .page-title {
          font-size: 1.25rem !important;
          margin-bottom: 0.125rem !important;
          padding: 0.25rem 0 !important;
        }
        
        .page-subtitle {
          font-size: var(--font-size-base) !important;
          margin-bottom: 0.5rem !important;
          opacity: 0.8;
        }
        
        .section-title {
          font-size: var(--font-size-lg) !important;
          margin-bottom: 0.25rem !important;
          padding: 0.25rem 0 !important;
          border-bottom: 1px solid rgba(0,0,0,0.1);
        }
        
        .content-section {
          margin-bottom: 0.5rem !important;
          padding: 0.375rem !important;
          border-radius: 6px;
        }
        
        .setting-item {
          padding: 0.25rem 0 !important;
          margin-bottom: 0.25rem !important;
          display: flex;
          align-items: center;
          justify-content: space-between;
        }
        
        .setting-info {
          flex: 1;
          min-width: 0;
        }
        
        .setting-label {
          font-size: var(--font-size-base) !important;
          font-weight: 500;
          margin-bottom: 0.125rem !important;
        }
        
        .setting-description {
          font-size: var(--font-size-base) !important;
          opacity: 0.7;
          line-height: 1.2;
        }
        
        .budget-card {
          padding: 0.5rem !important;
          margin-bottom: 0.5rem !important;
        }
        
        .budget-name {
          font-size: var(--font-size-base) !important;
          font-weight: 600;
        }
        
        .detail-item {
          margin-bottom: 0.125rem !important;
          display: flex;
          justify-content: space-between;
          align-items: center;
        }
        
        .detail-label, .detail-value {
          font-size: var(--font-size-base) !important;
        }
        
        .users-list, .invitations-list {
          gap: 0.25rem !important;
        }
        
        .user-item, .invitation-item {
          padding: 0.375rem !important;
          border-radius: 4px;
        }
        
        .user-email, .invitation-email {
          font-size: var(--font-size-base) !important;
          font-weight: 500;
        }
        
        .user-role, .invitation-date {
          font-size: var(--font-size-base) !important;
          opacity: 0.7;
        }
        
        .privacy-actions {
          gap: 0.25rem !important;
          flex-wrap: wrap;
        }
        
        .privacy-button {
          padding: 0.375rem 0.5rem !important;
          font-size: var(--font-size-base) !important;
          border-radius: 4px;
        }
        
        .share-form {
          gap: 0.25rem !important;
          flex-direction: column;
        }
        
        .form-input {
          padding: 0.375rem !important;
          font-size: var(--font-size-base) !important;
          border-radius: 4px;
        }
        
        .share-button {
          padding: 0.375rem 0.5rem !important;
          font-size: var(--font-size-base) !important;
          border-radius: 4px;
        }
        
        .budgets-list {
          gap: 0.25rem !important;
        }
        
        .budget-item {
          padding: 0.375rem !important;
          border-radius: 4px;
        }
        
        .budget-item-name {
          font-size: var(--font-size-base) !important;
          font-weight: 500;
        }
        
        .budget-item-date {
          font-size: var(--font-size-base) !important;
          opacity: 0.7;
        }
        
        .create-button {
          padding: 0.375rem 0.5rem !important;
          font-size: var(--font-size-base) !important;
          border-radius: 4px;
        }
        
        .about-info {
          gap: 0.125rem !important;
        }
        
        .about-item {
          padding: 0.125rem 0 !important;
          display: flex;
          justify-content: space-between;
          align-items: center;
        }
        
        .about-label, .about-value {
          font-size: var(--font-size-base) !important;
        }
        
        .app-actions {
          gap: 0.25rem !important;
          flex-wrap: wrap;
        }
        
        .app-button {
          padding: 0.375rem 0.5rem !important;
          font-size: var(--font-size-base) !important;
          border-radius: 4px;
        }
        
        .empty-state {
          padding: 0.5rem !important;
          text-align: center;
        }
        
        .empty-icon {
          font-size: var(--font-size-lg) !important;
          margin-bottom: 0.25rem !important;
        }
        
        .empty-text {
          font-size: 0.8125rem !important;
          font-weight: 500;
        }
        
        .empty-description {
          font-size: 0.6875rem !important;
          opacity: 0.7;
        }
        
                 /* Layout em grid para melhor aproveitamento */
         .settings-grid {
           display: grid;
           grid-template-columns: 1fr;
           gap: 0.5rem;
         }
         
         /* Otimizações adicionais para máximo aproveitamento */
         .settings-container {
           line-height: 1.2;
         }
         
         /* Reduzir espaçamento entre seções */
         .content-section + .content-section {
           margin-top: 0.25rem;
         }
         
         /* Otimizar espaçamento de listas */
         .users-list > * + *,
         .invitations-list > * + *,
         .budgets-list > * + * {
           margin-top: 0.125rem;
         }
         
         /* Reduzir padding de botões */
         .privacy-button,
         .share-button,
         .create-button,
         .app-button {
           line-height: 1.2;
           min-height: auto;
         }
         
         /* Otimizar formulários */
         .form-input {
           line-height: 1.2;
           min-height: auto;
         }
         
         /* Reduzir espaçamento entre elementos inline */
         .setting-label + .setting-description {
           margin-top: 0.0625rem;
         }
         
         .content-section {
           line-height: 1.1;
         }
         
         .setting-item {
           line-height: 1.1;
         }
         
         /* Reduzir espaçamento entre elementos inline */
         .setting-label + .setting-description {
           margin-top: 0.0625rem;
         }
         
         /* Otimizar espaçamento de listas */
         .users-list > * + *,
         .invitations-list > * + *,
         .budgets-list > * + * {
           margin-top: 0.125rem;
         }
         
         /* Reduzir padding de botões */
         .privacy-button,
         .share-button,
         .create-button,
         .app-button {
           line-height: 1.2;
           min-height: auto;
         }
         
         /* Otimizar formulários */
         .form-input {
           line-height: 1.2;
           min-height: auto;
         }

      /* Desktop: duas colunas automáticas para preencher melhor a largura */
      @media (min-width: 1024px) {
        .content-spacing {
          display: grid;
          grid-template-columns: repeat(2, minmax(0, 1fr));
          gap: 1.25rem;
        }
        /* A primeira seção (Resumo do Orçamento) ocupa largura completa */
        .content-spacing > .mb-8:first-child {
          grid-column: 1 / -1;
        }
      }

      /* Ultrawide: aumenta o gap para conforto visual */
      @media (min-width: 1600px) {
        .content-spacing {
          gap: 1.5rem;
        }
      }
        
        /* Cards mais compactos */
        .compact-card {
          background: rgba(255,255,255,0.8);
          border: 1px solid rgba(0,0,0,0.1);
          border-radius: 6px;
          padding: 0.5rem;
          margin-bottom: 0.25rem;
        }
        
        /* Botões mais compactos */
        .compact-button {
          padding: 0.25rem 0.5rem;
          font-size: 0.75rem;
          border-radius: 4px;
          border: none;
          cursor: pointer;
          transition: all 0.2s;
        }
        
        /* Toggle mais compacto */
        .toggle-switch {
          transform: scale(0.8);
          margin-left: 0.5rem;
        }
        
                 /* Ícones menores */
         .section-title::before {
           font-size: 0.875rem;
           margin-right: 0.375rem;
         }
         
         /* Controles de compactação */
         .compact-controls {
           display: flex;
           align-items: center;
           gap: 0.25rem;
         }
         
         .micro-compact-btn {
           background: none;
           border: none;
           font-size: 0.875rem;
           cursor: pointer;
           padding: 0.125rem;
           border-radius: 3px;
           transition: all 0.2s;
         }
         
         .micro-compact-btn:hover {
           background: rgba(0,0,0,0.1);
         }
         
         .micro-compact-btn.active {
           background: var(--primary-color);
           color: white;
         }
         
         .nano-compact-btn {
           background: none;
           border: none;
           font-size: 0.875rem;
           cursor: pointer;
           padding: 0.125rem;
           border-radius: 3px;
           transition: all 0.2s;
         }
         
         .nano-compact-btn:hover {
           background: rgba(0,0,0,0.1);
         }
         
         .nano-compact-btn.active {
           background: var(--accent-color);
           color: white;
         }
       }

       /* Modo Ultra-Compacto - Aplicado via JavaScript */
       .compact-mode {
         --spacing-xs: 1px;
         --spacing-sm: 2px;
         --spacing-md: 3px;
         --spacing-lg: 4px;
         --spacing-xl: 6px;
         --spacing-2xl: 8px;
       }

       .compact-mode .settings-container {
         padding: 0.125rem;
       }

       .compact-mode .page-title {
         font-size: 1rem;
         margin-bottom: 0.125rem;
         padding: 0.125rem 0;
       }

       .compact-mode .page-subtitle {
         font-size: 0.625rem;
         margin-bottom: 0.25rem;
         opacity: 0.6;
       }

       .compact-mode .section-title {
         font-size: var(--font-size-base);
         margin-bottom: 0.125rem;
         padding: 0.125rem 0;
         border-bottom: 1px solid rgba(0,0,0,0.05);
       }

       .compact-mode .content-section {
         margin-bottom: 0.25rem;
         padding: 0.25rem;
         border-radius: 4px;
       }

       .compact-mode .setting-item {
         padding: 0.125rem 0;
         margin-bottom: 0.125rem;
         display: flex;
         align-items: center;
         justify-content: space-between;
       }

       .compact-mode .setting-info {
         flex: 1;
         min-width: 0;
       }

       .compact-mode .setting-label {
         font-size: var(--font-size-base);
         font-weight: 500;
         margin-bottom: 0.0625rem;
       }

       .compact-mode .setting-description {
         font-size: var(--font-size-base);
         opacity: 0.6;
         line-height: 1.1;
       }

       .compact-mode .budget-card {
         padding: 0.25rem;
         margin-bottom: 0.25rem;
       }

       .compact-mode .budget-name {
         font-size: var(--font-size-base);
         font-weight: 600;
       }

       .compact-mode .detail-item {
         margin-bottom: 0.0625rem;
         display: flex;
         justify-content: space-between;
         align-items: center;
       }

       .compact-mode .detail-label,
       .compact-mode .detail-value {
         font-size: var(--font-size-base);
       }

       .compact-mode .users-list,
       .compact-mode .invitations-list {
         gap: 0.125rem;
       }

       .compact-mode .user-item,
       .compact-mode .invitation-item {
         padding: 0.1875rem;
         border-radius: 3px;
       }

       .compact-mode .user-email,
       .compact-mode .invitation-email {
         font-size: var(--font-size-base);
         font-weight: 500;
       }

       .compact-mode .user-role,
       .compact-mode .invitation-date {
         font-size: var(--font-size-base);
         opacity: 0.6;
       }

       .compact-mode .privacy-actions {
         gap: 0.125rem;
         flex-wrap: wrap;
       }

       .compact-mode .privacy-button {
         padding: 0.1875rem 0.375rem;
         font-size: var(--font-size-base);
         border-radius: 3px;
       }

       .compact-mode .share-form {
         gap: 0.125rem;
         flex-direction: column;
       }

       .compact-mode .form-input {
         padding: 0.1875rem;
         font-size: var(--font-size-base);
         border-radius: 3px;
       }

       .compact-mode .share-button {
         padding: 0.1875rem 0.375rem;
         font-size: var(--font-size-base);
         border-radius: 3px;
       }

       .compact-mode .budgets-list {
         gap: 0.125rem;
       }

       .compact-mode .budget-item {
         padding: 0.1875rem;
         border-radius: 3px;
       }

       .compact-mode .budget-item-name {
         font-size: var(--font-size-base);
         font-weight: 500;
       }

       .compact-mode .budget-item-date {
         font-size: var(--font-size-base);
         opacity: 0.6;
       }

       .compact-mode .create-button {
         padding: 0.1875rem 0.375rem;
         font-size: var(--font-size-base);
         border-radius: 3px;
       }

       .compact-mode .about-info {
         gap: 0.0625rem;
       }

       .compact-mode .about-item {
         padding: 0.0625rem 0;
         display: flex;
         justify-content: space-between;
         align-items: center;
       }

       .compact-mode .about-label,
       .compact-mode .about-value {
         font-size: var(--font-size-base);
       }

       .compact-mode .app-actions {
         gap: 0.125rem;
         flex-wrap: wrap;
       }

       .compact-mode .app-button {
         padding: 0.1875rem 0.375rem;
         font-size: var(--font-size-base);
         border-radius: 3px;
       }

       .compact-mode .empty-state {
         padding: 0.25rem;
         text-align: center;
       }

       .compact-mode .empty-icon {
         font-size: 1rem;
         margin-bottom: 0.125rem;
       }

       .compact-mode .empty-text {
         font-size: 0.6875rem;
         font-weight: 500;
       }

       .compact-mode .empty-description {
         font-size: 0.5625rem;
         opacity: 0.6;
       }

       /* Toggle ultra-compacto */
       .compact-mode .toggle-switch {
         transform: scale(0.6);
         margin-left: 0.25rem;
       }

       /* Ícones ultra-compactos */
       .compact-mode .section-title::before {
         font-size: 0.75rem;
         margin-right: 0.25rem;
       }

       /* Layout em grid ultra-compacto */
       .compact-mode .settings-grid {
         gap: 0.25rem;
       }

       /* Cards ultra-compactos */
       .compact-mode .compact-card {
         padding: 0.25rem;
         margin-bottom: 0.125rem;
         border-radius: 3px;
       }
       
       /* Modo Micro-Compacto - Máxima compactação */
       .micro-mode {
         --spacing-xs: 0px;
         --spacing-sm: 1px;
         --spacing-md: 2px;
         --spacing-lg: 3px;
         --spacing-xl: 4px;
         --spacing-2xl: 6px;
       }
       
       .micro-mode .settings-container {
         padding: 0.0625rem;
       }
       
       .micro-mode .page-title {
         font-size: 0.875rem;
         margin-bottom: 0.0625rem;
         padding: 0.0625rem 0;
       }
       
       .micro-mode .page-subtitle {
         font-size: 0.5625rem;
         margin-bottom: 0.125rem;
         opacity: 0.5;
       }
       
       .micro-mode .section-title {
         font-size: 0.75rem;
         margin-bottom: 0.0625rem;
         padding: 0.0625rem 0;
         border-bottom: 1px solid rgba(0,0,0,0.05);
       }
       
       .micro-mode .content-section {
         margin-bottom: 0.125rem;
         padding: 0.125rem;
         border-radius: 2px;
       }
       
       .micro-mode .setting-item {
         padding: 0.0625rem 0;
         margin-bottom: 0.0625rem;
         display: flex;
         align-items: center;
         justify-content: space-between;
       }
       
       .micro-mode .setting-info {
         flex: 1;
         min-width: 0;
       }
       
       .micro-mode .setting-label {
         font-size: 0.625rem;
         font-weight: 500;
         margin-bottom: 0.03125rem;
       }
       
       .micro-mode .setting-description {
         font-size: 0.5rem;
         opacity: 0.5;
         line-height: 1;
       }
       
       .micro-mode .budget-card {
         padding: 0.125rem;
         margin-bottom: 0.125rem;
       }
       
       .micro-mode .budget-name {
         font-size: 0.6875rem;
         font-weight: 600;
       }
       
       .micro-mode .detail-item {
         margin-bottom: 0.03125rem;
         display: flex;
         justify-content: space-between;
         align-items: center;
       }
       
       .micro-mode .detail-label,
       .micro-mode .detail-value {
         font-size: 0.5rem;
       }
       
       .micro-mode .users-list,
       .micro-mode .invitations-list {
         gap: 0.0625rem;
       }
       
       .micro-mode .user-item,
       .micro-mode .invitation-item {
         padding: 0.09375rem;
         border-radius: 2px;
       }
       
       .micro-mode .user-email,
       .micro-mode .invitation-email {
         font-size: 0.625rem;
         font-weight: 500;
       }
       
       .micro-mode .user-role,
       .micro-mode .invitation-date {
         font-size: 0.5rem;
         opacity: 0.5;
       }
       
       .micro-mode .privacy-actions {
         gap: 0.0625rem;
         flex-wrap: wrap;
       }
       
       .micro-mode .privacy-button {
         padding: 0.09375rem 0.1875rem;
         font-size: 0.5625rem;
         border-radius: 2px;
       }
       
       .micro-mode .share-form {
         gap: 0.0625rem;
         flex-direction: column;
       }
       
       .micro-mode .form-input {
         padding: 0.09375rem;
         font-size: 0.625rem;
         border-radius: 2px;
       }
       
       .micro-mode .share-button {
         padding: 0.09375rem 0.1875rem;
         font-size: 0.5625rem;
         border-radius: 2px;
       }
       
       .micro-mode .budgets-list {
         gap: 0.0625rem;
       }
       
       .micro-mode .budget-item {
         padding: 0.09375rem;
         border-radius: 2px;
       }
       
       .micro-mode .budget-item-name {
         font-size: 0.625rem;
         font-weight: 500;
       }
       
       .micro-mode .budget-item-date {
         font-size: 0.5rem;
         opacity: 0.5;
       }
       
       .micro-mode .create-button {
         padding: 0.09375rem 0.1875rem;
         font-size: 0.5625rem;
         border-radius: 2px;
       }
       
       .micro-mode .about-info {
         gap: 0.03125rem;
       }
       
       .micro-mode .about-item {
         padding: 0.03125rem 0;
         display: flex;
         justify-content: space-between;
         align-items: center;
       }
       
       .micro-mode .about-label,
       .micro-mode .about-value {
         font-size: 0.5rem;
       }
       
       .micro-mode .app-actions {
         gap: 0.0625rem;
         flex-wrap: wrap;
       }
       
       .micro-mode .app-button {
         padding: 0.09375rem 0.1875rem;
         font-size: 0.5625rem;
         border-radius: 2px;
       }
       
       .micro-mode .empty-state {
         padding: 0.125rem;
         text-align: center;
       }
       
       .micro-mode .empty-icon {
         font-size: 0.75rem;
         margin-bottom: 0.0625rem;
       }
       
       .micro-mode .empty-text {
         font-size: 0.625rem;
         font-weight: 500;
       }
       
       .micro-mode .empty-description {
         font-size: 0.5rem;
         opacity: 0.5;
       }
       
       /* Toggle micro-compacto */
       .micro-mode .toggle-switch {
         transform: scale(0.5);
         margin-left: 0.125rem;
       }
       
       /* Ícones micro-compactos */
       .micro-mode .section-title::before {
         font-size: 0.625rem;
         margin-right: 0.125rem;
       }
       
       /* Layout em grid micro-compacto */
       .micro-mode .settings-grid {
         gap: 0.125rem;
       }
       
       /* Cards micro-compactos */
       .micro-mode .compact-card {
         padding: 0.125rem;
         margin-bottom: 0.0625rem;
         border-radius: 2px;
       }
       
                /* Botão micro-compacto ativo */
         .micro-mode .micro-compact-btn {
           background: var(--primary-color);
           color: white;
         }
         
         /* Modo Nano-Compacto - Compactação máxima */
         .nano-mode {
           --spacing-xs: 0px;
           --spacing-sm: 0px;
           --spacing-md: 1px;
           --spacing-lg: 2px;
           --spacing-xl: 3px;
           --spacing-2xl: 4px;
         }
         
         .nano-mode .settings-container {
           padding: 0.03125rem;
         }
         
         .nano-mode .page-title {
           font-size: 0.75rem;
           margin-bottom: 0.03125rem;
           padding: 0.03125rem 0;
         }
         
         .nano-mode .page-subtitle {
           font-size: 0.5rem;
           margin-bottom: 0.0625rem;
           opacity: 0.4;
         }
         
         .nano-mode .section-title {
           font-size: 0.6875rem;
           margin-bottom: 0.03125rem;
           padding: 0.03125rem 0;
           border-bottom: 1px solid rgba(0,0,0,0.03);
         }
         
         .nano-mode .content-section {
           margin-bottom: 0.0625rem;
           padding: 0.0625rem;
           border-radius: 1px;
         }
         
         .nano-mode .setting-item {
           padding: 0.03125rem 0;
           margin-bottom: 0.03125rem;
           display: flex;
           align-items: center;
           justify-content: space-between;
         }
         
         .nano-mode .setting-info {
           flex: 1;
           min-width: 0;
         }
         
         .nano-mode .setting-label {
           font-size: 0.5625rem;
           font-weight: 500;
           margin-bottom: 0.015625rem;
         }
         
         .nano-mode .setting-description {
           font-size: 0.4375rem;
           opacity: 0.4;
           line-height: 1;
         }
         
         .nano-mode .budget-card {
           padding: 0.0625rem;
           margin-bottom: 0.0625rem;
         }
         
         .nano-mode .budget-name {
           font-size: 0.625rem;
           font-weight: 600;
         }
         
         .nano-mode .detail-item {
           margin-bottom: 0.015625rem;
           display: flex;
           justify-content: space-between;
           align-items: center;
         }
         
         .nano-mode .detail-label,
         .nano-mode .detail-value {
           font-size: 0.4375rem;
         }
         
         .nano-mode .users-list,
         .nano-mode .invitations-list {
           gap: 0.03125rem;
         }
         
         .nano-mode .user-item,
         .nano-mode .invitation-item {
           padding: 0.046875rem;
           border-radius: 1px;
         }
         
         .nano-mode .user-email,
         .nano-mode .invitation-email {
           font-size: 0.5625rem;
           font-weight: 500;
         }
         
         .nano-mode .user-role,
         .nano-mode .invitation-date {
           font-size: 0.4375rem;
           opacity: 0.4;
         }
         
         .nano-mode .privacy-actions {
           gap: 0.03125rem;
           flex-wrap: wrap;
         }
         
         .nano-mode .privacy-button {
           padding: 0.046875rem 0.09375rem;
           font-size: 0.5rem;
           border-radius: 1px;
         }
         
         .nano-mode .share-form {
           gap: 0.03125rem;
           flex-direction: column;
         }
         
         .nano-mode .form-input {
           padding: 0.046875rem;
           font-size: 0.5625rem;
           border-radius: 1px;
         }
         
         .nano-mode .share-button {
           padding: 0.046875rem 0.09375rem;
           font-size: 0.5rem;
           border-radius: 1px;
         }
         
         .nano-mode .budgets-list {
           gap: 0.03125rem;
         }
         
         .nano-mode .budget-item {
           padding: 0.046875rem;
           border-radius: 1px;
         }
         
         .nano-mode .budget-item-name {
           font-size: 0.5625rem;
           font-weight: 500;
         }
         
         .nano-mode .budget-item-date {
           font-size: 0.4375rem;
           opacity: 0.4;
         }
         
         .nano-mode .create-button {
           padding: 0.046875rem 0.09375rem;
           font-size: 0.5rem;
           border-radius: 1px;
         }
         
         .nano-mode .about-info {
           gap: 0.015625rem;
         }
         
         .nano-mode .about-item {
           padding: 0.015625rem 0;
           display: flex;
           justify-content: space-between;
           align-items: center;
         }
         
         .nano-mode .about-label,
         .nano-mode .about-value {
           font-size: 0.4375rem;
         }
         
         .nano-mode .app-actions {
           gap: 0.03125rem;
           flex-wrap: wrap;
         }
         
         .nano-mode .app-button {
           padding: 0.046875rem 0.09375rem;
           font-size: 0.5rem;
           border-radius: 1px;
         }
         
         .nano-mode .empty-state {
           padding: 0.0625rem;
           text-align: center;
         }
         
         .nano-mode .empty-icon {
           font-size: 0.625rem;
           margin-bottom: 0.03125rem;
         }
         
         .nano-mode .empty-text {
           font-size: 0.5625rem;
           font-weight: 500;
         }
         
         .nano-mode .empty-description {
           font-size: 0.4375rem;
           opacity: 0.4;
         }
         
         /* Toggle nano-compacto */
         .nano-mode .toggle-switch {
           transform: scale(0.4);
           margin-left: 0.0625rem;
         }
         
         /* Ícones nano-compactos */
         .nano-mode .section-title::before {
           font-size: 0.5625rem;
           margin-right: 0.0625rem;
         }
         
         /* Layout em grid nano-compacto */
         .nano-mode .settings-grid {
           gap: 0.0625rem;
         }
         
         /* Cards nano-compactos */
         .nano-mode .compact-card {
           padding: 0.0625rem;
           margin-bottom: 0.03125rem;
           border-radius: 1px;
         }
         
         /* Botão nano-compacto ativo */
         .nano-mode .nano-compact-btn {
           background: var(--accent-color);
           color: white;
         }
         
         /* Otimizações nano-compactas adicionais */
         .nano-mode .settings-container {
           line-height: 0.9;
         }
         
         .nano-mode .content-section {
           line-height: 0.9;
         }
         
         .nano-mode .setting-item {
           line-height: 0.9;
         }
         
         .nano-mode .setting-label + .setting-description {
           margin-top: 0.015625rem;
         }
         
         .nano-mode .users-list > * + *,
         .nano-mode .invitations-list > * + *,
         .nano-mode .budgets-list > * + * {
           margin-top: 0.03125rem;
         }
         
         .nano-mode .privacy-button,
         .nano-mode .share-button,
         .nano-mode .create-button,
         .nano-mode .app-button {
           line-height: 0.9;
           min-height: auto;
         }
         
         .nano-mode .form-input {
           line-height: 0.9;
           min-height: auto;
         }

      /* Header da página */
      .settings-header {
        text-align: center;
        margin-bottom: 2rem;
        padding-bottom: 1.5rem;
        border-bottom: 2px solid #e5e7eb;
      }

      .page-title {
        font-size: 2rem;
        font-weight: 700;
        color: #1f2937;
        margin-bottom: 0.5rem;
        background: linear-gradient(135deg, #4f46e5, #7c3aed);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
      }

      .page-subtitle {
        color: #6b7280;
        font-size: 1rem;
        margin-bottom: 1.5rem;
      }

      .header-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
        flex-wrap: wrap;
      }

      .action-button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1.5rem;
        border-radius: 12px;
        font-weight: 600;
        transition: all 0.2s ease;
        border: none;
        cursor: pointer;
      }

      .action-button.primary {
        background: linear-gradient(135deg, #4f46e5, #7c3aed);
        color: white;
        box-shadow: 0 4px 15px rgba(79, 70, 229, 0.3);
      }

      .action-button.secondary {
        background: #f3f4f6;
        color: #374151;
        border: 1px solid #d1d5db;
      }

      .action-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
      }

      /* Seções de conteúdo */
      .content-section {
        margin-bottom: 2rem;
        padding-bottom: 1.5rem;
        border-bottom: none;
      }

      .section-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #374151;
        margin-bottom: 1rem;
        padding-left: 0.5rem;
        border-left: 4px solid #4f46e5;
      }

      /* Card do orçamento */
      .budget-card {
        background: linear-gradient(135deg, #f8fafc, #f1f5f9);
        border: 1px solid #e2e8f0;
        border-radius: 16px;
        padding: 1.5rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
      }

      .budget-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1rem;
      }

      .budget-icon {
        font-size: 2rem;
        opacity: 0.8;
      }

      .budget-info {
        flex: 1;
      }

      .budget-name {
        font-size: 1.25rem;
        font-weight: 600;
        color: #1f2937;
      }

      .budget-status {
        font-size: 0.875rem;
        color: #059669;
        font-weight: 500;
      }

      .edit-button {
        background: none;
        border: none;
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 8px;
        transition: background-color 0.2s ease;
      }

      .edit-button:hover {
        background: #f3f4f6;
      }

      .budget-details {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
      }

      .detail-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem;
        background: white;
        border-radius: 8px;
        border: 1px solid #e5e7eb;
      }

      .detail-label {
        font-size: 0.875rem;
        color: #6b7280;
      }

      .detail-value {
        font-weight: 500;
        color: #1f2937;
      }

      /* Listas de usuários e convites */
      .users-list,
      .invitations-list,
      .budgets-list {
        space-y: 0.75rem;
      }

      .user-item,
      .invitation-item,
      .budget-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        background: #f9fafb;
        border: 1px solid #e5e7eb;
        border-radius: 12px;
        transition: all 0.2s ease;
      }

      .user-item:hover,
      .invitation-item:hover,
      .budget-item:hover {
        background: #f3f4f6;
        transform: translateY(-1px);
      }

      .budget-item.active {
        border-color: #4f46e5;
        background: #f0f4ff;
      }

      .budget-item-status {
        font-size: 0.75rem;
        color: #059669;
        font-weight: 600;
        margin-top: 0.25rem;
      }

      .current-budget-badge {
        display: flex;
        align-items: center;
        gap: 0.25rem;
        padding: 0.5rem 0.75rem;
        background: #dcfce7;
        color: #059669;
        border-radius: 6px;
        font-size: 0.875rem;
        font-weight: 600;
      }

      .current-icon {
        font-size: 1rem;
      }

      .current-text {
        font-size: 0.75rem;
      }

      .user-info,
      .invitation-info,
      .budget-item-info {
        display: flex;
        align-items: center;
        gap: 1rem;
        flex: 1;
      }

      .user-avatar {
        font-size: 1.5rem;
        opacity: 0.7;
      }

      .user-email,
      .invitation-email,
      .budget-item-name {
        font-weight: 500;
        color: #1f2937;
      }

      .user-role,
      .invitation-date,
      .budget-item-date {
        font-size: 0.875rem;
        color: #6b7280;
        margin-top: 0.25rem;
      }

      .user-date {
        font-size: 0.75rem;
        color: #9ca3af;
        margin-top: 0.25rem;
      }

      .invitation-status {
        font-size: 0.875rem;
        color: #f59e0b;
        font-weight: 500;
        margin-top: 0.25rem;
      }

      .section-description {
        font-size: 0.875rem;
        color: #6b7280;
        margin-bottom: 1rem;
        font-style: italic;
      }

      .empty-state {
        text-align: center;
        padding: 2rem;
        background: #f9fafb;
        border: 2px dashed #d1d5db;
        border-radius: 12px;
        color: #6b7280;
      }

      .empty-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
        opacity: 0.5;
      }

      .empty-text {
        font-size: 1.125rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: #374151;
      }

      .empty-description {
        font-size: 0.875rem;
        color: #9ca3af;
      }

      .share-info {
        margin-top: 1rem;
        padding: 1rem;
        background: #f0f9ff;
        border: 1px solid #bae6fd;
        border-radius: 8px;
      }

      .info-item {
        display: flex;
        align-items: flex-start;
        gap: 0.5rem;
      }

      .info-icon {
        font-size: 1rem;
        margin-top: 0.125rem;
      }

      .info-text {
        font-size: 0.875rem;
        color: #0369a1;
        line-height: 1.4;
      }

      .color-theme-selector {
        display: flex;
        gap: 0.5rem;
        align-items: center;
      }

      .color-option {
        width: 2rem;
        height: 2rem;
        border-radius: 50%;
        border: 2px solid #e5e7eb;
        background: white;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
      }

      .color-option:hover {
        transform: scale(1.1);
        border-color: #9ca3af;
      }

      .color-option.active {
        border-color: #3b82f6;
        box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
      }

      .color-preview {
        width: 1.5rem;
        height: 1.5rem;
        border-radius: 50%;
        border: 1px solid rgba(0, 0, 0, 0.1);
      }

      .color-option.blue .color-preview {
        background: #3B82F6;
      }

      .color-option.green .color-preview {
        background: #10B981;
      }

      .color-option.purple .color-preview {
        background: #8B5CF6;
      }

      .color-option.orange .color-preview {
        background: #F59E0B;
      }

      /* Botões de ação */
      .remove-button,
      .cancel-button,
      .switch-button,
      .delete-button {
        background: none;
        border: none;
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 8px;
        transition: all 0.2s ease;
      }

      .remove-button:hover,
      .cancel-button:hover {
        background: #fee2e2;
        color: #dc2626;
      }

      .user-actions,
      .invitation-actions {
        display: flex;
        gap: 0.5rem;
        align-items: center;
      }

      .remove-user-button,
      .cancel-invitation-button,
      .resend-invitation-button {
        display: flex;
        align-items: center;
        gap: 0.25rem;
        padding: 0.5rem 0.75rem;
        border: none;
        border-radius: 6px;
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
      }

      .remove-user-button {
        background: #fee2e2;
        color: #dc2626;
      }

      .remove-user-button:hover {
        background: #fecaca;
        transform: translateY(-1px);
      }

      .cancel-invitation-button {
        background: #fee2e2;
        color: #dc2626;
      }

      .cancel-invitation-button:hover {
        background: #fecaca;
        transform: translateY(-1px);
      }

      .resend-invitation-button {
        background: #dbeafe;
        color: #2563eb;
      }

      .resend-invitation-button:hover {
        background: #bfdbfe;
        transform: translateY(-1px);
      }

      .remove-text,
      .cancel-text,
      .resend-text {
        font-size: 0.75rem;
      }

      .enter-budget-button {
        display: flex;
        align-items: center;
        gap: 0.25rem;
        padding: 0.5rem 0.75rem;
        background: linear-gradient(135deg, #10b981, #059669);
        color: white;
        border: none;
        border-radius: 6px;
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
  transition: all 0.2s ease;
  pointer-events: auto;
  touch-action: manipulation;
  width: 100%;
  position: relative;
  z-index: 2;
  -webkit-user-select: none;
  user-select: none;
      }

      /* Garantir cursor de mão e evitar seleção de texto dentro do botão */
      .enter-budget-button *,
      .budget-item[role="button"],
      .budget-item[role="button"] * {
        cursor: pointer !important;
        -webkit-user-select: none;
        user-select: none;
      }

      .enter-budget-button:hover {
        background: linear-gradient(135deg, #059669, #047857);
        transform: translateY(-1px);
        box-shadow: 0 4px 15px rgba(16, 185, 129, 0.3);
      }

      .enter-icon {
        font-size: 1rem;
      }

      .enter-text {
        font-size: 0.75rem;
      }

      .switch-button:hover {
        background: #dbeafe;
        color: #2563eb;
      }

      .delete-button:hover {
        background: #fee2e2;
        color: #dc2626;
      }

      .leave-button {
        display: flex;
        align-items: center;
        gap: 0.25rem;
        padding: 0.5rem 0.75rem;
        background: #fee2e2;
        color: #dc2626;
        border: none;
        border-radius: 6px;
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
      }

      .leave-button:hover {
        background: #fecaca;
        transform: translateY(-1px);
      }

      .leave-icon { font-size: 1rem; }
      .leave-text { font-size: 0.75rem; }

      .delete-button .delete-text { font-size: 0.75rem; margin-left: 0.25rem; }

      /* Ações do item de orçamento - layout responsivo */
      .budget-item-actions {
  display: grid;
        grid-template-columns: 1fr;
        gap: 0.35rem;
        align-items: stretch;
        min-width: 9rem;
  position: relative;
  z-index: 5;
      }

      .budget-item-actions .actions-row {
        display: flex;
        gap: 0.35rem;
        align-items: center;
        flex-wrap: wrap;
  position: relative;
  z-index: 1;
      }

      .budget-item-actions .actions-row.primary > .enter-budget-button,
      .budget-item-actions .actions-row.primary > .current-budget-badge {
        flex: 1 1 auto;
      }

      .budget-item-actions .actions-row.primary {
        width: 100%;
      }

      .budget-item-actions .actions-row.secondary {
        justify-content: flex-end;
        width: 100%;
      }

      .budget-item-actions .copy-id-button { white-space: nowrap; }

      @media (max-width: 480px) {
        .budget-item { flex-direction: column; align-items: stretch; }
        .budget-item-info { margin-bottom: 0.5rem; }
        .budget-item-actions { grid-template-columns: 1fr; }
        .budget-item-actions .actions-row.primary,
        .budget-item-actions .actions-row.secondary {
          justify-content: stretch;
        }
        .budget-item-actions .actions-row.secondary > .copy-id-button,
        .budget-item-actions .actions-row.secondary > .delete-button {
          flex: 1 1 auto;
        }
      }

      @media (min-width: 481px) {
        .budget-item-actions { grid-template-columns: auto auto; }
        .budget-item-actions .actions-row.primary { justify-content: flex-start; }
        .budget-item-actions .actions-row.secondary { justify-content: flex-end; }
      }

      /* Formulário de compartilhamento */

  /* Tornar cartões clicáveis visíveis como interativos */
  .budget-item[role="button"] { cursor: pointer; }
  .budget-item[role="button"]:hover { background: rgba(16,185,129,0.06); }
      .share-form {
        display: flex;
        gap: 1rem;
        align-items: end;
        flex-wrap: wrap;
      }

      .input-group {
        flex: 1;
        min-width: 250px;
      }

      .input-label {
        display: block;
        font-size: 0.875rem;
        font-weight: 500;
        color: #374151;
        margin-bottom: 0.5rem;
      }

      .form-input {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #d1d5db;
        border-radius: 8px;
        font-size: 1rem;
        transition: border-color 0.2s ease;
      }

      .form-input:focus {
        outline: none;
        border-color: #4f46e5;
        box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
      }

      .share-button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1.5rem;
        background: linear-gradient(135deg, #10b981, #059669);
        color: white;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
      }

      .share-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(16, 185, 129, 0.3);
      }

      /* Botão criar orçamento */
      .create-button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        width: 100%;
        padding: 1rem;
        background: linear-gradient(135deg, #4f46e5, #7c3aed);
        color: white;
        border: none;
        border-radius: 12px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        margin-top: 1rem;
      }

      .create-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(79, 70, 229, 0.3);
      }

      /* Ações de privacidade */
      .privacy-actions {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
      }

      .privacy-button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 1rem;
        background: #f9fafb;
        border: 1px solid #e5e7eb;
        border-radius: 12px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
      }

      .privacy-button:hover {
        background: #f3f4f6;
        transform: translateY(-1px);
      }

      .privacy-button.danger {
        color: #dc2626;
        border-color: #fecaca;
      }

      .privacy-button.danger:hover {
        background: #fee2e2;
      }

      /* Informações sobre o app */
      .about-info {
        space-y: 0.75rem;
      }

      .about-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem;
        background: #f9fafb;
        border: 1px solid #e5e7eb;
        border-radius: 8px;
      }

      .about-label {
        font-weight: 500;
        color: #374151;
      }

      .about-value {
        color: #6b7280;
      }

      /* Configurações de notificações e interface */
      .notifications-settings,
      .interface-settings,
      .privacy-settings {
        space-y: 1rem;
      }

      .setting-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        background: #f9fafb;
        border: 1px solid #e5e7eb;
        border-radius: 12px;
        transition: all 0.2s ease;
      }

      .setting-item:hover {
        background: #f3f4f6;
      }

      .setting-info {
        flex: 1;
      }

      .setting-label {
        font-weight: 600;
        color: #1f2937;
        margin-bottom: 0.25rem;
      }

      .setting-description {
        font-size: 0.875rem;
        color: #6b7280;
      }

      /* Toggle Switch */
      .toggle-switch {
        position: relative;
        display: inline-block;
        width: 50px;
        height: 24px;
      }

      .toggle-switch input {
        opacity: 0;
        width: 0;
        height: 0;
      }

      .toggle-slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: 0.4s;
        border-radius: 24px;
      }

      .toggle-slider:before {
        position: absolute;
        content: "";
        height: 18px;
        width: 18px;
        left: 3px;
        bottom: 3px;
        background-color: white;
        transition: 0.4s;
        border-radius: 50%;
      }

      input:checked + .toggle-slider {
        background-color: #4f46e5;
      }

      input:checked + .toggle-slider:before {
        transform: translateX(26px);
      }

      /* Botão de tema */
      .theme-button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        background: linear-gradient(135deg, #4f46e5, #7c3aed);
        color: white;
        border: none;
        border-radius: 8px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
      }

      .theme-button:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 15px rgba(79, 70, 229, 0.3);
      }

      /* Ações do app */
      .app-actions {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin-top: 1.5rem;
      }

      .app-button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 1rem;
        background: #f9fafb;
        border: 1px solid #e5e7eb;
        border-radius: 12px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
      }

      .app-button:hover {
        background: #f3f4f6;
        transform: translateY(-1px);
      }

      /* Responsividade */
      @media (max-width: 768px) {
        .settings-container {
          padding: 0.5rem;
        }

        .page-title {
          font-size: 1.5rem;
        }

        .header-actions {
          flex-direction: column;
        }

        .action-button {
          width: 100%;
          justify-content: center;
        }

        .share-form {
          flex-direction: column;
        }

        .input-group {
          min-width: auto;
        }

        .privacy-actions {
          grid-template-columns: 1fr;
        }

        .budget-details {
          grid-template-columns: 1fr;
        }

        .app-actions {
          grid-template-columns: 1fr;
        }

        .setting-item {
          flex-direction: column;
          align-items: flex-start;
          gap: 1rem;
        }

        .toggle-switch {
          align-self: flex-end;
        }

        .user-actions,
        .invitation-actions {
          flex-direction: column;
          gap: 0.5rem;
        }

        .remove-user-button,
        .cancel-invitation-button,
        .resend-invitation-button {
          width: 100%;
          justify-content: center;
        }

        .enter-budget-button {
          width: 100%;
          justify-content: center;
        }

        .current-budget-badge {
          width: 100%;
          justify-content: center;
        }
      }

      /* Estilos para modais de ajuda e avaliação */
      .help-content,
      .rating-content {
        max-width: 500px;
        margin: 0 auto;
      }

      .help-section {
        margin-bottom: 1.5rem;
      }

      .help-section h4 {
        color: #4f46e5;
        margin-bottom: 0.5rem;
        font-weight: 600;
      }

      .help-section ul {
        list-style: none;
        padding-left: 0;
      }

      .help-section li {
        padding: 0.25rem 0;
        color: #374151;
      }

      .help-section li:before {
        content: "•";
        color: #4f46e5;
        font-weight: bold;
        margin-right: 0.5rem;
      }

      .rating-stars {
        display: flex;
        justify-content: center;
        gap: 0.5rem;
        margin: 1rem 0;
      }

      .star {
        font-size: 2rem;
        cursor: pointer;
        transition: all 0.2s ease;
        color: #ccc;
      }

      .star:hover {
        transform: scale(1.1);
      }

      .rating-text {
        text-align: center;
        color: #6b7280;
        margin-bottom: 1rem;
      }

      .submit-rating-btn {
        width: 100%;
        padding: 0.75rem;
        background: linear-gradient(135deg, #4f46e5, #7c3aed);
        color: white;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
      }

      .submit-rating-btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 15px rgba(79, 70, 229, 0.3);
      }

      /* Dark theme overrides (inline to ensure precedence in Settings) */
      .dark .content-section { background: transparent !important; }

      /* Rows and cards inside sections */
      .dark .setting-item,
      .dark .about-item,
      .dark .detail-item {
        background: transparent !important;
        border: none !important;
        border-bottom: 1px solid #374151 !important; /* gray-700 */
        box-shadow: none !important;
      }

      /* Labels and descriptions */
      .dark .setting-label { color: #e5e7eb !important; }
      .dark .setting-description { color: #9ca3af !important; }
      .dark .about-label { color: #9ca3af !important; }
      .dark .about-value { color: #e5e7eb !important; }

      /* App action buttons */
      .dark .app-button {
        background: #111827 !important; /* gray-900 */
        border: 1px solid #374151 !important; /* gray-700 */
        color: #e5e7eb !important; /* text-gray-200 */
      }
      .dark .app-button:hover { background: #1f2937 !important; /* gray-800 */ }
      .dark .app-button .app-text { color: #e5e7eb !important; }

      /* Toggles */
      .dark .toggle-slider { background-color: #374151 !important; }
      .dark .toggle-slider:before { background-color: #e5e7eb !important; }
      .dark input:checked + .toggle-slider { background-color: var(--primary-color, #4f46e5) !important; }
    </style>
  `;

<<<<<<< HEAD
  // Sinalizar novidades ao usuário com uma ação rápida
  try {
    const seen = (() => { try { return localStorage.getItem('lastSeenChangelogVersion') || ''; } catch { return ''; } })();
    const hasNew = seen !== __appVersion;
    if (hasNew && window.Snackbar) {
      window.Snackbar({
        message: `Atualizado para ${__appVersion}. Ver o que mudou?`,
        type: 'info',
        duration: 6000,
        actionText: 'Abrir',
        onAction: () => { try { window.openChangelogModal && window.openChangelogModal(); } catch {} }
      });
    }
  } catch {}

  // Botão: O que mudou — abre modal com changelog
  try {
    if (typeof window.openChangelogModal !== 'function') {
      window.openChangelogModal = async () => {
        try {
          const { getChangeLog, getLatestChangeLog } = await import('@app/changelog.js');
          const info = getChangeLog(__appVersion) || getLatestChangeLog();
          const title = info?.title || `Novidades — versão ${__appVersion}`;
          const lastFive = (info?.items || []).slice(0, 5);
          const items = lastFive.map(i => `<li class=\"mb-1\">${i}</li>`).join('');
          const content = `
            <div class=\"text-sm text-gray-700 dark:text-gray-200\">
              ${info?.date ? `<div class=\"text-xs text-gray-500 mb-2\">${new Date(info.date).toLocaleDateString('pt-BR')}</div>` : ''}
              <ul class=\"list-disc pl-5\">${items || '<li>Nesta versão, aplicamos melhorias e correções.</li>'}</ul>
            </div>
          `;
          const { Modal } = await import('@js/ui/Modal.js');
          const node = Modal({ title, content, onClose: () => node?.remove() });
          document.body.appendChild(node);
          // Persistir que o changelog desta versão foi visto
          try {
            localStorage.setItem('lastSeenChangelogVersion', __appVersion);
          } catch {}
        } catch (e) {
          console.error('Erro ao abrir changelog:', e);
          window.Snackbar?.({ message: 'Não foi possível abrir as novidades agora.', type: 'error' });
        }
      };
    }
  } catch {}

  // Deep-link: rolagem automática para seção (?section=)
  try {
    const hash = String(window.location?.hash || '');
    const queryIdx = hash.indexOf('?');
    if (queryIdx !== -1) {
      const params = new URLSearchParams(hash.substring(queryIdx + 1));
      const section = params.get('section');
      const alias = (section || '').toLowerCase();
      const id = alias && (
        alias.includes('notif') ? 'section-notifications'
          : (alias.includes('sobre') || alias.includes('about') || alias.includes('app')) ? 'section-about'
            : (alias.includes('dados') || alias.includes('privacidade') || alias.includes('data')) ? 'section-data-privacy'
              : (alias.includes('seguranca') || alias.includes('segurança') || alias.includes('privacy')) ? 'section-privacy-security'
                : ''
      );
      if (id) {
        setTimeout(() => {
          const el = document.getElementById(id);
          if (el && typeof el.scrollIntoView === 'function') {
            el.scrollIntoView({ behavior: 'smooth', block: 'start' });
          }
        }, 0);
      }
    }
  } catch {}

  // Atualizar status do SW na seção Sobre o App
  try {
    if (typeof window !== 'undefined') {
      setTimeout(() => {
        try {
          if (typeof window !== 'undefined' && typeof window.updateSwStatus === 'function') {
            window.updateSwStatus();
          }
        } catch {}
      }, 50);
    }
  } catch {}
  // Atualizar conectividade e "última verificação"
  try {
    if (typeof window !== 'undefined') {
      setTimeout(() => {
        try {
          if (typeof window !== 'undefined' && typeof window.updateNetworkStatus === 'function') {
            window.updateNetworkStatus();
          }
        } catch {}
        try {
          const last = (typeof localStorage !== 'undefined' && localStorage.getItem) ? localStorage.getItem('sw_last_check') : null;
          const el = (typeof document !== 'undefined' && document.getElementById) ? document.getElementById('sw-last-check') : null;
          if (last && el) el.textContent = new Date(parseInt(last, 10)).toLocaleString();
        } catch {}
      }, 20);
    }
  } catch {}

  // Pós-render: vincular handler de logout de forma programática (robusto em jsdom)
  try {
    const logoutBtn = document.getElementById('btn-logout');
    if (logoutBtn && typeof window.handleLogoutClick === 'function' && !logoutBtn.__boundLogout) {
      logoutBtn.addEventListener('click', (e) => { try { e?.preventDefault?.(); } catch {} window.handleLogoutClick(); });
      logoutBtn.__boundLogout = true;
    }
  } catch (e) {
    console.warn('SettingsPage: erro ao vincular handler de logout:', e);
  }

  // Pós-render: hidratar controles de Snackbar com prefs persistidas
  try {
    const { loadPrefs, savePrefs, applyPrefs } = await import('@features/ui/snackbarPrefs.js');
    const prefs = loadPrefs();
    const byId = (id) => document.getElementById(id);
    const setVal = (id, v) => { const el = byId(id); if (!el) return; if (el.type === 'checkbox') { el.checked = !!v; } else { el.value = v ?? ''; } };
    setVal('snk-duration', prefs.defaultDuration);
    setVal('snk-bottom', prefs.bottom);
    setVal('snk-position', prefs.position);
    setVal('snk-align', prefs.align);
    setVal('snk-hoverPause', prefs.hoverPause);
    setVal('snk-maxQueue', prefs.maxQueue);
    setVal('snk-cooldown', prefs.cooldownMs);

    // Expor handlers globais simples para os botões
    if (typeof window.saveSnackbarPrefs !== 'function') {
      window.saveSnackbarPrefs = function saveSnackbarPrefs() {
        try {
          const next = {
            defaultDuration: parseInt(byId('snk-duration')?.value || '3000', 10),
            bottom: parseInt(byId('snk-bottom')?.value || '80', 10),
            position: String(byId('snk-position')?.value || 'bottom'),
            align: String(byId('snk-align')?.value || 'center'),
            hoverPause: !!byId('snk-hoverPause')?.checked,
            maxQueue: parseInt(byId('snk-maxQueue')?.value || '5', 10),
            cooldownMs: parseInt(byId('snk-cooldown')?.value || '500', 10),
          };
          const normalized = savePrefs(next);
          applyPrefs(normalized);
          window.Snackbar?.({ message: 'Preferências de toasts aplicadas', type: 'success' });
        } catch (e) {
          console.warn('saveSnackbarPrefs error:', e);
          window.Snackbar?.({ message: 'Falha ao aplicar preferências', type: 'error' });
        }
      };
    }
    // Hidratador para toggle de Notificações do Sistema
    try {
      const notifEl = byId('notif-toasts-enabled');
      const loadNotifPref = () => {
        try { const v = localStorage.getItem('notif_toasts_enabled'); return v === null ? true : v === 'true'; } catch { return true; }
      };
      const saveNotifPref = (val) => {
        try { localStorage.setItem('notif_toasts_enabled', val ? 'true' : 'false'); } catch {}
      };
      if (notifEl) {
        notifEl.checked = !!loadNotifPref();
        notifEl.addEventListener('change', (e) => {
          try { saveNotifPref(!!notifEl.checked); window.Snackbar?.({ message: notifEl.checked ? 'Notificações do sistema ativadas' : 'Notificações do sistema desativadas', type: 'info' }); } catch {}
        });
      }
      if (typeof window.setSystemNotificationsEnabled !== 'function') {
        window.setSystemNotificationsEnabled = function (v) { try { saveNotifPref(!!v); if (notifEl) notifEl.checked = !!v; } catch {} };
      }
    } catch (e) {
      console.warn('SettingsPage: erro ao hidratar toggle de notificações do sistema', e);
    }
    if (typeof window.resetSnackbarPrefs !== 'function') {
      window.resetSnackbarPrefs = function resetSnackbarPrefs() {
        try {
          import('@features/ui/snackbarPrefs.js').then(({ defaults }) => {
            localStorage.removeItem('snackbar_prefs_v1');
            const normalized = applyPrefs(defaults);
            setVal('snk-duration', normalized.defaultDuration);
            setVal('snk-bottom', normalized.bottom);
            setVal('snk-position', normalized.position);
            setVal('snk-align', normalized.align);
            setVal('snk-hoverPause', normalized.hoverPause);
            setVal('snk-maxQueue', normalized.maxQueue);
            setVal('snk-cooldown', normalized.cooldownMs);
            window.Snackbar?.({ message: 'Preferências restauradas', type: 'info' });
          }).catch((e) => {
            console.warn('resetSnackbarPrefs dynamic import error:', e);
            window.Snackbar?.({ message: 'Falha ao restaurar preferências', type: 'error' });
          });
        } catch (e) {
          console.warn('resetSnackbarPrefs error:', e);
          window.Snackbar?.({ message: 'Falha ao restaurar preferências', type: 'error' });
        }
      };
    }
  } catch (e) {
    console.warn('Settings: falha ao hidratar controles de Snackbar:', e);
  }

=======
>>>>>>> origin/master
  // Injetar indicador de período somente leitura
  try {
    const { createPeriodIndicator } = await import('../ui/PeriodIndicator.js');
    const holder = document.getElementById('settings-period-indicator');
    if (holder) {
      holder.innerHTML = '';
      holder.appendChild(createPeriodIndicator({ readonly: true }));
    }
  } catch (e) {
    console.warn('Settings PeriodIndicator indisponível:', e);
  }

  // Configurar evento do botão de tema
  const themeToggleBtn = document.getElementById('theme-toggle-btn');
  if (themeToggleBtn) {
    themeToggleBtn.addEventListener('click', () => {
      if (window.setupThemeToggle) {
        window.setupThemeToggle();
      }
    });
  }
}

// Compat: expor no escopo global para integração com roteador legado
try {
  if (typeof window !== 'undefined') {
    window.renderSettings = renderSettings;
<<<<<<< HEAD
    // Re-render Settings ao mudar o período, se a aba estiver ativa
    try {
      const { eventBus } = await import('@core/events/eventBus.js');
      if (!window.__settingsPeriodListenerBound) {
        window.__settingsPeriodListenerBound = true;
        eventBus.on('period:changed', () => {
          try {
            const h = (window.location.hash || '').split('?')[0];
            if (h === '#/settings') {
              queueMicrotask(() => { try { renderSettings(); } catch {} });
            }
          } catch {}
        });
      }
    } catch {}
  }
} catch {}

// Utilitário: só re-renderizar Configurações se a rota atual for /settings
function rerenderSettingsIfVisible(delay = 0) {
  try {
    const raw = window.location?.hash || '';
    const h = raw.split('?')[0];
    const onSettings = h === '#/settings';
    if (!onSettings) return;
    const exec = () => { try { window.renderSettings && window.renderSettings(); } catch {} };
    if (delay > 0) setTimeout(exec, delay); else exec();
  } catch {}
}

=======
  }
} catch {}

>>>>>>> origin/master
// Funções auxiliares implementadas - Expor para escopo global
window.editBudgetName = function() {
  const currentBudget = window.appState?.currentBudget;
  if (!currentBudget) {
    window.Snackbar?.({ message: 'Nenhum orçamento selecionado', type: 'warning' });
    return;
  }

  const newName = prompt('Digite o novo nome do orçamento:', currentBudget.nome);
  if (newName && newName.trim() && newName !== currentBudget.nome) {
    (async () => {
      try {
        if (typeof window.updateBudget === 'function') {
          await window.updateBudget(currentBudget.id, { nome: newName.trim() });
          // refletir imediatamente no estado local
          const idx = (window.appState?.budgets || []).findIndex(b => b.id === currentBudget.id);
          if (idx !== -1) window.appState.budgets[idx].nome = newName.trim();
          if (window.appState?.currentBudget) window.appState.currentBudget.nome = newName.trim();
          window.Snackbar?.({ message: 'Orçamento atualizado!', type: 'success' });
          rerenderSettingsIfVisible(300);
        } else {
          window.Snackbar?.({ message: 'Ação indisponível no momento', type: 'error' });
        }
      } catch (e) {
        console.error('Erro ao renomear orçamento:', e);
        window.Snackbar?.({ message: 'Erro ao renomear orçamento', type: 'error' });
      }
    })();
  }
};

window.removeUserFromBudget = function(uid, email) {
  if (confirm(`Tem certeza que deseja remover o usuário "${email}" do orçamento?\n\nEsta ação irá revogar o acesso deste usuário ao orçamento.`)) {
    console.log('Remover usuário do orçamento:', uid, email);

    // Implementar remoção do usuário do orçamento
    if (window.appState?.currentBudget) {
      const budgetId = window.appState.currentBudget.id;

      // Remover da lista de usuários permitidos
      const updatedUsers = window.appState.currentBudget.usuariosPermitidos?.filter(userId => userId !== uid) || [];

      // Atualizar no Firebase
      const budgetRef = doc(db, 'budgets', budgetId);
      updateDoc(budgetRef, {
        usuariosPermitidos: updatedUsers
      }).then(() => {
        window.Snackbar?.({
          message: `Usuário "${email}" removido com sucesso!`,
          type: 'success'
        });

        // Recarregar a página de configurações
        setTimeout(() => {
          rerenderSettingsIfVisible();
        }, 1000);
      }).catch(error => {
        console.error('Erro ao remover usuário:', error);
        window.Snackbar?.({
          message: 'Erro ao remover usuário. Tente novamente.',
          type: 'error'
        });
      });
    }
  }
};

window.removeUser = function(uid) {
  // Função legada - redirecionar para a nova função
  window.removeUserFromBudget(uid, 'Usuário');
};

window.cancelInvitation = function(inviteId, email) {
  if (confirm(`Tem certeza que deseja cancelar o convite enviado para "${email}"?\n\nEste convite será removido permanentemente.`)) {
    console.log('Cancelar convite:', inviteId, email);

    // Implementar cancelamento do convite
    const invitationRef = doc(db, 'budgetInvitations', inviteId);
    deleteDoc(invitationRef).then(() => {
      window.Snackbar?.({
        message: `Convite para "${email}" cancelado com sucesso!`,
        type: 'success'
      });

      // Recarregar a página de configurações
      setTimeout(() => {
        rerenderSettingsIfVisible();
      }, 1000);
    }).catch(error => {
      console.error('Erro ao cancelar convite:', error);
      window.Snackbar?.({
        message: 'Erro ao cancelar convite. Tente novamente.',
        type: 'error'
      });
    });
  }
};

window.resendInvitation = function(inviteId, email) {
  if (confirm(`Deseja reenviar o convite para "${email}"?\n\nUm novo email será enviado para o usuário.`)) {
    console.log('Reenviar convite:', inviteId, email);

    // Implementar reenvio do convite
    window.Snackbar?.({
      message: `Convite reenviado para "${email}"!`,
      type: 'success'
    });

    // Aqui você pode implementar a lógica de reenvio
    // Por exemplo, atualizar a data do convite e enviar email
  }
};

// shareBudget (mock antigo) removido; usamos inviteUserToBudget do app.js

<<<<<<< HEAD
window.enterBudget = async function(budgetId, budgetName) {
  try {
    // 0) Garantir usuário autenticado
    const user = window.appState?.currentUser;
    if (!user) {
      window.Snackbar?.({ message: 'Faça login para entrar no orçamento.', type: 'warning' });
      try { if (typeof window.toggleLoginPage === 'function') window.toggleLoginPage(true); } catch {}
      return;
    }

    // 1) Resolver orçamento: appState -> getById -> recarregar lista
    let budget = window.appState?.budgets?.find(b => b.id === budgetId);
    if (!budget) {
      try {
        const { getById, loadUserBudgets } = await import('@features/budgets/service.js');
        budget = await getById(budgetId);
        if (!budget) {
          await loadUserBudgets(user.uid);
          budget = window.appState?.budgets?.find(b => b.id === budgetId) || null;
        }
      } catch (resolveErr) {
        console.warn('Não foi possível resolver orçamento por ID:', resolveErr);
      }
    }
    if (!budget) {
      window.Snackbar?.({ message: 'Orçamento não encontrado para este usuário.', type: 'error' });
      return;
    }

    // Definir nome amigável (se não veio por arg, usa do orçamento resolvido)
    const friendlyName = budgetName || (budget && (budget.nome || budget.name)) || 'Orçamento';
    // Feedback imediato
    window.Snackbar?.({ message: `Entrando no orçamento "${friendlyName}"...`, type: 'info' });

    // 2) Definir orçamento atual via serviço moderno (emite budget:changed e recarrega dados de forma centralizada)
    try {
      const mod = await import('@features/budgets/service.js');
      if (typeof mod.setCurrentBudgetGlobal === 'function') {
        await mod.setCurrentBudgetGlobal(budget);
      } else if (typeof mod.setCurrentBudget === 'function') {
        mod.setCurrentBudget(budget);
      } else if (typeof window.setCurrentBudget === 'function') {
        await window.setCurrentBudget(budget);
      } else {
        window.appState = window.appState || {};
        window.appState.currentBudget = budget;
      }
    } catch (e) {
      console.warn('Falha ao definir orçamento via serviço, aplicando fallback mínimo:', e);
      window.appState = window.appState || {};
      window.appState.currentBudget = budget;
    }

    // Observação: não reiniciamos listeners legados nem forçamos reloads locais aqui.
    // O fluxo central responde ao evento budget:changed, limpa estado, recarrega dados e inicia listeners corretos.
    try { console.log('[EnterBudget] datasets:', { tx: window.appState?.transactions?.length || 0, cat: window.appState?.categories?.length || 0, rec: window.appState?.recorrentes?.length || 0 }); } catch {}

    // 4.1) Se o mês selecionado não tiver lançamentos, ir para o mês mais recente com dados
    try {
      const txs = Array.isArray(window.appState?.transactions) ? window.appState.transactions : [];
      const toDate = (v) => {
        if (!v) return null;
        if (v.toDate) return v.toDate();
        if (typeof v === 'object' && v.seconds) return new Date(v.seconds * 1000);
        const d = new Date(v);
        return isNaN(d) ? null : d;
      };
      const current = typeof window.getSelectedPeriod === 'function' ? window.getSelectedPeriod() : null;
      const currentKey = current ? `${current.year}-${String(current.month).padStart(2,'0')}` : null;
      const monthKey = (d) => `${d.getFullYear()}-${String(d.getMonth()+1).padStart(2,'0')}`;
      const txsWithDate = txs.map(t => ({ t, d: toDate(t.createdAt) || toDate(t.data) })).filter(x => !!x.d);
      const hasInCurrent = currentKey ? txsWithDate.some(x => monthKey(x.d) === currentKey) : false;
      if (!hasInCurrent && txsWithDate.length) {
        // Pegar o mês mais recente com dados
        txsWithDate.sort((a,b) => b.d - a.d);
        const latest = txsWithDate[0].d;
        if (typeof window.setSelectedPeriod === 'function') {
          window.setSelectedPeriod(latest.getFullYear(), latest.getMonth()+1, { path: '/dashboard' });
        }
      }
    } catch {}

    // 5) Navegar para o Dashboard para visualizar os dados do orçamento e forçar re-render
    try { window.location.hash = '#/dashboard'; } catch {}
    try { if (window.renderDashboard) { setTimeout(() => window.renderDashboard(), 100); } } catch {}
    try { if (window.renderBottomNav) { setTimeout(() => window.renderBottomNav('/dashboard'), 150); } } catch {}

    // 6) Feedback de sucesso e atualizar Configurações (se ainda visível)
    window.Snackbar?.({ message: `Orçamento "${friendlyName}" ativado com sucesso!`, type: 'success' });
    // Dica: se não houver lançamentos visíveis no mês atual
    try {
      const txs = Array.isArray(window.appState?.transactions) ? window.appState.transactions : [];
      if (txs.length === 0) {
        window.Snackbar?.({ message: 'Nenhum lançamento encontrado. Use o seletor de mês no topo ou migre dados antigos em Configurações.', type: 'info' });
      }
    } catch {}
    rerenderSettingsIfVisible(300);
  } catch (e) {
    console.error('Erro ao entrar no orçamento:', e);
    window.Snackbar?.({ message: 'Erro ao entrar no orçamento. Tente novamente.', type: 'error' });
  }
};
=======
window.enterBudget = function(budgetId, budgetName) {
  const budget = window.appState?.budgets?.find(b => b.id === budgetId);
  if (budget && window.setCurrentBudget) {
    // Mostrar loading
    window.Snackbar?.({ 
      message: `Entrando no orçamento "${budgetName}"...`, 
      type: 'info' 
    });
    
    // Trocar para o orçamento
    window.setCurrentBudget(budget);
    
    // Feedback de sucesso
    setTimeout(() => {
      window.Snackbar?.({ 
        message: `Orçamento "${budgetName}" ativado com sucesso!`, 
        type: 'success' 
      });
      
      // Recarregar a página de configurações para atualizar o estado
      setTimeout(() => {
        window.renderSettings();
      }, 500);
    }, 1000);
  }
}
>>>>>>> origin/master

window.switchBudget = function(budgetId) {
  // Função legada - redirecionar para a nova função
  const budget = window.appState?.budgets?.find(b => b.id === budgetId);
  if (budget) {
    window.enterBudget(budgetId, budget.nome);
  }
};

window.deleteBudgetFromSettings = function(budgetId) {
  const budget = window.appState?.budgets?.find(b => b.id === budgetId);
  if (!budget) return;

  if (confirm(`Tem certeza que deseja excluir o orçamento "${budget.nome}"?\n\n⚠️ Esta ação não pode ser desfeita e você perderá todos os dados deste orçamento.`)) {
    if (window.deleteBudget) {
      window.deleteBudget(budgetId)
        .then(async () => {
          rerenderSettingsIfVisible();
        })
        .catch(error => {
          console.error('Erro ao excluir orçamento:', error);
        });
    }
  }
};

window.createNewBudget = function() {
  const budgetName = prompt('Digite o nome do novo orçamento:');
  if (budgetName && budgetName.trim()) {
    if (window.addBudget) {
      window.addBudget(budgetName.trim())
        .then(async () => {
          rerenderSettingsIfVisible();
        })
        .catch(error => {
          console.error('Erro ao criar orçamento:', error);
        });
    }
  }
};

window.copyBudgetId = async function(budgetId, btnEl) {
  try {
    if (!budgetId) return;
    if (navigator.clipboard && navigator.clipboard.writeText) {
      await navigator.clipboard.writeText(budgetId);
    } else {
      // Fallback
      const ta = document.createElement('textarea');
      ta.value = budgetId;
      document.body.appendChild(ta);
      ta.select();
      document.execCommand('copy');
      document.body.removeChild(ta);
    }
    window.Snackbar?.({ message: 'ID copiado para a área de transferência', type: 'success' });
    // Visual feedback no botão
    if (btnEl && btnEl instanceof HTMLElement) {
      const original = btnEl.textContent;
      btnEl.textContent = 'Copiado!';
      btnEl.disabled = true;
      btnEl.classList.add('opacity-70');
      setTimeout(() => {
        btnEl.textContent = original || 'Copiar ID';
        btnEl.disabled = false;
        btnEl.classList.remove('opacity-70');
      }, 1200);
    }
  } catch (e) {
    console.error('Falha ao copiar ID:', e);
    window.Snackbar?.({ message: 'Não foi possível copiar o ID', type: 'error' });
  }
};

window.exportData = function() {
  console.log('📤 Iniciando exportação de dados...');

  // Verificar se existe função global de exportação
  if (window.showExportOptions) {
    console.log('🔧 Usando função global de exportação');
    window.showExportOptions();
    return;
  }

  // Fallback: mostrar modal básico de exportação
  console.log('📋 Mostrando modal de exportação básico');

  const exportContent = `
    <div class="export-modal">
      <h3>📤 Exportar Dados</h3>
      <p>Escolha o formato de exportação:</p>
      
      <div class="export-options">
        <button onclick="exportToJSON()" class="export-option">
          <span class="export-icon">📄</span>
          <span class="export-text">JSON (Backup Completo)</span>
        </button>
        
        <button onclick="exportToExcel()" class="export-option">
          <span class="export-icon">📊</span>
          <span class="export-text">Excel (Planilha)</span>
        </button>
        
        <button onclick="exportToPDF()" class="export-option">
          <span class="export-icon">📋</span>
          <span class="export-text">PDF (Relatório)</span>
        </button>
      </div>
      
      <button onclick="closeModal()" class="close-button">Fechar</button>
    </div>
  `;

  // Mostrar modal usando função global se disponível
  if (window.showModal) {
    window.showModal(exportContent);
  } else {
    // Fallback: alert simples
    alert('Funcionalidade de exportação em desenvolvimento. Use a função global showExportOptions.');
  }
};

window.importData = function() {
  const input = document.createElement('input');
  input.type = 'file';
  input.accept = '.json';
  input.onchange = function(e) {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = function(e) {
        try {
          const data = JSON.parse(e.target.result);
          console.log('Dados importados:', data);
          window.Snackbar?.({ message: 'Funcionalidade de importação em desenvolvimento', type: 'info' });
        } catch {
          window.Snackbar?.({ message: 'Arquivo inválido', type: 'error' });
        }
      };
      reader.readAsText(file);
    }
  };
  input.click();
};

window.clearData = function() {
  if (confirm('⚠️ ATENÇÃO: Esta ação irá limpar TODOS os dados do orçamento atual!\n\nTem certeza que deseja continuar?\n\nEsta ação não pode ser desfeita.')) {
    if (confirm('ÚLTIMA CONFIRMAÇÃO: Você tem certeza absoluta que deseja limpar todos os dados?')) {
      console.log('Limpar dados do orçamento');
      window.Snackbar?.({ message: 'Funcionalidade em desenvolvimento', type: 'info' });
    }
  }
};

// Funções para as novas funcionalidades - Expor para escopo global
window.toggleTheme = function() {
  console.log('🎨 Alternando tema...');

  // Alternância manual do tema (sem depender da função global)
  const html = document.documentElement;
  const body = document.body;
  const isDark = html.classList.contains('dark') || body.classList.contains('dark');

  console.log('🌙 Estado atual do tema:', isDark ? 'escuro' : 'claro');

  if (isDark) {
    // Mudar para tema claro
    html.classList.remove('dark');
    body.classList.remove('dark');
    localStorage.setItem('theme', 'light');
    localStorage.setItem('darkMode', 'false');
    console.log('☀️ Tema alterado para claro');
  } else {
    // Mudar para tema escuro
    html.classList.add('dark');
    body.classList.add('dark');
    localStorage.setItem('theme', 'dark');
    localStorage.setItem('darkMode', 'true');
    console.log('🌙 Tema alterado para escuro');
  }

  // Atualizar ícone do botão se existir
  const themeButton = document.querySelector('.theme-button .theme-icon');
  if (themeButton) {
    themeButton.textContent = isDark ? '☀️' : '🌙';
    console.log('🔧 Ícone atualizado para:', isDark ? '☀️' : '🌙');
  } else {
    console.log('🔧 Botão de tema não encontrado');
  }

  // Feedback visual
  window.Snackbar?.({
    message: `Tema alterado para ${isDark ? 'claro' : 'escuro'}`,
    type: 'success'
  });

  // Forçar atualização de elementos que podem precisar de sincronização
  setTimeout(() => {
    const elements = document.querySelectorAll('[class*="dark:"]');
    elements.forEach(element => {
      element.offsetHeight; // Forçar reflow
    });
    console.log('🎨 Elementos de tema atualizados');
  }, 100);
};

// Função para inicializar o ícone do tema baseado no estado atual
window.initializeThemeIcon = function() {
  const html = document.documentElement;
  const body = document.body;
  const isDark = html.classList.contains('dark') || body.classList.contains('dark');

  const themeButton = document.querySelector('.theme-button .theme-icon');
  if (themeButton) {
    themeButton.textContent = isDark ? '🌙' : '☀️';
    console.log('🔧 Ícone inicializado para:', isDark ? '🌙' : '☀️');
  }
};

// Função para definir o tema de cores
window.setColorTheme = function(color) {
  console.log('🎨 Definindo tema de cor:', color);

  // Remover classes ativas de todos os botões
  document.querySelectorAll('.color-option').forEach(btn => {
    btn.classList.remove('active');
  });

  // Adicionar classe ativa ao botão selecionado
  const selectedButton = document.querySelector(`.color-option.${color}`);
  if (selectedButton) {
    selectedButton.classList.add('active');
  }

  // Aplicar o tema de cor ao documento
  document.documentElement.setAttribute('data-theme-color', color);

  // Salvar preferência no localStorage
  localStorage.setItem('colorTheme', color);

  // Feedback visual
  window.Snackbar?.({
    message: `Tema de cor alterado para ${color}`,
    type: 'success'
  });

  console.log('✅ Tema de cor aplicado:', color);
};

// Função para inicializar o tema de cores
window.initializeColorTheme = function() {
  const savedColor = localStorage.getItem('colorTheme') || 'blue';
  console.log('🎨 Inicializando tema de cor:', savedColor);

  // Aplicar tema salvo
  window.setColorTheme(savedColor);
};

// Função para alternar modo compacto
window.toggleCompactMode = function(enabled) {
  console.log('📱 Alternando modo ultra-compacto:', enabled);

  const container = document.querySelector('.settings-container');
  const appContainer = document.querySelector('.app-container');
  const body = document.body;

  if (!container) return;

  if (enabled) {
    container.classList.add('compact-mode');
    if (appContainer) appContainer.classList.add('compact-mode');
    body.classList.add('compact-mode');
    localStorage.setItem('compactMode', 'true');
    console.log('✅ Modo compacto ativado');
  } else {
    container.classList.remove('compact-mode');
    container.classList.remove('micro-mode'); // Remove micro-mode também
    container.classList.remove('nano-mode'); // Remove nano-mode também
    if (appContainer) {
      appContainer.classList.remove('compact-mode');
      appContainer.classList.remove('micro-mode');
      appContainer.classList.remove('nano-mode');
    }
    body.classList.remove('compact-mode');
    body.classList.remove('micro-mode');
    body.classList.remove('nano-mode');
    localStorage.setItem('compactMode', 'false');
    localStorage.setItem('microMode', 'false');
    localStorage.setItem('nanoMode', 'false');
    localStorage.setItem('autoCompact', 'false'); // Remove auto-compacto também
    console.log('✅ Modo compacto desativado');
  }

  // Atualizar botões
  const microBtn = document.querySelector('.micro-compact-btn');
  const nanoBtn = document.querySelector('.nano-compact-btn');
  if (microBtn) {
    microBtn.classList.remove('active');
  }
  if (nanoBtn) {
    nanoBtn.classList.remove('active');
  }

  // Feedback visual
  window.Snackbar?.({
    message: `Interface ${enabled ? 'ultra-compactada' : 'normal'}`,
    type: 'success'
  });

  // Forçar reflow para aplicar mudanças
  setTimeout(() => {
    container.offsetHeight;
    if (appContainer) appContainer.offsetHeight;
  }, 50);
};

// Função para alternar modo micro-compacto
window.toggleMicroMode = function() {
  console.log('📱 Alternando modo micro-compacto');

  const container = document.querySelector('.settings-container');
  const appContainer = document.querySelector('.app-container');
  const body = document.body;
  const microBtn = document.querySelector('.micro-compact-btn');
  const nanoBtn = document.querySelector('.nano-compact-btn');
  if (!container || !microBtn) return;

  const isMicro = container.classList.contains('micro-mode');

  if (isMicro) {
    container.classList.remove('micro-mode');
    if (appContainer) appContainer.classList.remove('micro-mode');
    body.classList.remove('micro-mode');
    microBtn.classList.remove('active');
    localStorage.setItem('microMode', 'false');
    console.log('✅ Modo micro-compacto desativado');
    window.Snackbar?.({
      message: 'Modo micro-compacto desativado',
      type: 'success'
    });
  } else {
    // Ativar modo micro (requer modo compacto ativo)
    if (!container.classList.contains('compact-mode')) {
      container.classList.add('compact-mode');
      if (appContainer) appContainer.classList.add('compact-mode');
      body.classList.add('compact-mode');
      localStorage.setItem('compactMode', 'true');
    }
    container.classList.add('micro-mode');
    if (appContainer) appContainer.classList.add('micro-mode');
    body.classList.add('micro-mode');
    microBtn.classList.add('active');
    localStorage.setItem('microMode', 'true');
    console.log('✅ Modo micro-compacto ativado');
    window.Snackbar?.({
      message: 'Modo micro-compacto ativado',
      type: 'success'
    });
  }

  // Remover modo nano se estiver ativo
  if (container.classList.contains('nano-mode')) {
    container.classList.remove('nano-mode');
    if (appContainer) appContainer.classList.remove('nano-mode');
    body.classList.remove('nano-mode');
    if (nanoBtn) {
      nanoBtn.classList.remove('active');
    }
    localStorage.setItem('nanoMode', 'false');
  }

  // Forçar reflow para aplicar mudanças
  setTimeout(() => {
    container.offsetHeight;
    if (appContainer) appContainer.offsetHeight;
  }, 50);
};

// Função para alternar modo nano-compacto
window.toggleNanoMode = function() {
  console.log('📱 Alternando modo nano-compacto');

  const container = document.querySelector('.settings-container');
  const appContainer = document.querySelector('.app-container');
  const body = document.body;
  const nanoBtn = document.querySelector('.nano-compact-btn');
  const microBtn = document.querySelector('.micro-compact-btn');
  if (!container || !nanoBtn) return;

  const isNano = container.classList.contains('nano-mode');

  if (isNano) {
    container.classList.remove('nano-mode');
    if (appContainer) appContainer.classList.remove('nano-mode');
    body.classList.remove('nano-mode');
    nanoBtn.classList.remove('active');
    localStorage.setItem('nanoMode', 'false');
    console.log('✅ Modo nano-compacto desativado');
    window.Snackbar?.({
      message: 'Modo nano-compacto desativado',
      type: 'success'
    });
  } else {
    // Ativar modo nano (requer modo compacto ativo)
    if (!container.classList.contains('compact-mode')) {
      container.classList.add('compact-mode');
      if (appContainer) appContainer.classList.add('compact-mode');
      body.classList.add('compact-mode');
      localStorage.setItem('compactMode', 'true');
    }
    // Ativar modo micro também se não estiver ativo
    if (!container.classList.contains('micro-mode')) {
      container.classList.add('micro-mode');
      if (appContainer) appContainer.classList.add('micro-mode');
      body.classList.add('micro-mode');
      if (microBtn) {
        microBtn.classList.add('active');
      }
      localStorage.setItem('microMode', 'true');
    }
    container.classList.add('nano-mode');
    if (appContainer) appContainer.classList.add('nano-mode');
    body.classList.add('nano-mode');
    nanoBtn.classList.add('active');
    localStorage.setItem('nanoMode', 'true');
    console.log('✅ Modo nano-compacto ativado');
    window.Snackbar?.({
      message: 'Modo nano-compacto ativado',
      type: 'success'
    });
  }

  // Forçar reflow para aplicar mudanças
  setTimeout(() => {
    container.offsetHeight;
    if (appContainer) appContainer.offsetHeight;
  }, 50);
};

// Função para inicializar modo compacto
window.initializeCompactMode = function() {
  const isCompact = localStorage.getItem('compactMode') === 'true';
  const isAutoCompact = localStorage.getItem('autoCompact') === 'true';
  const isMicro = localStorage.getItem('microMode') === 'true';
  const isNano = localStorage.getItem('nanoMode') === 'true';
  console.log('📱 Inicializando modo compacto:', isCompact, 'Auto:', isAutoCompact, 'Micro:', isMicro, 'Nano:', isNano);

  // Detectar telas muito pequenas e aplicar auto-compacto
  const isSmallScreen = window.innerWidth <= 480 || window.innerHeight <= 600;
  if (isSmallScreen && !isAutoCompact) {
    console.log('📱 Tela pequena detectada, aplicando auto-compacto');
    localStorage.setItem('autoCompact', 'true');
    localStorage.setItem('compactMode', 'true');
  }

  // Atualizar checkbox
  const checkbox = document.getElementById('compact-interface');
  if (checkbox) {
    checkbox.checked = isCompact || isAutoCompact;
  }

  // Aplicar modo salvo
  window.toggleCompactMode(isCompact || isAutoCompact);

  // Aplicar modo micro se necessário
  if (isMicro) {
    setTimeout(() => {
      window.toggleMicroMode();
    }, 100);
  }

  // Aplicar modo nano se necessário
  if (isNano) {
    setTimeout(() => {
      window.toggleNanoMode();
    }, 200);
  }
};

// Função para detectar mudanças de tamanho de tela
window.handleResize = function() {
  const isSmallScreen = window.innerWidth <= 480 || window.innerHeight <= 600;
  const isAutoCompact = localStorage.getItem('autoCompact') === 'true';

  if (isSmallScreen && !isAutoCompact) {
    console.log('📱 Tela pequena detectada, aplicando auto-compacto');
    localStorage.setItem('autoCompact', 'true');
    localStorage.setItem('compactMode', 'true');
    window.toggleCompactMode(true);

    // Atualizar checkbox
    const checkbox = document.getElementById('compact-interface');
    if (checkbox) {
      checkbox.checked = true;
    }
  } else if (!isSmallScreen && isAutoCompact) {
    console.log('📱 Tela maior detectada, removendo auto-compacto');
    localStorage.setItem('autoCompact', 'false');
    // Não remove o modo compacto manual, apenas o automático
  }
};

// Helpers globais para ajuste de desempenho das Transações
if (typeof window !== 'undefined') {
  if (typeof window.saveTxChunkSize !== 'function') {
    window.saveTxChunkSize = function saveTxChunkSize() {
      try {
        const input = document.getElementById('tx-chunk-size');
        if (!input) return;
        const raw = String(input.value || '').trim();
        if (raw === '') {
          localStorage.removeItem('txChunkSize');
          window.Snackbar?.({ message: 'Ajuste automático ativado. Abra novamente a aba Transações.', type: 'info' });
          return;
        }
        const n = parseInt(raw, 10);
        if (Number.isNaN(n) || n < 6 || n > 40) {
          window.Snackbar?.({ message: 'Valor inválido. Use um número entre 6 e 40.', type: 'warning' });
          return;
        }
        localStorage.setItem('txChunkSize', String(n));
        window.Snackbar?.({ message: `Tamanho do bloco definido para ${n}. Abra novamente a aba Transações.`, type: 'success' });
      } catch (e) {
        console.warn('saveTxChunkSize error:', e);
        window.Snackbar?.({ message: 'Não foi possível salvar a configuração.', type: 'error' });
      }
    };
  }
  if (typeof window.resetTxChunkSize !== 'function') {
    window.resetTxChunkSize = function resetTxChunkSize() {
      try {
        localStorage.removeItem('txChunkSize');
        const input = document.getElementById('tx-chunk-size');
        if (input) input.value = '';
        window.Snackbar?.({ message: 'Configuração restaurada para automático.', type: 'info' });
      } catch (e) {
        console.warn('resetTxChunkSize error:', e);
      }
    };
  }
}

// Funções de configuração da página
window.setupSettingsPage = function() {
  // Carregar configurações salvas
  const txChunkSize = localStorage.getItem('txChunkSize');
  const compactMode = localStorage.getItem('compactMode') === 'true';
  const microMode = localStorage.getItem('microMode') === 'true';
  const nanoMode = localStorage.getItem('nanoMode') === 'true';

  // Aplicar configurações
  if (txChunkSize) {
    const input = document.getElementById('tx-chunk-size');
    if (input) input.value = txChunkSize;
  }
  if (compactMode) {
    window.toggleCompactMode(true);
  }
  if (microMode) {
    window.toggleMicroMode();
  }
  if (nanoMode) {
    window.toggleNanoMode();
  }
};

// Inicializar página de configurações ao carregar
window.addEventListener('load', () => {
  setTimeout(() => {
    window.setupSettingsPage();
  }, 100);
});

// Wrapper para Biometria Nativa via Capacitor Plugin
// Funciona APENAS no APK (Android nativo)

export class NativeBiometric {
  constructor() {
    this.isNative = window.Capacitor?.isNativePlatform();
    this.plugin = window.Capacitor?.Plugins?.BiometricAuth;
  }

  /**
   * Verificar se biometria estÃ¡ disponÃ­vel no dispositivo
   * @returns {Promise<{isAvailable: boolean, biometryType: string, reason: string}>}
   */
  async isAvailable() {
    console.log('ðŸ”’ [NativeBiometric] Verificando disponibilidade...');
    console.log('ðŸ”’ [NativeBiometric] Ã‰ nativo:', this.isNative);
    console.log('ðŸ”’ [NativeBiometric] Plugin disponÃ­vel:', !!this.plugin);

    if (!this.isNative) {
      return {
        isAvailable: false,
        biometryType: 'none',
        reason: 'Funciona apenas no APK nativo'
      };
    }

    if (!this.plugin) {
      console.error('ðŸ”’ [NativeBiometric] Plugin BiometricAuth nÃ£o encontrado');
      return {
        isAvailable: false,
        biometryType: 'none',
        reason: 'Plugin nÃ£o encontrado'
      };
    }

    try {
      const result = await this.plugin.isAvailable();
      console.log('ðŸ”’ [NativeBiometric] Resultado da verificaÃ§Ã£o:', result);
      return result;
    } catch (error) {
      console.error('ðŸ”’ [NativeBiometric] Erro ao verificar disponibilidade:', error);
      return {
        isAvailable: false,
        biometryType: 'none',
        reason: error.message || 'Erro desconhecido'
      };
    }
  }

  /**
   * Solicitar autenticaÃ§Ã£o biomÃ©trica
   * @param {Object} options - OpÃ§Ãµes de autenticaÃ§Ã£o
   * @param {string} options.title - TÃ­tulo do prompt
   * @param {string} options.subtitle - SubtÃ­tulo do prompt
   * @param {string} options.description - DescriÃ§Ã£o adicional
   * @param {string} options.negativeButtonText - Texto do botÃ£o de cancelar
   * @returns {Promise<{success: boolean, error?: string}>}
   */
  async authenticate(options = {}) {
    console.log('ðŸ”’ [NativeBiometric] Iniciando autenticaÃ§Ã£o...');
    console.log('ðŸ”’ [NativeBiometric] OpÃ§Ãµes:', options);

    if (!this.isNative || !this.plugin) {
      return {
        success: false,
        error: 'Biometria nativa nÃ£o disponÃ­vel'
      };
    }

    const defaultOptions = {
      title: 'AutenticaÃ§Ã£o BiomÃ©trica',
      subtitle: 'Confirme sua identidade',
      description: '',
      negativeButtonText: 'Cancelar'
    };

    const authOptions = { ...defaultOptions, ...options };

    try {
      const result = await this.plugin.authenticate(authOptions);
      console.log('ðŸ”’ [NativeBiometric] Resultado da autenticaÃ§Ã£o:', result);
      return result;
    } catch (error) {
      console.error('ðŸ”’ [NativeBiometric] Erro na autenticaÃ§Ã£o:', error);
      return {
        success: false,
        error: error.message || 'Erro na autenticaÃ§Ã£o'
      };
    }
  }

  /**
   * Salvar credenciais de login para uso posterior
   * @param {string} userId - ID do usuÃ¡rio
   * @param {Object} userInfo - InformaÃ§Ãµes do usuÃ¡rio
   */
  saveCredentials(userId, userInfo) {
    if (!this.isNative) {
      console.warn('ðŸ”’ [NativeBiometric] saveCredentials sÃ³ funciona no APK');
      return;
    }

    try {
      localStorage.setItem('biometric_userId', userId);
      localStorage.setItem('biometric_userInfo', JSON.stringify(userInfo));
      console.log('ðŸ”’ [NativeBiometric] Credenciais salvas:', userId);
    } catch (error) {
      console.error('ðŸ”’ [NativeBiometric] Erro ao salvar credenciais:', error);
    }
  }

  /**
   * Carregar credenciais salvas
   * @returns {{userId: string, userInfo: Object} | null}
   */
  loadCredentials() {
    if (!this.isNative) {
      return null;
    }

    try {
      const userId = localStorage.getItem('biometric_userId');
      const userInfoStr = localStorage.getItem('biometric_userInfo');

      if (userId && userInfoStr) {
        return {
          userId,
          userInfo: JSON.parse(userInfoStr)
        };
      }
    } catch (error) {
      console.error('ðŸ”’ [NativeBiometric] Erro ao carregar credenciais:', error);
    }

    return null;
  }

  /**
   * Limpar credenciais salvas
   */
  clearCredentials() {
    if (!this.isNative) {
      return;
    }

    try {
      localStorage.removeItem('biometric_userId');
      localStorage.removeItem('biometric_userInfo');
      localStorage.removeItem('biometric_enabled');
      console.log('ðŸ”’ [NativeBiometric] Credenciais limpas');
    } catch (error) {
      console.error('ðŸ”’ [NativeBiometric] Erro ao limpar credenciais:', error);
    }
  }

  /**
   * Verificar se hÃ¡ credenciais salvas
   * @returns {boolean}
   */
  hasCredentials() {
    if (!this.isNative) {
      return false;
    }

    return !!localStorage.getItem('biometric_userId');
  }
}

// Expor globalmente
if (typeof window !== 'undefined') {
  window.nativeBiometric = new NativeBiometric();
  console.log('ðŸ”’ [NativeBiometric] Wrapper criado e exposto globalmente');
}



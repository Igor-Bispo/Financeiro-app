/**
 * AnalyticsRoute.js - M√≥dulo para renderiza√ß√£o da rota de an√°lises financeiras
 * Vers√£o Definitiva - √Ä Prova de Falhas
 * 
 * Este m√≥dulo integra a p√°gina de an√°lises financeiras ao aplicativo principal.
 */

import { AnalyticsPage } from './AnalyticsPage.js';

// Sistema de prote√ß√£o contra condi√ß√µes de corrida
let isRenderingAnalytics = false;
let renderingPromise = null;

/**
 * Renderiza a p√°gina de an√°lises financeiras - Vers√£o Anti-Corrida
 * @returns {Promise<void>}
 */
export async function renderAnalytics() {
  const timestamp = new Date().toISOString();
  console.log(`üéØ [${timestamp}] Iniciando renderiza√ß√£o de an√°lises - Vers√£o Anti-Corrida`);
  
  // Prote√ß√£o contra m√∫ltiplas chamadas simult√¢neas
  if (isRenderingAnalytics) {
    console.log(`‚è≥ [${timestamp}] Renderiza√ß√£o j√° em andamento, aguardando...`);
    if (renderingPromise) {
      return await renderingPromise;
    }
  }
  
  isRenderingAnalytics = true;
  
  renderingPromise = (async () => {
    try {
      // 1. For√ßar limpeza do DOM
      console.log(`üßπ [${timestamp}] Limpando DOM...`);
      const appContent = document.getElementById('app-content');
      if (!appContent) {
        throw new Error('Container app-content n√£o encontrado');
      }
      
      // Limpar completamente o conte√∫do
      appContent.innerHTML = '';
      
      // Aguardar limpeza
      await new Promise(resolve => setTimeout(resolve, 50));
      
      console.log(`‚úÖ [${timestamp}] app-content limpo e encontrado`);
      
      // 2. Verificar autentica√ß√£o
      if (!window.appState?.currentUser) {
        console.log(`‚ö†Ô∏è [${timestamp}] Usu√°rio n√£o autenticado`);
        renderErrorPage('Usu√°rio n√£o autenticado', 'Fa√ßa login para acessar as an√°lises');
        return;
      }
      
      // 3. Carregar or√ßamentos se necess√°rio
      if (!window.appState?.currentBudget) {
        console.log(`üîÑ [${timestamp}] Carregando or√ßamentos...`);
        if (window.loadBudgets) {
          await window.loadBudgets();
        }
      }
      
      // 4. Criar HTML da p√°gina de forma s√≠ncrona
      console.log(`üèóÔ∏è [${timestamp}] Criando HTML da p√°gina...`);
      const pageHTML = createAnalyticsPageHTML();
      
      // 5. Inserir HTML de forma at√¥mica
      console.log(`üìù [${timestamp}] Inserindo HTML...`);
      appContent.innerHTML = pageHTML;
      
      // 6. Verifica√ß√£o imediata
      let analyticsContent = document.getElementById('analytics-content');
      if (!analyticsContent) {
        console.log(`‚ö†Ô∏è [${timestamp}] analytics-content n√£o encontrado imediatamente, aguardando...`);
        
        // Aguardar processamento do DOM
        await new Promise(resolve => setTimeout(resolve, 100));
        
        analyticsContent = document.getElementById('analytics-content');
        if (!analyticsContent) {
          console.log(`‚ùå [${timestamp}] analytics-content ainda n√£o encontrado, for√ßando cria√ß√£o...`);
          
          // For√ßar cria√ß√£o direta
          const analyticsDiv = document.createElement('div');
          analyticsDiv.id = 'analytics-content';
          analyticsDiv.className = 'analytics-content';
          appContent.appendChild(analyticsDiv);
          analyticsContent = analyticsDiv;
          
          console.log(`üîß [${timestamp}] analytics-content criado for√ßadamente`);
        }
      }
      
      console.log(`‚úÖ [${timestamp}] analytics-content encontrado:`, analyticsContent);
      
      // 7. Renderizar conte√∫do
      await renderAnalyticsContent(analyticsContent);
      
      console.log(`üéâ [${timestamp}] An√°lises renderizadas com sucesso!`);
      
    } catch (error) {
      const timestamp = new Date().toISOString();
      console.error(`üí• [${timestamp}] Erro ao renderizar an√°lises:`, error);
      renderErrorPage('Erro ao carregar an√°lises', error.message);
    } finally {
      isRenderingAnalytics = false;
      renderingPromise = null;
    }
  })();
  
  return await renderingPromise;
}

/**
 * Cria o HTML da p√°gina de an√°lises
 * @returns {string} HTML da p√°gina
 */
function createAnalyticsPageHTML() {
  return `
    <div class="tab-container">
      <div class="tab-header">
        <h2 class="tab-title-highlight">An√°lises Financeiras</h2>
      </div>
      <div class="tab-content">
        <div class="content-spacing" id="analytics-content">
          <div class="flex justify-center items-center py-12">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
            <span class="ml-3 text-gray-600 dark:text-gray-400">Carregando an√°lises...</span>
          </div>
        </div>
      </div>
    </div>
  `;
}

/**
 * Aguarda o processamento do DOM
 * @returns {Promise<void>}
 */
async function waitForDOM() {
  // Aguardar m√∫ltiplos ticks do DOM
  await new Promise(resolve => setTimeout(resolve, 0));
  await new Promise(resolve => requestAnimationFrame(resolve));
  await new Promise(resolve => setTimeout(resolve, 50));
}

/**
 * Encontra o container analytics-content com retry
 * @returns {HTMLElement|null}
 */
function findAnalyticsContent() {
  // Tentar m√∫ltiplas vezes
  for (let i = 0; i < 5; i++) {
    const element = document.getElementById('analytics-content');
    if (element) {
      return element;
    }
    
    // Aguardar um pouco antes da pr√≥xima tentativa
    const delay = Math.pow(2, i) * 10; // 10ms, 20ms, 40ms, 80ms, 160ms
    const start = Date.now();
    while (Date.now() - start < delay) {
      // Busy wait
    }
  }
  
  return null;
}

/**
 * Renderiza o conte√∫do da p√°gina de an√°lises
 * @param {HTMLElement} container Container onde renderizar
 * @param {string} timestamp Timestamp para logs
 */
async function renderAnalyticsContent(container, timestamp) {
  try {
    console.log(`üé® [${timestamp}] Renderizando conte√∫do da p√°gina...`);
    
    const analyticsPage = await AnalyticsPage.render(window.appState.currentBudget.id);
    
    // Limpar loading e adicionar conte√∫do
    container.innerHTML = '';
    container.appendChild(analyticsPage);
    
    console.log(`‚úÖ [${timestamp}] Conte√∫do renderizado com sucesso`);
    
  } catch (pageError) {
    console.error(`‚ùå [${timestamp}] Erro ao renderizar conte√∫do:`, pageError);
    
    container.innerHTML = `
      <div class="bg-red-100 dark:bg-red-900/30 border border-red-200 dark:border-red-800 text-red-700 dark:text-red-400 px-4 py-3 rounded relative mb-6">
        <strong class="font-bold">Erro ao carregar gr√°ficos!</strong>
        <span class="block sm:inline mt-2">N√£o foi poss√≠vel carregar os gr√°ficos de an√°lise.</span>
        <p class="text-sm mt-2 opacity-75">${pageError.message}</p>
      </div>
      <div class="flex gap-2">
        <button onclick="window.location.hash = '#analytics'" class="btn-secondary">
          <i class="fas fa-redo mr-2"></i> Tentar Novamente
        </button>
        <button onclick="window.location.hash = '#/dashboard'" class="btn-primary">
          <i class="fas fa-arrow-left mr-2"></i> Voltar ao Dashboard
        </button>
      </div>
    `;
  }
}

/**
 * Renderiza p√°gina de erro
 * @param {Error} error Erro ocorrido
 * @param {string} timestamp Timestamp para logs
 */
async function renderErrorPage(error, timestamp) {
  console.log(`üö® [${timestamp}] Renderizando p√°gina de erro...`);
  
  const appContent = document.getElementById('app-content');
  if (!appContent) {
    console.error(`üí• [${timestamp}] N√£o foi poss√≠vel renderizar p√°gina de erro: app-content n√£o encontrado`);
    return;
  }
  
  appContent.innerHTML = `
    <div class="tab-container">
      <div class="tab-header">
        <h2 class="tab-title-highlight">An√°lises Financeiras</h2>
      </div>
      <div class="tab-content">
        <div class="content-spacing">
          <div class="bg-red-100 dark:bg-red-900/30 border border-red-200 dark:border-red-800 text-red-700 dark:text-red-400 px-4 py-3 rounded relative mb-6">
            <strong class="font-bold">Erro!</strong>
            <span class="block sm:inline mt-2">N√£o foi poss√≠vel carregar as an√°lises financeiras.</span>
            <p class="text-sm mt-2 opacity-75">${error.message}</p>
            <p class="text-xs mt-1 opacity-50">Timestamp: ${timestamp}</p>
          </div>
          <div class="flex gap-2">
            <button id="retry-analytics-btn" class="btn-secondary">
              <i class="fas fa-redo mr-2"></i> Tentar Novamente
            </button>
            <button id="back-dashboard-btn" class="btn-primary">
              <i class="fas fa-arrow-left mr-2"></i> Voltar ao Dashboard
            </button>
          </div>
        </div>
      </div>
    </div>
  `;
  
  // Adicionar eventos aos bot√µes
  const retryBtn = document.getElementById('retry-analytics-btn');
  if (retryBtn) {
    retryBtn.addEventListener('click', () => {
      console.log(`üîÑ [${timestamp}] Tentando novamente...`);
      renderAnalytics();
    });
  }
  
  const backBtn = document.getElementById('back-dashboard-btn');
  if (backBtn) {
    backBtn.addEventListener('click', () => {
      console.log(`üè† [${timestamp}] Voltando ao dashboard...`);
      window.location.hash = '#/dashboard';
    });
  }
  
  console.log(`‚úÖ [${timestamp}] P√°gina de erro renderizada`);
}

// Registrar fun√ß√£o globalmente
window.renderAnalytics = renderAnalytics;

// Log de carregamento do m√≥dulo
console.log('üì¶ AnalyticsRoute.js carregado (vers√£o definitiva)');
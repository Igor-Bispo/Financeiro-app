// PeriodIndicator.js - Componente reutilizÃ¡vel para exibir/alterar o perÃ­odo (mÃªs/ano)
// Uso: const el = createPeriodIndicator({ onChange: () => rerender() , readonly: false })

export function createPeriodIndicator(options = {}) {
  const { onChange, readonly = false } = options;

  // Obter perÃ­odo selecionado globalmente
  const getPeriod = () => {
    if (typeof window.getSelectedPeriod === 'function') return window.getSelectedPeriod();
    const now = new Date();
    return {
      year: window.appState?.selectedYear || now.getFullYear(),
      month: window.appState?.selectedMonth || now.getMonth() + 1,
    };
  };

  const setPeriod = (y, m) => {
    if (typeof window.setSelectedPeriod === 'function') window.setSelectedPeriod(y, m);
    else {
      window.appState = window.appState || {};
      window.appState.selectedYear = y;
      window.appState.selectedMonth = m;
      // Atualiza URL hash mÃ­nima (sem quebrar deep-link existente)
      try {
        const ym = String(y) + '-' + String(m).padStart(2, '0');
        const url = new URL(window.location.href);
        const hash = url.hash.split('?')[0] || url.hash;
        url.hash = `${hash}?ym=${ym}`;
        history.replaceState(null, '', url.toString());
      } catch {}
    }
    if (typeof onChange === 'function') onChange();
  };

  const monthNames = ['Janeiro','Fevereiro','MarÃ§o','Abril','Maio','Junho','Julho','Agosto','Setembro','Outubro','Novembro','Dezembro'];
  const now = new Date();
  const currentYear = now.getFullYear();
  const years = [];
  for (let y = currentYear - 4; y <= currentYear + 1; y++) years.push(y);

  const { year: selYear, month: selMonth } = getPeriod();

  const wrapper = document.createElement('div');
  // wrapper estilizado para caber bem em toolbars/top-right
  wrapper.className = 'pi-container inline-flex';

  const currentLabel = `${monthNames[Math.max(0, Math.min(11, selMonth-1))]} ${selYear}`;

  if (readonly) {
    wrapper.innerHTML = `
      <div class="flex items-center gap-2 bg-white/70 dark:bg-gray-800/60 backdrop-blur rounded-xl border border-gray-200 dark:border-gray-700 shadow-sm px-3 py-2">
        <span class="hidden sm:inline text-xs md:text-sm text-gray-600 dark:text-gray-300">PerÃ­odo:</span>
        <span class="inline-flex items-center gap-1 text-xs md:text-sm px-2 py-1 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 border border-gray-200 dark:border-gray-600">ðŸ“… ${currentLabel}</span>
      </div>
    `;
    return wrapper;
  }

  wrapper.innerHTML = `
    <div class="flex flex-wrap items-center gap-2 bg-white/70 dark:bg-gray-800/60 backdrop-blur rounded-xl border border-gray-200 dark:border-gray-700 shadow-sm px-3 py-2">
      <span class="hidden sm:inline text-xs md:text-sm text-gray-600 dark:text-gray-300">PerÃ­odo:</span>
      <select data-pi="month" class="h-8 px-2 rounded-lg bg-gray-50 dark:bg-gray-900/40 border border-gray-200 dark:border-gray-700 text-xs md:text-sm text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-blue-500">
        ${monthNames.map((m, idx) => `<option value="${idx+1}" ${idx+1 === selMonth ? 'selected' : ''}>${m}</option>`).join('')}
      </select>
      <select data-pi="year" class="h-8 px-2 rounded-lg bg-gray-50 dark:bg-gray-900/40 border border-gray-200 dark:border-gray-700 text-xs md:text-sm text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-blue-500">
        ${years.map(y => `<option value="${y}" ${y === selYear ? 'selected' : ''}>${y}</option>`).join('')}
      </select>
      <button data-pi="current" class="h-8 px-2 md:px-3 text-[11px] md:text-xs rounded-lg bg-blue-50 text-blue-700 dark:bg-blue-900/30 dark:text-blue-300 border border-blue-200 dark:border-blue-800 hover:bg-blue-100 dark:hover:bg-blue-900/50 transition">MÃªs atual</button>
      <span class="hidden md:inline text-[11px] md:text-xs ml-1 px-2 py-1 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 border border-gray-200 dark:border-gray-600">ðŸ“… ${currentLabel}</span>
    </div>
  `;

  // Bind
  const monthSel = wrapper.querySelector('select[data-pi="month"]');
  const yearSel = wrapper.querySelector('select[data-pi="year"]');
  const btnAtual = wrapper.querySelector('button[data-pi="current"]');

  if (monthSel) {
    monthSel.addEventListener('change', () => {
      const newMonth = parseInt(monthSel.value, 10);
      setPeriod(selYear, newMonth);
    });
  }
  if (yearSel) {
    yearSel.addEventListener('change', () => {
      const newYear = parseInt(yearSel.value, 10);
      setPeriod(newYear, selMonth);
    });
  }
  if (btnAtual) {
    btnAtual.addEventListener('click', () => {
      const y = now.getFullYear();
      const m = now.getMonth() + 1;
      setPeriod(y, m);
    });
  }

  return wrapper;
}

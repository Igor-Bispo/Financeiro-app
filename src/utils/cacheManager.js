// cacheManager.js - Gerenciador de cache para evitar loops infinitos
// Este arquivo gerencia a limpeza autom√°tica de cache quando necess√°rio

const CACHE_VERSION_KEY = 'app_cache_version';
const CURRENT_VERSION = 'v4.39.0';

/**
 * Verifica se h√° uma nova vers√£o e limpa o cache se necess√°rio
 */
export async function checkAndClearCache() {
  try {
    const storedVersion = localStorage.getItem(CACHE_VERSION_KEY);
    
    if (storedVersion !== CURRENT_VERSION) {
      console.log(`üîÑ [CacheManager] Nova vers√£o detectada: ${CURRENT_VERSION} (anterior: ${storedVersion})`);
      
      // Limpar todos os caches
      await clearAllCaches();
      
      // Limpar localStorage de vers√µes antigas
      clearOldLocalStorage();
      
      // Atualizar vers√£o armazenada
      localStorage.setItem(CACHE_VERSION_KEY, CURRENT_VERSION);
      
      console.log('‚úÖ [CacheManager] Cache limpo e vers√£o atualizada');
      
      // Recarregar a p√°gina para garantir que a nova vers√£o seja carregada
      if (storedVersion) { // S√≥ recarrega se j√° havia uma vers√£o anterior
        console.log('üîÑ [CacheManager] Recarregando p√°gina para aplicar nova vers√£o...');
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      }
    } else {
      console.log(`‚úÖ [CacheManager] Vers√£o atual j√° est√° em uso: ${CURRENT_VERSION}`);
    }
  } catch (error) {
    console.error('‚ùå [CacheManager] Erro ao verificar/limpar cache:', error);
  }
}

/**
 * Limpa todos os caches do navegador
 */
async function clearAllCaches() {
  try {
    if ('caches' in window) {
      const cacheNames = await caches.keys();
      console.log(`üßπ [CacheManager] Limpando ${cacheNames.length} caches:`, cacheNames);
      
      await Promise.all(
        cacheNames.map(cacheName => {
          console.log(`üóëÔ∏è [CacheManager] Removendo cache: ${cacheName}`);
          return caches.delete(cacheName);
        })
      );
      
      console.log('‚úÖ [CacheManager] Todos os caches foram limpos');
    }
  } catch (error) {
    console.error('‚ùå [CacheManager] Erro ao limpar caches:', error);
  }
}

/**
 * Limpa dados antigos do localStorage
 */
function clearOldLocalStorage() {
  try {
    const keysToRemove = [];
    
    // Lista de chaves que podem causar problemas se mantidas entre vers√µes
    const problematicKeys = [
      'notification_use_modal',
      'notification_toasts_enabled',
      'sw_version',
      'app_state',
      'user_preferences'
    ];
    
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key && problematicKeys.some(problematic => key.includes(problematic))) {
        keysToRemove.push(key);
      }
    }
    
    keysToRemove.forEach(key => {
      console.log(`üóëÔ∏è [CacheManager] Removendo chave do localStorage: ${key}`);
      localStorage.removeItem(key);
    });
    
    console.log(`‚úÖ [CacheManager] ${keysToRemove.length} chaves antigas removidas do localStorage`);
  } catch (error) {
    console.error('‚ùå [CacheManager] Erro ao limpar localStorage:', error);
  }
}

/**
 * For√ßa a limpeza completa do cache (para uso manual)
 */
export async function forceClearCache() {
  try {
    console.log('üßπ [CacheManager] For√ßando limpeza completa do cache...');
    
    await clearAllCaches();
    clearOldLocalStorage();
    
    // Remover a vers√£o para for√ßar recarregamento
    localStorage.removeItem(CACHE_VERSION_KEY);
    
    console.log('‚úÖ [CacheManager] Limpeza for√ßada conclu√≠da');
    
    // Recarregar p√°gina
    window.location.reload();
  } catch (error) {
    console.error('‚ùå [CacheManager] Erro na limpeza for√ßada:', error);
  }
}

/**
 * Verifica se o service worker est√° funcionando corretamente
 */
export async function checkServiceWorker() {
  try {
    if ('serviceWorker' in navigator) {
      const registration = await navigator.serviceWorker.getRegistration();
      
      if (registration) {
        console.log('‚úÖ [CacheManager] Service Worker ativo:', registration.scope);
        
        // Verificar se h√° uma nova vers√£o dispon√≠vel
        if (registration.waiting) {
          console.log('üîÑ [CacheManager] Nova vers√£o do Service Worker aguardando ativa√ß√£o');
          // For√ßar ativa√ß√£o da nova vers√£o
          registration.waiting.postMessage({ type: 'SKIP_WAITING' });
        }
        
        return true;
      } else {
        console.warn('‚ö†Ô∏è [CacheManager] Service Worker n√£o encontrado');
        return false;
      }
    } else {
      console.warn('‚ö†Ô∏è [CacheManager] Service Worker n√£o suportado neste navegador');
      return false;
    }
  } catch (error) {
    console.error('‚ùå [CacheManager] Erro ao verificar Service Worker:', error);
    return false;
  }
}

// Expor fun√ß√µes globalmente para debug
if (typeof window !== 'undefined') {
  window.clearCache = forceClearCache;
  window.checkCache = checkAndClearCache;
  window.checkSW = checkServiceWorker;
}
